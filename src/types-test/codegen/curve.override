/* -*- Mode: C -*- */
%%
include-start Curve
/* inserted at the start of include file */
#include <nsp/figure.h>

%%
include-public Curve
/* inserted at the end of public part of include file */
typedef enum { curve_std, curve_stairs, curve_stem , curve_arrow, curve_fill, curve_stairs_fill } nsp_curve_mode ;

%%
include-private Curve

/* inserted in the private part of include file */
static void nsp_draw_curve(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_curve(NspGraphic *o,const double *tr);
static void nsp_rotate_curve(NspGraphic *o,double *R);
static void nsp_scale_curve(NspGraphic *o,double *alpha);
static int nsp_getbounds_curve(NspGraphic *o,double *bounds);
static void nsp_curve_fill(BCG *Xgc,NspCurve *C,NspMatrix *M);
static void nsp_curve_fill_basic(BCG *Xgc,NspCurve *C,NspMatrix *M);

#ifdef  WITH_OPENGL
static void nsp_curve_fill_ext(BCG *Xgc,NspCurve *C,NspMatrix *M);
static int nsp_curve_fill_part(BCG *Xgc,NspCurve *C, NspMatrix *M, int start,double *xi);
#endif

static void nsp_curve_stairs_fill_basic(BCG *Xgc,NspCurve *P,NspMatrix *M);
static void nsp_curve_stairs_fill(BCG *Xgc,NspCurve *P,NspMatrix *M);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/curve.h>
#include <nsp/figuredata.h>
#include <nsp/figure.h>

%%
init

Init portion

%%
override-type Curve
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_curve;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_curve ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_curve  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_curve  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_curve  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Curve */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-attr Curve.mode
/* override set alpha */
static int _wrap_curve_set_mode(void *self, char *attr, NspObject *O)
{
  int mode;
  if ( IntScalar(O,&mode) == FAIL) return FAIL;
  if ( ((NspCurve *) self)->obj->mode !=  mode)
    {
      ((NspCurve *) self)->obj->mode =  mode;
      nsp_graphic_invalidate((NspGraphic *) self);
    }
  return OK;
}

%%
override-attr Curve.Pts

/* overriden to check dimensions when changing values.
 */

static NspObject *_wrap_curve_get_obj_Pts(void *self,char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE;
  ret = ((NspMatrix*) ((NspCurve *) self)->obj->Pts);
  return (NspObject *) ret;
}

static int _wrap_curve_set_obj_Pts(void *self,NspObject *val)
{
  NspMatrix *M= (NspMatrix *) val ;
  NspCurve *poly = self ;
  if ( M->rc_type != 'r' || M->n != 2 )
    {
      Scierror("Error: curve field Pts should be real an mx2 sized\n");
      return FAIL;
    }
  /* before replacing the field we check that dimensions are correct */
  if ( poly->obj->Pts != NULL )
    nsp_matrix_destroy(poly->obj->Pts);
  poly->obj->Pts = (NspMatrix *) val ;
  return OK;
}

%%
override nsp_extractelts_curve kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_curve(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_curve kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_curve(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

/* nsp_draw_curve: drawing function for a curve 
 * WIP: dashed line style to be used 
 *      make a colored line with colors along the curve 
 *      or arrow color along the line 
 */

static void nsp_draw_curve(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  NspCurve *P = (NspCurve *) Obj;
  int xmark[2]={-1,-1},mode,obj_color=P->obj->color ;
  NspMatrix *M = P->obj->Pts;
  int c_width =  Xgc->graphic_engine->xget_thickness(Xgc);
  int c_color = Xgc->graphic_engine->xget_color(Xgc);

  if (Obj->obj->show == FALSE ) return;

  /* check if the block is inside drawing rectangle
   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  if ( P->obj->Pts->m == 0) return;
  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->width);
  if ( P->obj->mark >= -1 )
    {
      /* we will use a mark */
      Xgc->graphic_engine->xget_mark(Xgc,xmark);
      if ( P->obj->mark_size >= 0 )
	Xgc->graphic_engine->xset_mark(Xgc, P->obj->mark,P->obj->mark_size);
      else
	Xgc->graphic_engine->xset_mark(Xgc, P->obj->mark,xmark[1]);
    }
  mode = P->obj->mode;
 more :
  switch ( mode )
    {
    case curve_std:
      if ( P->obj->color >= -1 )
	{
	  if ( P->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, P->obj->color);
	  Xgc->graphic_engine->scale->drawpolyline(Xgc,M->R,M->R+M->m,M->m,0);
	  if ( P->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, c_color);
	}
      if ( P->obj->mark >= -1 )
	{
	  if ( P->obj->mark_color >= 0) Xgc->graphic_engine->xset_color(Xgc, P->obj->mark_color);
	  Xgc->graphic_engine->scale->drawpolymark(Xgc,M->R,M->R+M->m,M->m);
	  if ( P->obj->mark_color >= 0) Xgc->graphic_engine->xset_color(Xgc, c_color);
	}
      break;
    case curve_stairs:
      /* will just draw */
      nsp_curve_stairs_fill_basic(Xgc,P,M);
      break;
    case curve_stairs_fill:
      /* draw and fill with special algo for opengl */
      nsp_curve_stairs_fill(Xgc,P,M);
      if ( P->obj->mode == curve_stairs_fill ) { mode = curve_stem; obj_color=-1;goto more;};
      break;
    case curve_stem:
      {
	double xm[2],vx[2],ym[2],vy[2];
	int i;
	if ( M->m == 0) break;
	if ( obj_color >= 0) Xgc->graphic_engine->xset_color(Xgc, obj_color);
	for ( i=0 ; i < M->m ; i++)
	  {
	    xm[0]= M->R[i];
	    ym[0]= 0;
	    xm[1]= M->R[i];
	    ym[1]= M->R[i+M->m];
	    scale_double_to_pixels(Xgc->scales,xm,ym,vx,vy,2);
	    Xgc->graphic_engine->drawline(Xgc,vx[0],vy[0],vx[1],vy[1]);
	  }
	if ( obj_color >= 0) Xgc->graphic_engine->xset_color(Xgc, c_color);
      }
      break;
    case curve_arrow:
      {
	double *xm=NULL,*ym=NULL,arsize1,arsize2,arsize;
	int n= 2*M->m,i;
	if ( n == 0 ) break;
	xm = graphic_alloc(0,n,sizeof(double));
	ym = graphic_alloc(1,n,sizeof(double));
	if ( xm == 0 || ym == 0)
	  {
	    Sciprintf("Error: cannot allocate points for drawing\n");
	    return;
	  }
	/* size of arrow */
	arsize1= Abs(Xgc->scales->frect[2]-Xgc->scales->frect[0])/40.;
	arsize2= Abs(Xgc->scales->frect[3]-Xgc->scales->frect[1])/40.;
	arsize=  Min(arsize1, arsize2);
	for ( i=0 ; i < M->m -1 ; i++)
	  {
	    xm[2*i]= M->R[i];
	    ym[2*i]= M->R[i+M->m] ;
	    xm[2*i+1]= M->R[i+1];
	    ym[2*i+1]= M->R[i+M->m+1];
	  }
	Xgc->graphic_engine->scale->drawarrows(Xgc,xm,ym,n,arsize,&P->obj->color,0);
      }
      break;
    case curve_fill:
      nsp_curve_fill(Xgc,P,M);
      break;
    }

  Xgc->graphic_engine->xset_thickness(Xgc,c_width);
  Xgc->graphic_engine->xset_color(Xgc,c_color);
  if ( P->obj->mark >= 0)
    {
      Xgc->graphic_engine->xset_mark(Xgc,xmark[0],xmark[1]);
    }
}

static void nsp_translate_curve(NspGraphic *Obj,const double *tr)
{
  int i;
  NspCurve *P = (NspCurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < M->m ; i++)
    {
      *(x++) += tr[0];
      *(y++) += tr[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);

}

static void nsp_rotate_curve(NspGraphic *Obj,double *R)
{
  int i;
  NspCurve *P = (NspCurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m,x1,y1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < M->m ; i++)
    {
      x1 = R[0]*(*x) -R[1]*(*y);
      y1 = R[1]*(*x) +R[0]*(*y);
      *(x++) =x1;
      *(y++) =y1;
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_curve(NspGraphic *Obj,double *alpha)
{
  int i;
  NspCurve *P = (NspCurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < M->m ; i++)
    {
      *(x++) *= alpha[0];
      *(y++) *= alpha[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of curve
 *
 */

static int nsp_getbounds_curve(NspGraphic *Obj,double *bounds)
{
  NspCurve *P = (NspCurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  if ( M->mn == 0) return FALSE;
  bounds[0]= Mini(x,M->m);
  bounds[1]= Mini(y,M->m);
  bounds[2]= Maxi(x,M->m);
  bounds[3]= Maxi(y,M->m);
  return TRUE;
}

/*  */
extern Gengine GL_gengine;

/* try to partially solve opengl pbs  */



static void nsp_curve_fill(BCG *Xgc,NspCurve *C,NspMatrix *M)
{
#ifdef  WITH_OPENGL
  if ( Xgc->graphic_engine == &GL_gengine )
    /* if we are using OpenGl we need to detect the convex parts */
    {
      nsp_curve_fill_ext(Xgc,C,M);
    }
  else
    {
      nsp_curve_fill_basic(Xgc,C,M);
    }
#else
  nsp_curve_fill_basic(Xgc,C,M);
#endif
}

static void nsp_curve_fill_basic(BCG *Xgc,NspCurve *C,NspMatrix *M)
{
  double *xm=NULL,*ym=NULL;
  int n= M->m+2;
  if (M->m == 0) return ;
  xm = graphic_alloc(0,n,sizeof(double));
  ym = graphic_alloc(1,n,sizeof(double));
  if ( xm == 0 || ym == 0)
    {
      Sciprintf("Error: cannot allocate points for drawing\n");
      return;
    }
  memcpy(xm,M->R,M->m*sizeof(double));
  memcpy(ym,M->R+M->m,M->m*sizeof(double));
  xm[M->m]= M->R[M->m-1];
  ym[M->m]=0.0;
  xm[M->m+1]= M->R[0];
  ym[M->m+1]=0.0;
  if ( C->obj->color >= -1 )
    {
      int c_color=0;
      if ( C->obj->color >= 0 ) c_color= Xgc->graphic_engine->xset_color(Xgc, C->obj->color);
      Xgc->graphic_engine->scale->fillpolyline(Xgc,xm,ym,n,0);
      if ( C->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, c_color);
    }
  Xgc->graphic_engine->scale->drawpolyline(Xgc,xm,ym,n,0);
}

#ifdef  WITH_OPENGL
static void nsp_curve_fill_ext(BCG *Xgc,NspCurve *C,NspMatrix *M)
{
  double xi ;
  int c_color = Xgc->graphic_engine->xget_color(Xgc);
  int start=0;
  if (M->m == 0) return;
  xi=M->R[0];
  while (1)
    {
      start=nsp_curve_fill_part(Xgc,C,M,start,&xi);
      if ( start >= M->m) break;
    }
  if ( C->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, c_color);
}

static int nsp_curve_fill_part(BCG *Xgc,NspCurve *C, NspMatrix *M, int start,double *xi)
{
  int p,P,sign;
  double *xm=NULL,*ym=NULL;
  int n= M->m+2;
  xm = graphic_alloc(0,n,sizeof(double));
  ym = graphic_alloc(1,n,sizeof(double));
  if ( xm == 0 || ym == 0)
    {
      Sciprintf("Error: cannot allocate points for drawing\n");
      return M->m;
    }
  /* first point y=0 */
  p = 0; P = start;
  xm[p]= *xi;
  ym[p]= 0.0;
  p++;
  while (1)
    {
      if ( M->R[P+M->m] != 0.0 ) break;
      P++;
      if ( P >= M->m) return P;
    }
  /* we are at the first non null point */
  sign = (M->R[P+M->m]) >= 0;
  while (1)
    {
      /* accumulate points until sign changes */
      xm[p]= M->R[P];
      ym[p]= M->R[P+M->m];
      if ( ((ym[p]) >= 0) != sign )
	{
	  double alpha = (0- ym[p-1])/(ym[p]-ym[p-1]);
	  *xi = (1-alpha)*xm[p-1] + alpha*xm[p];
	  xm[p]=*xi;
	  ym[p]=0.0;
	  p++;
	  break;
	}
      p++;P++;
      if ( P >= M->m)
	{
	  /* we need a last point */
	  xm[p]= xm[p-1];
	  ym[p]= 0.0;
	  p++;
	  break;
	}
    }
  /* */
  if ( C->obj->color >= -1 )
    {
      int c_color=0;
      if ( C->obj->color >= 0 ) c_color= Xgc->graphic_engine->xset_color(Xgc, C->obj->color);
      Xgc->graphic_engine->scale->fillpolyline(Xgc,xm,ym,p,1);
      if ( C->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, c_color);
    }
  Xgc->graphic_engine->scale->drawpolyline(Xgc,xm,ym,p,0);
  return P;
}

static NspMatrix *nsp_curve_stairs_alloc(NspMatrix *M)
{
  double *xm,*ym;
  int i, n= 2*M->m -1;
  NspMatrix *loc;
  if ((loc = nsp_matrix_create(NVOID,'r',n,2)) == NULLMAT)
    return NULLMAT;
  xm= loc->R; ym= loc->R + loc->m;
  for ( i=0 ; i < M->m -1 ; i++)
    {
      xm[2*i]= M->R[i];
      ym[2*i]= M->R[i+M->m];
      xm[2*i+1]= M->R[i+1];
      ym[2*i+1]= ym[2*i];
    }
  xm[2*(M->m-1)] = M->R[M->m-1];
  ym[2*(M->m-1)] = M->R[M->m-1+M->m];
  return loc;
}
#endif 




static void nsp_curve_stairs_fill(BCG *Xgc,NspCurve *P,NspMatrix *M)
{
#ifdef  WITH_OPENGL
  if ( Xgc->graphic_engine == &GL_gengine )
    /* if we are using OpenGl we need to detect the convex parts */
    {
      NspMatrix *loc;
      if ((loc = nsp_curve_stairs_alloc(M))== NULL) return;
      nsp_curve_fill_ext(Xgc,P,loc);
      nsp_matrix_destroy(loc);
    }
  else
    {
      nsp_curve_stairs_fill_basic(Xgc,P,M);
    }
#else
  nsp_curve_stairs_fill_basic(Xgc,P,M);
#endif
}

static void nsp_curve_stairs_fill_basic(BCG *Xgc,NspCurve *P,NspMatrix *M)
{
  int c_color = Xgc->graphic_engine->xget_color(Xgc);
  double *xm=NULL,*ym=NULL;
  int n= ( P->obj->mode == curve_stairs ) ? 2*M->m -1 : 2*M->m+1 ,i;
  /* stroke color */
  int color= ( P->obj->mode == curve_stairs ) ? P->obj->color : -1;
  xm = graphic_alloc(0,n,sizeof(double));
  ym = graphic_alloc(1,n,sizeof(double));
  if ( xm == 0 || ym == 0)
    {
      Sciprintf("Error: cannot allocate points for drawing\n");
      return;
    }
  for ( i=0 ; i < M->m -1 ; i++)
    {
      xm[2*i]= M->R[i];
      ym[2*i]= M->R[i+M->m];
      xm[2*i+1]= M->R[i+1];
      ym[2*i+1]= ym[2*i];
    }
  xm[2*(M->m-1)] = M->R[M->m-1];
  ym[2*(M->m-1)] = M->R[M->m-1+M->m];
  if ( P->obj->mode == curve_stairs_fill )
    {
      /* fill the stairs */
      xm[2*(M->m)-1]= M->R[M->m-1];
      ym[2*(M->m)-1]= 0.0;
      xm[2*(M->m)]= M->R[0];
      ym[2*(M->m)]=0.0;
      if ( P->obj->color >= -1 )
	{
	  if ( P->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, P->obj->color);
	  Xgc->graphic_engine->scale->fillpolyline(Xgc,xm,ym,n,0);
	  if ( P->obj->color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, c_color);
	}
    }

  if ( color >= -1 )
    {
      if ( color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, color);
      Xgc->graphic_engine->scale->drawpolyline(Xgc,xm,ym,2*M->m-1,0);
      if ( color >= 0 ) Xgc->graphic_engine->xset_color(Xgc, c_color);
    }
  if ( P->obj->mark >= -1 )
    {
      if ( P->obj->mark_color >= 0) Xgc->graphic_engine->xset_color(Xgc, P->obj->mark_color);
      Xgc->graphic_engine->scale->drawpolymark(Xgc,xm,ym,2*M->m-1);
      if ( P->obj->mark_color >= 0) Xgc->graphic_engine->xset_color(Xgc, c_color);
    }
}
