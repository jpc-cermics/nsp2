/* -*- Mode: C -*- */
%%
include-public  Surf

/* inserted at the end of public part of include file */

%%
include-private  Surf

/* inserted in the private part of include file */
static void nsp_draw_surf(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_surf(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_surf(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_surf(BCG *Xgc,NspGraphic *o,double *alpha);
static int nsp_getbounds_surf(BCG *Xgc,NspGraphic *o,double *bounds);

%%
headers
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 

%%
init 

Init portion 

%%
override-type Surf
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_surf;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_surf ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_surf  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_surf  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_surf  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Surf */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_surf kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_surf(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_surf kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_surf(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_surf(BCG *Xgc,NspGraphic *Obj, void *data)
{
  /* 
  char leg[]="X@Y@Z";
  int flag[]={1,2,4};
  double ebox[]={0,1,0,1,0,1};
  double theta = 35, alpha=45;
  NspSurf *P =(NspSurf*) Obj ;
  NspMatrix *x = P->obj->x;
  NspMatrix *y = P->obj->y;
  NspMatrix *z = P->obj->z;
  if ( Obj->obj->hidden == TRUE ) return ;
  / * be sure that object are in canonical form * /
  Mat2double(x);
  Mat2double(y);
  Mat2double(z);
  Mat2int(P->obj->colors);
  
  if ( x->mn == y->mn && x->mn == z->mn && x->mn != 1) 
    { 
      if ( P->obj->colors->mn == P->obj->z->n ) 
	{
	  nsp_plot_fac3d_2(Xgc,x->R,y->R,z->R,P->obj->colors->I,&z->m,&z->n,&theta,&alpha,leg,flag,ebox);
	}
      else if ( P->obj->colors->m == P->obj->z->m &&  P->obj->colors->n == P->obj->z->n ) 
	{
	  nsp_plot_fac3d_3(Xgc,x->R,y->R,z->R,P->obj->colors->I,&z->m,&z->n,&theta,&alpha,leg,flag,ebox);
	}
      else 
	{
	  / * here colors is unused * /
	  if ( P->obj->zcolor == TRUE ) 
	    nsp_plot_fac3d_1(Xgc,x->R,y->R,z->R,P->obj->colors->I,&z->m,&z->n,&theta,&alpha,leg,flag,ebox);
	  else 
	    nsp_plot_fac3d(Xgc,x->R,y->R,z->R,P->obj->colors->I,&z->m,&z->n,&theta,&alpha,leg,flag,ebox);
	}
    } 
  else 
    {
      if ( P->obj->zcolor == TRUE ) 
	nsp_plot3d_1(Xgc,P->obj->x->R,P->obj->y->R,P->obj->z->R,&P->obj->z->m,&P->obj->z->n,
		     &theta,&alpha,leg,flag,ebox);
      else
	nsp_plot3d  (Xgc,P->obj->x->R,P->obj->y->R,P->obj->z->R,&P->obj->z->m,&P->obj->z->n,
		     &theta,&alpha,leg,flag,ebox);
    }
  */
}

static void nsp_translate_surf(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_surf(BCG *Xgc,NspGraphic *Obj,double *R)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_surf(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of surf 
 *
 */

static int nsp_getbounds_surf(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  bounds[0]= bounds[1] = bounds[2]= bounds[3]=0;
  return FALSE;
}

