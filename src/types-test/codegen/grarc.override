/* -*- Mode: C -*- */
%%
include-public GrArc

/* inserted at the end of public part of include file */

%%
include-private GrArc

/* inserted in the private part of include file */

static void nsp_draw_grarc(BCG *Xgc,NspGraphic *Obj, GdkRectangle *rect,void *data);
static void nsp_translate_grarc(NspGraphic *o,const double *tr);
static void nsp_rotate_grarc(NspGraphic *o,double *R);
static void nsp_scale_grarc(NspGraphic *o,double *alpha);
static int nsp_getbounds_grarc(NspGraphic *o,double *bounds);

%%
headers
#include <gdk/gdk.h>
#include <nsp/object.h>
#include <nsp/grarc.h>
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 

%%
init 

Init portion 

%%
override-type GrArc
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grarc;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grarc ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grarc  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grarc  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grarc  ;
  /* next method are defined in NspGraphic and need not be chnaged here for GrArc */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override nsp_extractelts_grarc kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grarc(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grarc kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grarc(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_grarc(BCG *Xgc,NspGraphic *Obj, GdkRectangle *rect,void *data)
{
  double val[6];
  int ccolor=-1,cthick=-1;
  NspGrArc *P = (NspGrArc *) Obj;
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;

  /* check if the block is inside drawing rectangle
   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  ccolor = Xgc->graphic_engine->xget_pattern(Xgc); 
  val[0]= P->obj->x;
  val[1]= P->obj->y;
  val[2]= P->obj->w;
  val[3]= P->obj->h;
  val[4]= P->obj->a1;
  val[5]= P->obj->a2;

  
  if ( P->obj->fill_color != -2 ) 
    {
      /* fill the arc */ 
      if (  P->obj->fill_color != -1) 
	Xgc->graphic_engine->xset_pattern(Xgc,P->obj->fill_color);
      Xgc->graphic_engine->scale->fillarc(Xgc,val);
      if (  P->obj->fill_color != -1) 
	Xgc->graphic_engine->xset_pattern(Xgc,ccolor);
    }
  
  if ( P->obj->color != -2 ) 
    {
      /* draw the arc */ 
      if ( P->obj->color != -1 ) 
	Xgc->graphic_engine->xset_pattern(Xgc,P->obj->color);
      if ( P->obj->thickness != -1 ) 
	{
	  cthick = Xgc->graphic_engine->xget_thickness(Xgc); 
	  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness);
	}
      Xgc->graphic_engine->scale->drawarc(Xgc,val);
      /* reset to default values */
      if ( P->obj->color != -1 ) 
	Xgc->graphic_engine->xset_pattern(Xgc,ccolor);
      if ( P->obj->thickness != -1 ) 
	Xgc->graphic_engine->xset_thickness(Xgc,cthick);
    }
}

static void nsp_translate_grarc(NspGraphic *Obj,const double *tr)
{
  NspGrArc *P = (NspGrArc *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_grarc(NspGraphic *Obj,double *R)
{
  NspGrArc *P = (NspGrArc *) Obj;
  double x1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  x1 = R[0]*(P->obj->x) -R[1]*(P->obj->y);
  P->obj->y = R[1]*(P->obj->x) +R[0]*(P->obj->y);
  P->obj->x = x1;
  /* Il faut aussi changer l'angle */
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_grarc(NspGraphic *Obj,double *alpha)
{
  NspGrArc *P = (NspGrArc *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of grarc 
 *
 */

static int nsp_getbounds_grarc(NspGraphic *Obj,double *bounds)
{
  NspGrArc *P = (NspGrArc *) Obj;
  bounds[0]=P->obj->x;/* xmin */
  bounds[1]=P->obj->y-P->obj->w;/* ymin */
  bounds[2]=P->obj->x+P->obj->w;/* xmax */
  bounds[3]=P->obj->y;/* ymax */
  return TRUE;
}

