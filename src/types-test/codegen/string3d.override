/* -*- Mode: C -*- */
%%
headers
#include "nsp/string3d.h"
#include <nsp/figure.h> 
#include "../graphics/Plo3dObj.h"

extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
extern void nsp_figure_force_redraw( NspFigure *F);
extern void apply_transforms(BCG *Xgc,double Coord[],const double *M, VisionPos pos[],const double lim[], int ncoord);
#ifdef  WITH_GTKGLEXT 
extern Gengine GL_gengine;
#endif 


static void nsp_draw_string3d(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_string3d(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_string3d(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_string3d(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_string3d(BCG *Xgc,NspGraphic *o,double *bounds);

static void nsp_string3d_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim);
static int nsp_string3d_n_faces(BCG *Xgc,NspGraphic *Obj);
static int nsp_check_string3d(NspString3d *P);

static void draw_string3d_ogl(BCG *Xgc,void *Ob);
static void draw_string3d_face(BCG *Xgc,NspGraphic *Ob, int j);

%%
init 

Init portion 

%%
override_type String3d
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_string3d;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_string3d ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_string3d  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_string3d  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_string3d  ;
  ((NspTypeGraphic *) type->surtype)->full_copy = (full_copy_func *) nsp_string3d_full_copy ;
  /* next method are defined in NspGraphic and need not be chnaged here for String3d */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 
  ((NspTypeGraphic *) type->surtype)->zmean = nsp_string3d_zmean;
  ((NspTypeGraphic *) type->surtype)->n_faces = nsp_string3d_n_faces;
%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override_int_create_final 
  /* verbatim in create/load/copy interface  */
  if ( nsp_check_string3d(H)== FAIL) return %(ret)s; 

%%
override_destroy_prelim
  /* verbatim in destroy */
  nsp_matrix_destroy(H->obj->Mcoord_l);

%%
override string3d_attach kwargs
int _wrap_string3d_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  store_graphic_object(Xgc, pl);
  return 0;
}

%%
override-attr Pts 

/* overriden to check dimensions when changing values.
 */

static NspObject *_wrap_string3d_get_obj_Pts(void *self,char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE; 
  ret = ((NspMatrix*) ((NspString3d *) self)->obj->Pts);
  return (NspObject *) ret;
}

static int _wrap_string3d_set_obj_Pts(void *self,NspObject *val)
{
  NspMatrix *M= (NspMatrix *) val ; 
  NspString3d *poly = self ;
  if ( M->rc_type != 'r' || M->n != 2 )
    {
      Scierror("Error: string3d field Pts should be real an mx2 sized\n");
      return FAIL;
    }
  /* before replacing the field we check that dimensions are correct */
  if ( poly->obj->Pts != NULL )
    nsp_matrix_destroy(poly->obj->Pts);
  poly->obj->Pts = (NspMatrix *) val ;
  return OK;
}

%%
override nsp_extractelts_string3d kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_string3d(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_string3d kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_string3d(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_string3d(BCG *Xgc,NspGraphic *Obj, void *data)
{
  int face; 
  if ( Obj->obj->hidden == TRUE ) return ;
  nsp_check_string3d((NspString3d *) Obj);
#ifdef  WITH_GTKGLEXT 
  if ( Xgc->graphic_engine == &GL_gengine ) 
    {
      /* if we are using OpenGl we make a full draw of 
       * object and return 
       */
      draw_string3d_ogl(Xgc,Obj);
      nsp_ogl_set_2dview(Xgc); 
      return; 
    }
#endif 
  if ( data != NULL) 
    {
      face = *((int *) data);
      draw_string3d_face(Xgc,Obj,face);
    }
  else 
    {
      int i;
      /* draw all the faces: this is not really used  
       * since the face order is computed and sequenced in upper object.
       */
      for ( i= 0 ; i < ((NspString3d *) Obj)->obj->Mcoord->n; i++) 
	draw_string3d_face(Xgc,Obj,i);
    }
}

static void nsp_translate_string3d(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_string3d(BCG *Xgc,NspGraphic *Obj,double *R)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_string3d(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of string3d 
 *
 */
extern void nsp_gr_bounds_min_max(int n,double *A,int incr,double *Amin, double *Amax) ;

static void nsp_getbounds_string3d(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  int i;
  /* this should be stored in a cache and recomputed when necessary 
   *
   */
  nsp_string3d *Q= ((NspString3d *) Obj)->obj;
  nsp_check_string3d((NspString3d *) Obj);
  if ( Q->Mcoord->mn == 0) 
    {
      bounds[0]= bounds[1] = bounds[2]= bounds[3]= bounds[4]=bounds[5]= 0;
      return;
    }
  for ( i = 0 ; i < Q->Mcoord->m ; i++) 
    nsp_gr_bounds_min_max(Q->Mcoord->n,Q->Mcoord->R+i,3,&bounds[2*i],&bounds[2*i+1]);
  return;
}

int nsp_check_string3d( NspString3d *P)
{
  nsp_string3d *S = P->obj;
  int S_nb_coords = S->Mcoord->n;

  if ( S->Mcoord->m != 3 || S->Mcoord->n != 1 ) 
    {
      Scierror("Error: bad coord for string3d\n");
      return FAIL;
    }

  /* create extra data for qpos declared int* 
   * Q->pos id only usefull for non opengl driver 
   */
  if ( S->pos == NULL) S->pos = malloc( S_nb_coords * sizeof(VisionPos));
  S->pos_length = S_nb_coords;
  
  /* create extra data for Mcoord_l declared void* */
  if ( S->Mcoord_l == NULL) 
    {
      S->Mcoord_l = nsp_matrix_create("local",'r',S->Mcoord->m, S->Mcoord->n);
    }
  return OK;
}


static void draw_string3d_face(BCG *Xgc,NspGraphic *Ob, int j);
static void draw_justified_string3d(BCG *Xgc,NspGraphic *V, int xj, int yj);
static void draw_justified_string(BCG *Xgc,char *str, double x, double y, int xj, int yj);
static void draw_string3d_ogl(BCG *Xgc,void *Ob);
static void draw_justified_string3d_ogl(BCG *Xgc,void *Obj, int xj, int yj);

static void draw_string3d_face(BCG *Xgc,NspGraphic *Ob, int j)
{
  draw_justified_string3d(Xgc,Ob,CENTER,CENTER);
}

static void draw_justified_string3d(BCG *Xgc,NspGraphic *Obj, int xj, int yj)
{
  double x,y;
  nsp_string3d *V = ((NspString3d *) Obj)->obj;
  double *V_coord = ((NspMatrix *)V->Mcoord_l)->R;
  Xgc->graphic_engine->xset_font(Xgc,V->font_type,V->font_size);
  x = XScale(V_coord[0]);
  y = YScale(V_coord[1]);
  draw_justified_string(Xgc,V->str,x,y, xj, yj);
}

static void draw_justified_string(BCG *Xgc,char *str, double x, double y, int xj, int yj)
{
  int flag=0, rect[4], w, h;
  double angle=0.0; 
  Xgc->graphic_engine->boundingbox(Xgc,str,x,y, rect);
  w = rect[2]; h = rect[3];
  if ( xj == CENTER ) 
    x -= w/2;
  else if ( xj == RIGHT )
    x -= w;
  if ( yj == CENTER )
    y += h/2;
  else if ( yj == DOWN )
    y += h;
  Xgc->graphic_engine->displaystring(Xgc,str,x,y, flag,angle);
}

static void draw_string3d_ogl(BCG *Xgc,void *Ob)
{
  draw_justified_string3d_ogl(Xgc,Ob,CENTER,CENTER);
}

static void draw_justified_string3d_ogl(BCG *Xgc,void *Obj, int xj, int yj)
{
#ifdef  WITH_GTKGLEXT 
  nsp_string3d *S = ((NspString3d *) Obj)->obj;
  const double lim[] ={ 1.e+10,  1.e+10, - 1.e+10};
  /* we move to 2d scale */
  double Tcoord[3];
  double *S_coord = S->Mcoord->R;

  apply_transforms(Xgc,Tcoord,S_coord,S->pos,lim,1); 
  Tcoord[0] = XScale(Tcoord[0]);
  Tcoord[1] = YScale(Tcoord[1]);
  nsp_ogl_set_2dview(Xgc);
  Xgc->graphic_engine->xset_font(Xgc,S->font_type,S->font_size);
  draw_justified_string(Xgc,S->str,Tcoord[0],Tcoord[1], xj, yj);
  nsp_ogl_set_3dview(Xgc);
#endif 
}


static void zmean_faces_for_String3d(void *Obj, double z[], HFstruct HF[], int *n, int k)
{
  int j;
  nsp_string3d *S = ((NspString3d *) Obj)->obj;
  int S_nb_coords = S->Mcoord->n;
  double *S_coord = ((NspMatrix *)S->Mcoord_l)->R;

  for ( j = 0 ; j < S_nb_coords ; j++)
    if (S->pos[j] == VIN)
      {
	z[*n] = S_coord[3*j+2]; 
	HF[*n].num_obj = k; 
	HF[*n].num_in_obj = j;
	(*n)++; 
      }
}


/*
 * requested method for 3d objects.
 */

static void nsp_string3d_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim)
{
  nsp_string3d *Q= ((NspString3d *) Obj)->obj;
  apply_transforms(Xgc,((NspMatrix *) Q->Mcoord_l)->R,Q->Mcoord->R,Q->pos, lim, Q->Mcoord->n);
  zmean_faces_for_String3d(Obj, z,  HF, n, k);
}

/* requested method for 3d objects.
 *
 */

static int nsp_string3d_n_faces(BCG *Xgc,NspGraphic *Obj)
{
  return ((NspString3d *) Obj)->obj->Mcoord->n;
}


