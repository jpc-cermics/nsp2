/* -*- Mode: C -*- */
%%
include-start Segments
/* inserted at the start of include file */
#include <nsp/figure.h>

%%
include-public  Segments

/* inserted at the end of public part of include file */

%%
include-private  Segments

/* inserted in the private part of include file */

static void nsp_draw_segments(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_segments(NspGraphic *o,const double *tr);
static void nsp_rotate_segments(NspGraphic *o,double *R);
static void nsp_scale_segments(NspGraphic *o,double *alpha);
static int nsp_getbounds_segments(NspGraphic *o,double *bounds);

%%
headers

%%
init 

Init portion 

%%
override-type Segments
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_segments;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_segments ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_segments  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_segments  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_segments  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Segments */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_segments kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_segments(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_segments kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_segments(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_segments(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  int color_changed=FALSE,thickness_changed=FALSE;
  int c_thickness,c_color;
  NspSegments *P = (NspSegments *) Obj;
  NspMatrix *nx = P->obj->x;
  NspMatrix *ny = P->obj->y;
  if ( Obj->obj->show == FALSE ) return;

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }
  if ( P->obj->x->mn == 0 )  return;

  c_thickness = Xgc->graphic_engine->xget_pattern(Xgc);
  c_color = Xgc->graphic_engine->xget_pattern(Xgc);
  
  if ( P->obj->color != NULLMAT && P->obj->color->mn != 0 ) 
    {
      int *colors= ( P->obj->color->mn == 1) ? NULL : P->obj->color->I;
      int *thickness= NULL;
      if ( P->obj->color->mn == 1 && P->obj->color->I[0] >= 0) 
	{
	  color_changed=TRUE;
	  Xgc->graphic_engine->xset_pattern(Xgc, P->obj->color->I[0]);
	}
      if ( P->obj->thickness != NULLMAT && P->obj->thickness->mn != 0 ) 
	{
	  thickness =  ( P->obj->thickness->mn == 1) ? NULL : P->obj->thickness->I;
	  if ( P->obj->thickness->mn == 1 &&P->obj->thickness->I[0] >=0 )
	    {
	      thickness_changed = TRUE;
	      Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness->I[0] );
	    }
	}
      Xgc->graphic_engine->scale->drawsegments(Xgc,nx->R,ny->R,nx->mn,colors,thickness);
      /* back to default */
      if ( thickness_changed )  Xgc->graphic_engine->xset_thickness(Xgc, c_thickness);
      if ( color_changed )  Xgc->graphic_engine->xset_pattern(Xgc, c_color);
    }
  else
    {
      int *colors= NULL;
      int *thickness= NULL;
      if ( P->obj->thickness != NULLMAT && P->obj->thickness->mn != 0 ) 
	{
	  thickness =  ( P->obj->thickness->mn == 1) ? NULL : P->obj->thickness->I;
	  if ( P->obj->thickness->mn == 1 && P->obj->thickness->I[0] >=0 )
	    {
	      thickness_changed = TRUE;
	      Xgc->graphic_engine->xset_thickness(Xgc, P->obj->thickness->I[0]);
	    }
	  Xgc->graphic_engine->scale->drawsegments(Xgc,nx->R,ny->R,nx->mn,colors,thickness);
	  
	}
      Xgc->graphic_engine->scale->drawsegments(Xgc,nx->R,ny->R,nx->mn,colors,thickness);
      /* back to default */
      if ( thickness_changed )  Xgc->graphic_engine->xset_thickness(Xgc, c_thickness);
    }
}

static void nsp_translate_segments(NspGraphic *Obj,const double *tr)
{
  int i; 
  NspSegments *P = (NspSegments *) Obj;
  double *x=P->obj->x->R,*y= P->obj->y->R;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++) 
    {
      *(x++) += tr[0];
      *(y++) += tr[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_segments(NspGraphic *Obj,double *R)
{
  int i;
  NspSegments *P = (NspSegments *) Obj;
  double *x= P->obj->x->R,*y= P->obj->y->R,x1,y1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++) 
    {
      x1 = R[0]*(*x) -R[1]*(*y);
      y1 = R[1]*(*x) +R[0]*(*y);
      *(x++) =x1;
      *(y++) =y1;
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_segments(NspGraphic *Obj,double *alpha)
{
  int i;
  NspSegments *P = (NspSegments *) Obj;
  double *x= P->obj->x->R,*y= P->obj->y->R;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++) 
    {
      *(x++) *= alpha[0];
      *(y++) *= alpha[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of segments 
 *
 */

static int nsp_getbounds_segments(NspGraphic *Obj,double *bounds)
{
  int i;
  NspSegments *P = (NspSegments *) Obj;
  double *x= P->obj->x->R,*y= P->obj->y->R,dval;
  if ( P->obj->x->mn == 0) return FALSE;

  bounds[0]=*x;/* xmin */
  bounds[1]=*y;/* ymin */
  bounds[2]=*x;/* xmax */
  bounds[3]=*y;/* ymax */
  for (i = 1; i < P->obj->x->mn; i++)
    {
      dval = x[i];
      if ( dval > bounds[2] )
	bounds[2] = dval;
      else if ( dval < bounds[0] )
	bounds[0] = dval;
      dval = y[i];
      if ( dval > bounds[3] )
	bounds[3] = dval;
      else if ( dval < bounds[1] )
	bounds[1] = dval;
    }
  return TRUE;
}

