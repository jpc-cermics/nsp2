/* -*- Mode: C -*- */
%%
include-start GrRect
/* inserted at the start of include file */
#include <nsp/figure.h>


%%
include-public GrRect

/* inserted at the end of public part of include file */


%%
include-private GrRect

/* inserted in the private part of include file */
static void nsp_draw_grrect(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_grrect(NspGraphic *o,const double *tr);
static void nsp_rotate_grrect(NspGraphic *o,double *R);
static void nsp_scale_grrect(NspGraphic *o,double *alpha);
static int nsp_getbounds_grrect(NspGraphic *o,double *bounds);
static void nsp_draw_grrect_rotate(BCG *Xgc,NspGrRect *R);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h>
#include <nsp/figure.h>

%%
init

Init portion

%%
override-type GrRect
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grrect;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grrect ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grrect  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grrect  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grrect  ;
  /* next method are defined in NspGraphic and need not be changed here for GrRect */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_grrect kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grrect(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grrect kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grrect(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_grrect(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  double val[4];
  int ccolor=-1,cthick=-1;
  NspGrRect *P = (NspGrRect *) Obj;
  if ( ((NspGraphic *) P)->obj->show == FALSE ) return;
  ccolor = Xgc->graphic_engine->xget_color(Xgc);

  if ( ! nsp_graphic_intersect_rectangle(Obj,rect))
    {
      /* Sciprintf("No need to draw one rectangle\n"); */
      return;
    }

  if (  P->obj->angle != 0.0 )
    {
      nsp_draw_grrect_rotate(Xgc,P);
      return;
    }

  val[0]= P->obj->x;
  val[1]= P->obj->y;
  val[2]= P->obj->w;
  val[3]= P->obj->h;

  if ( P->obj->fill_color != -2 )
    {
      if (  P->obj->fill_color != -1)
	Xgc->graphic_engine->xset_color(Xgc,P->obj->fill_color);
      Xgc->graphic_engine->scale->fillrectangle(Xgc,val);
      if (  P->obj->fill_color != -1)
	Xgc->graphic_engine->xset_color(Xgc,ccolor);
    }

  if ( P->obj->color != -2 )
    {
      /* draw the rectangle */
      if ( P->obj->color != -1 )
	Xgc->graphic_engine->xset_color(Xgc,P->obj->color);
      if ( P->obj->thickness != -1 )
	{
	  cthick = Xgc->graphic_engine->xget_thickness(Xgc);
	  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness);
	}
      Xgc->graphic_engine->scale->drawrectangle(Xgc,val);
      /* reset to default values */
      if ( P->obj->color != -1 )
	Xgc->graphic_engine->xset_color(Xgc,ccolor);
      if ( P->obj->thickness != -1 )
	Xgc->graphic_engine->xset_thickness(Xgc,cthick);
    }

  if (((NspGraphic *) P)->obj->hilited == TRUE )
    {
      int lock_size=6, lock_color=10;
      int color = Xgc->graphic_engine->xset_color(Xgc,lock_color);
      int x=lock_size,y=lock_size;
      double xd,yd;
      double rect[4];
      length_scale_i2f(Xgc->scales,&xd,&yd,&x,&y,1);
      rect[0]=val[0] -xd/2.0;
      rect[1]=val[1] +yd/2.0;
      rect[2]=xd;
      rect[3]=yd;
      Xgc->graphic_engine->scale->fillrectangle(Xgc,rect);
      rect[0]=val[0] + val[2]-xd/2.0;
      rect[1]=val[1] - val[3] + yd/2.0;
      Xgc->graphic_engine->scale->fillrectangle(Xgc,rect);
      Xgc->graphic_engine->xset_color(Xgc,color);
    }

}

/* draw rectangle when angle is non null 
 * we have to perform a rotation around the rectangle center
 */

static void nsp_draw_grrect_rotate(BCG *Xgc,NspGrRect *R)
{
  int i;
  double vx[4]={R->obj->x,R->obj->x+R->obj->w,R->obj->x+R->obj->w,R->obj->x};
  double vy[4]={R->obj->y,R->obj->y,R->obj->y-R->obj->h,R->obj->y-R->obj->h};
  double rvx[4],rvy[4],cx=R->obj->x+R->obj->w/2,cy=R->obj->y-R->obj->h/2;
  double cosa = cos(-R->obj->angle*M_PI/180);
  double sina = sin(-R->obj->angle*M_PI/180);
  int ccolor = Xgc->graphic_engine->xget_color(Xgc);
  int cthick=-1;

  for ( i= 0 ; i < 4; i++)
    {
      rvx[i]=cosa*(vx[i]-cx)- sina*(vy[i]-cy)+cx;
      rvy[i]=sina*(vx[i]-cx)+ cosa*(vy[i]-cy)+cy;
    }
  if ( R->obj->fill_color != -2 )
    {
      if (  R->obj->fill_color != -1)
	Xgc->graphic_engine->xset_color(Xgc,R->obj->fill_color);
      Xgc->graphic_engine->scale->fillpolyline(Xgc,rvx,rvy,4,1);
      /* Xgc->graphic_engine->scale->fillrectangle(Xgc,val); */
      if (  R->obj->fill_color != -1)
	Xgc->graphic_engine->xset_color(Xgc,ccolor);
    }

  if ( R->obj->color != -2 )
    {
      /* draw the rectangle */
      if ( R->obj->color != -1 )
	Xgc->graphic_engine->xset_color(Xgc,R->obj->color);
      if ( R->obj->thickness != -1 )
	{
	  cthick = Xgc->graphic_engine->xget_thickness(Xgc);
	  Xgc->graphic_engine->xset_thickness(Xgc,R->obj->thickness);
	}
      Xgc->graphic_engine->scale->drawpolyline(Xgc,rvx,rvy,4,1);
      /* Xgc->graphic_engine->scale->drawrectangle(Xgc,val); */
      /* reset to default values */
      if ( R->obj->color != -1 )
	Xgc->graphic_engine->xset_color(Xgc,ccolor);
      if ( R->obj->thickness != -1 )
	Xgc->graphic_engine->xset_thickness(Xgc,cthick);
    }

  if (((NspGraphic *) R)->obj->hilited == TRUE )
    {
      int lock_size=6, lock_color=10;
      int color = Xgc->graphic_engine->xset_color(Xgc,lock_color);
      int x=lock_size,y=lock_size;
      double xd,yd;
      double rect[4];
      length_scale_i2f(Xgc->scales,&xd,&yd,&x,&y,1);
      rect[0]=rvx[0] -xd/2.0;
      rect[1]=rvy[0] +yd/2.0;
      rect[2]=xd;
      rect[3]=yd;
      Xgc->graphic_engine->scale->fillrectangle(Xgc,rect);
      rect[0]=rvx[2]-xd/2.0;
      rect[1]=rvy[2] + yd/2.0;
      Xgc->graphic_engine->scale->fillrectangle(Xgc,rect);
      Xgc->graphic_engine->xset_color(Xgc,color);
    }

}


static void nsp_translate_grrect(NspGraphic *Obj,const double *tr)
{
  NspGrRect *P = (NspGrRect *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* rotation (R= [sin(a),cos(a)]) with center 0 of the 
 * rectangle. We compute a new position of the top left 
 * corner (x,y) in such a way that the center of the rectangle 
 * is at the position given by the rotation.
 * To draw the rotated rectangle the draw function will have 
 * to perform a rotation centered at the rectangle center.
 */

static void nsp_rotate_grrect(NspGraphic *Obj,double *R)
{
  NspGrRect *P = (NspGrRect *) Obj;
  double x1,y1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  /* rotate the center (x1,y1) gives the center position after rotation */
  x1 = R[0]*(P->obj->x+ P->obj->w/2) -R[1]*(P->obj->y - P->obj->h/2);
  y1 = R[1]*(P->obj->x+ P->obj->w/2) +R[0]*(P->obj->y - P->obj->h/2);
  /* changes x and y in such a way that the rectangle center is at (x1,y1) */
  P->obj->x = x1 - P->obj->w/2;
  P->obj->y = y1 + P->obj->h/2;
  /* set up the angle value */
  P->obj->angle += - atan2(R[1],R[0])*180/M_PI;
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_grrect(NspGraphic *Obj,double *alpha)
{
  NspGrRect *P = (NspGrRect *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of grrect
 *
 */

static int nsp_getbounds_grrect(NspGraphic *Obj,double *bounds)
{
  NspGrRect *P = (NspGrRect *) Obj;
  if (  P->obj->angle == 0.0 )
    {
      bounds[0]=P->obj->x;/* xmin */
      bounds[1]=P->obj->y-P->obj->h;/* ymin */
      bounds[2]=P->obj->x+P->obj->w;/* xmax */
      bounds[3]=P->obj->y;/* ymax */
    }
  else
    {
      int i;
      double vx[4]={P->obj->x,P->obj->x+P->obj->w,P->obj->x+P->obj->w,P->obj->x};
      double vy[4]={P->obj->y,P->obj->y,P->obj->y-P->obj->h,P->obj->y-P->obj->h};
      double rvx[4],rvy[4],cx=P->obj->x+P->obj->w/2,cy=P->obj->y-P->obj->h/2;
      double cosa = cos(-P->obj->angle*M_PI/180);
      double sina = sin(-P->obj->angle*M_PI/180);
      for ( i= 0 ; i < 4; i++)
	{
	  rvx[i]=cosa*(vx[i]-cx)- sina*(vy[i]-cy)+cx;
	  rvy[i]=sina*(vx[i]-cx)+ cosa*(vy[i]-cy)+cy;
	}
      bounds[0]=bounds[2]=rvx[0];
      bounds[1]=bounds[3]=rvy[0];
      for ( i= 0 ; i < 4; i++)
	{
	  if ( rvx[i] < bounds[0]) bounds[0] = rvx[i];
	  if ( rvy[i] < bounds[1]) bounds[1] = rvy[i];
	  if ( rvx[i] > bounds[2]) bounds[2] = rvx[i];
	  if ( rvy[i] > bounds[3]) bounds[3] = rvy[i];
	}
    }
  return TRUE;
}
