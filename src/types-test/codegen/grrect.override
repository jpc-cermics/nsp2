/* -*- Mode: C -*- */
%%
include GrRect

/* inserted at the end of public part of include file */

%%
include_private GrRect

/* inserted in the private part of include file */
static void nsp_draw_grrect(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_grrect(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_grrect(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_grrect(BCG *Xgc,NspGraphic *o,double *alpha);
static int nsp_getbounds_grrect(BCG *Xgc,NspGraphic *o,double *bounds);

%%
headers
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 

%%
init 

Init portion 

%%
override-type GrRect
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grrect;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grrect ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grrect  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grrect  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grrect  ;
  ((NspTypeGraphic *) type->surtype)->full_copy = (full_copy_func *) nsp_grrect_full_copy ;
  /* next method are defined in NspGraphic and need not be changed here for GrRect */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override grrect_attach kwargs
int _wrap_grrect_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  tape_store_graphic_object(Xgc, pl);
  return 0;
}


%%
override nsp_extractelts_grrect kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grrect(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grrect kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grrect(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_grrect(BCG *Xgc,NspGraphic *Obj, void *data)
{
  double val[4];
  int ccolor=-1,cthick=-1;
  NspGrRect *P = (NspGrRect *) Obj;
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;
  ccolor = Xgc->graphic_engine->xget_pattern(Xgc); 
  val[0]= P->obj->x;
  val[1]= P->obj->y;
  val[2]= P->obj->w;
  val[3]= P->obj->h;

  if ( P->obj->fill_color != -2 ) 
    {
      if (  P->obj->fill_color != -1) 
	Xgc->graphic_engine->xset_pattern(Xgc,P->obj->fill_color);
      Xgc->graphic_engine->scale->fillrectangle(Xgc,val);
      if (  P->obj->fill_color != -1) 
	Xgc->graphic_engine->xset_pattern(Xgc,ccolor);
    }

  if ( P->obj->color != -2 ) 
    {
      /* draw the rectangle */ 
      if ( P->obj->color != -1 ) 
	Xgc->graphic_engine->xset_pattern(Xgc,P->obj->color);
      if ( P->obj->thickness != -1 ) 
	{
	  cthick = Xgc->graphic_engine->xget_thickness(Xgc); 
	  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness);
	}
      Xgc->graphic_engine->scale->drawrectangle(Xgc,val);
      /* reset to default values */
      if ( P->obj->color != -1 ) 
	Xgc->graphic_engine->xset_pattern(Xgc,ccolor);
      if ( P->obj->thickness != -1 ) 
	Xgc->graphic_engine->xset_thickness(Xgc,cthick);
    }
}


static void nsp_translate_grrect(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  NspGrRect *P = (NspGrRect *) Obj;
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_rotate_grrect(BCG *Xgc,NspGraphic *Obj,double *R)
{
  NspGrRect *P = (NspGrRect *) Obj;
  double x1;
  x1 = R[0]*(P->obj->x) -R[1]*(P->obj->y);
  P->obj->y = R[1]*(P->obj->x) +R[0]*(P->obj->y);
  P->obj->x = x1;
  /* Il faut aussi changer l'angle */
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_grrect(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  NspGrRect *P = (NspGrRect *) Obj;
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of grrect 
 *
 */

static int nsp_getbounds_grrect(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  NspGrRect *P = (NspGrRect *) Obj;
  bounds[0]=P->obj->x;/* xmin */
  bounds[1]=P->obj->y-P->obj->w;/* ymin */
  bounds[2]=P->obj->x+P->obj->w;/* xmax */
  bounds[3]=P->obj->y;/* ymax */
  return TRUE;
}

