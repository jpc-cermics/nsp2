/* -*- Mode: C -*- */
%%
include-start  Polyline
/* inserted at the start of include file */
#include <nsp/figure.h>

%%
include-public  Polyline
/* inserted at the end of public part of include file */

%%
include-private  Polyline
/* inserted in the private part of include file */
static void nsp_draw_polyline(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_polyline(NspGraphic *o,const double *tr);
static void nsp_rotate_polyline(NspGraphic *o,double *R);
static void nsp_scale_polyline(NspGraphic *o,double *alpha);
static int nsp_getbounds_polyline(NspGraphic *o,double *bounds);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h>
#include <nsp/figure.h>

%%
init

Init portion

%%
override-type Polyline
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_polyline;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_polyline ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_polyline  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_polyline  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_polyline  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Polyline */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override nsp_extractelts_polyline kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_polyline(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_polyline kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_polyline(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
last

/* inserted verbatim at the end */


static void nsp_draw_polyline(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  int xmark[2];
  int cmark=-1,cmarksize=-1,cthick=-1;
  NspPolyline *P = (NspPolyline *) Obj;
  double *xm=NULL,*ym=NULL;

  if (((NspGraphic *) P)->obj->show == FALSE ) return;
  if ( P->obj->x->mn == 0) return ;

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  xm= graphic_alloc(6,P->obj->x->mn,sizeof(double));
  ym= graphic_alloc(7,P->obj->x->mn,sizeof(double));
  if ( xm  ==  0 || ym  ==  0 ) return;
  scale_double_to_pixels(Xgc->scales,P->obj->x->R,P->obj->y->R,xm,ym,P->obj->x->mn);
  /* fill polyline */
  if ( P->obj->fill_color != -2 &&  P->obj->color != -2 )
    {
      int c_color = Xgc->graphic_engine->xget_color(Xgc);
      int stroke_color= (P->obj->color== -1) ? c_color : P->obj->color;
      /* fill + stroke */
      if ( P->obj->fill_color != -1 )
	{
	  Xgc->graphic_engine->xset_color(Xgc,P->obj->fill_color);
	}
      if ( P->obj->thickness != -1 )
	{
	  cthick = Xgc->graphic_engine->xget_thickness(Xgc);
	  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness);
	}
      /* fill and stroke */
      Xgc->graphic_engine->fillpolyline(Xgc,xm,ym,P->obj->x->mn,P->obj->close,stroke_color);
      /* reset color */
      if ( P->obj->fill_color != -1 || P->obj->color != -1 )
	Xgc->graphic_engine->xset_color(Xgc,c_color);
    }
  else
    {
      int c_color=-1;
      if ( P->obj->fill_color != -2 )
	{
	  /* set the fill color */
	  if ( P->obj->fill_color != -1 )
	    {
	      c_color = Xgc->graphic_engine->xset_color(Xgc,P->obj->fill_color);
	    }
	  /* fill */
	  Xgc->graphic_engine->fillpolyline(Xgc,xm,ym,P->obj->x->mn,P->obj->close,-1);
	  /* reset color */
	  if ( P->obj->fill_color != -1 )
	    {
	      Xgc->graphic_engine->xset_color(Xgc,c_color);
	    }
	}
      /* draw polyline */
      if ( P->obj->color != -2 )
	{
	  int c_color=-1;
	  /* we will draw polyline */
	  if ( P->obj->thickness != -1 )
	    {
	      cthick = Xgc->graphic_engine->xget_thickness(Xgc);
	      Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness);
	    }
	  if ( P->obj->color != -1 )
	    {
	      c_color= Xgc->graphic_engine->xset_color(Xgc,P->obj->color);
	    }
	  Xgc->graphic_engine->drawpolyline(Xgc,xm,ym,P->obj->x->mn,P->obj->close);
	  if ( P->obj->thickness != -1 )
	    Xgc->graphic_engine->xset_thickness(Xgc,cthick);
	  if ( P->obj->color != -1 )
	    {
	      Xgc->graphic_engine->xset_color(Xgc,c_color);
	    }
	}
    }
  /* draw polymark */
  if ( P->obj->mark != -2 )
    {
      /* we will draw marks */
      int c_color=-1;
      /* save xgc current values for mark */
      if (( P->obj->mark != -1 ) || ( P->obj->mark_size != -1 )) {
        Xgc->graphic_engine->xget_mark(Xgc,xmark);
        cmark=xmark[0];cmarksize=xmark[1];
      }

      if ( P->obj->mark != -1 ) {
        Xgc->graphic_engine->xset_mark(Xgc, P->obj->mark,xmark[1]);
        Xgc->graphic_engine->xget_mark(Xgc,xmark);
      }

      if ( P->obj->mark_size != -1 )
        Xgc->graphic_engine->xset_mark(Xgc, xmark[0],P->obj->mark_size);

      if ( P->obj->mark_color != -1 ) {
        c_color = Xgc->graphic_engine->xset_color(Xgc,P->obj->mark_color);
      }

      Xgc->graphic_engine->drawpolymark(Xgc,xm,ym,P->obj->x->mn);

      /* restore xgc current values for mark */
      if (( P->obj->mark != -1 ) || ( P->obj->mark_size != -1 )) {
        Xgc->graphic_engine->xset_mark(Xgc,cmark,cmarksize);
      }

      /* restore xgc current value for color */
      if ( P->obj->mark_color != -1 )
        Xgc->graphic_engine->xset_color(Xgc,c_color);
    }

  if (((NspGraphic *) P)->obj->hilited == TRUE )
    {
      int lock_size=6, lock_color=10;
      double loc[4];
      int i,color = Xgc->graphic_engine->xset_color(Xgc,lock_color);
      for ( i=0 ; i < P->obj->x->mn ; i++)
	{
	  loc[0]=xm[i]- lock_size/2; loc[1]=ym[i]-lock_size/2;
	  loc[2]=lock_size; loc[3]=lock_size;
	  Xgc->graphic_engine->fillrectangle(Xgc,loc);
	}
      Xgc->graphic_engine->xset_color(Xgc,color);
    }
}

static void nsp_translate_polyline(NspGraphic *Obj,const double *tr)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  double *x=P->obj->x->R,*y= P->obj->y->R;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++)
    {
      *(x++) += tr[0];
      *(y++) += tr[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_polyline(NspGraphic *Obj,double *R)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  double *x= P->obj->x->R,*y= P->obj->y->R,x1,y1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++)
    {
      x1 = R[0]*(*x) -R[1]*(*y);
      y1 = R[1]*(*x) +R[0]*(*y);
      *(x++) =x1;
      *(y++) =y1;
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_polyline(NspGraphic *Obj,double *alpha)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  double *x= P->obj->x->R,*y= P->obj->y->R;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++)
    {
      *(x++) *= alpha[0];
      *(y++) *= alpha[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of polyline
 *
 */

static int nsp_getbounds_polyline(NspGraphic *Obj,double *bounds)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  double *x, *y ;
  if ( P->obj == NULL || P->obj->x == NULL) return FALSE;
  x = P->obj->x->R;
  y = P->obj->y->R;
  if ( P->obj->x->mn == 0) return FALSE;
  bounds[0]=*x;/* xmin */
  bounds[1]=*y;/* ymin */
  bounds[2]=*x;/* xmax */
  bounds[3]=*y;/* ymax */
  for (i = 1; i < P->obj->x->mn; i++)
    {
      double dval = x[i];
      if ( dval > bounds[2] )
	bounds[2] = dval;
      else if ( dval < bounds[0] )
	bounds[0] = dval;
      dval = y[i];
      if ( dval > bounds[3] )
	bounds[3] = dval;
      else if ( dval < bounds[1] )
	bounds[1] = dval;
    }
  return TRUE;
}
