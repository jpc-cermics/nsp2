/* -*- Mode: C -*- */
%%
headers
#include "nsp/polyline.h"
#include <nsp/figure.h> 
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
static void nsp_draw_polyline(BCG *Xgc,NspGraphic *Obj);
static void nsp_translate_polyline(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_polyline(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_polyline(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_polyline(BCG *Xgc,NspGraphic *o,double *bounds);

extern void nsp_figure_force_redraw( NspFigure *F);

%%
init 

Init portion 

%%
override_type Polyline
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_polyline;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_polyline ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_polyline  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_polyline  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_polyline  ;
  ((NspTypeGraphic *) type->surtype)->full_copy = (full_copy_func *) nsp_polyline_full_copy ;
  /* next method are defined in NspGraphic and need not be chnaged here for Polyline */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override polyline_attach kwargs
int _wrap_polyline_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  store_graphic_object(Xgc, pl);
  return 0;
}

%%
override-attr Pts 

/* overriden to check dimensions when changing values.
 */

static NspObject *_wrap_polyline_get_obj_Pts(void *self,char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE; 
  ret = ((NspMatrix*) ((NspPolyline *) self)->obj->Pts);
  return (NspObject *) ret;
}

static int _wrap_polyline_set_obj_Pts(void *self,NspObject *val)
{
  NspMatrix *M= (NspMatrix *) val ; 
  NspPolyline *poly = self ;
  if ( M->rc_type != 'r' || M->n != 2 )
    {
      Scierror("Error: polyline field Pts should be real an mx2 sized\n");
      return FAIL;
    }
  /* before replacing the field we check that dimensions are correct */
  if ( poly->obj->Pts != NULL )
    nsp_matrix_destroy(poly->obj->Pts);
  poly->obj->Pts = (NspMatrix *) val ;
  return OK;
}

%%
override nsp_extractelts_polyline kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_polyline(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_polyline kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_polyline(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_polyline(BCG *Xgc,NspGraphic *Obj)
{
  NspPolyline *P = (NspPolyline *) Obj;
  NspMatrix *M = P->obj->Pts;
  if ( M->mn != 0 
       && ((NspGraphic *) P)->obj->hidden == FALSE )
    Xgc->graphic_engine->scale->drawpolyline(Xgc,M->R,M->R+M->m,M->m,1);
}

static void nsp_translate_polyline(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  int i; 
  NspPolyline *P = (NspPolyline *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  for ( i=0; i < M->m ; i++) 
    {
      *(x++) += tr[0];
      *(y++) += tr[1];
    }
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_polyline(BCG *Xgc,NspGraphic *Obj,double *R)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m,x1,y1;
  for ( i=0; i < M->m ; i++) 
    {
      x1 = R[0]*(*x) -R[1]*(*y);
      y1 = R[1]*(*x) +R[0]*(*y);
      *(x++) =x1;
      *(y++) =y1;
    }
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_polyline(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  for ( i=0; i < M->m ; i++) 
    {
      *(x++) *= alpha[0];
      *(y++) *= alpha[1];
    }
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of polyline 
 *
 */

static void nsp_getbounds_polyline(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  int i;
  NspPolyline *P = (NspPolyline *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m, dval;
  if (M->mn == 0) 
    {
      bounds[0]= bounds[1] = bounds[2]= bounds[3]=0;
      return;
    }
  bounds[0]=*x;/* xmin */
  bounds[1]=*y;/* ymin */
  bounds[2]=*x;/* xmax */
  bounds[3]=*y;/* ymax */
  for (i = 1; i < M->m; i++)
    {
      dval = x[i];
      if ( dval > bounds[2] )
	bounds[2] = dval;
      else if ( dval < bounds[0] )
	bounds[0] = dval;
      dval = y[i];
      if ( dval > bounds[3] )
	bounds[3] = dval;
      else if ( dval < bounds[1] )
	bounds[1] = dval;
    }
}

