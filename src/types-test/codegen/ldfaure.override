/* -*- Mode: C -*- */
%%
include-start Ldfaure

%%
include-public Ldfaure
/* inserted at the end of public part of include file
 * of ldfaure.h
 */
#include "faure.h"
%%
include-public Ldrevhalton
/* inserted at the end of public part of include file
 * of ldfaure.h
 */
#include "reversehalton.h"
#include "lowdisc_shared.h"

%%
include-public Ldhalton
/* inserted at the end of public part of include file
 * of ldfaure.h
 */
#include "halton.h"

%%
include-public Ldsobol4
/* inserted at the end of public part of include file
 * of ldfaure.h
 */
#include "sobol_i4.h"

%%
include-public Ldsobol8
/* inserted at the end of public part of include file
 * of ldfaure.h
 */
#include "sobol_i8.h"

%%
include-public Ldniederreiter
/* inserted at the end of public part of include file
 * of ldfaure.h
 */
#include "niederreiter.h"

%%
include-private Ldfaure
/* inserted in the private part of include file
 * of ldfaure.h
 */

%%
headers

%%
init 

/ * init code  * /

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-int-create-final  Ldfaure
  /* verbatim in create interface  */
%%
override-destroy-prelim Ldfaure 
  /* verbatim in destroy */

%%
override-intcreate Ldfaure

/* override the default int_create */

int int_ldfaure_create(Stack stack, int rhs, int opt, int lhs)
{
  int dim_num=-1, basis=0, seed=0;
  nsp_option opts[] ={{ "dim",s_int,NULLOBJ,-1},
		      { "seed",s_int,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  NspLdfaure *H;
  CheckStdRhs(0,0);
  if ( get_optional_args(stack,rhs,opt,opts,&dim_num,&seed) == FAIL) 
    return RET_BUG;
  /* want to be sure that type ldfaure is initialized */
  nsp_type_ldfaure = new_type_ldfaure(T_BASE);
  if(( H = nsp_ldfaure_create_void(NVOID,(NspTypeBase *) nsp_type_ldfaure))
     == NULLLDFAURE) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( nsp_ldfaure_create_partial(H) == FAIL) return RET_BUG;
  if ( nsp_ldfaure_check_values(H) == FAIL) return RET_BUG;
  H->seed= seed;
  if ( nsp_faure_start (H, dim_num , basis )== FAIL) return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 

%%
override ldfaure_next kwargs

static int _wrap_ldfaure_next(NspLdfaure *self,Stack stack,int rhs,int opt,int lhs)
{
  int n=1,i;
  NspMatrix *M;
  CheckStdRhs(0,1);
  if ( rhs == 1) 
    {
      if ( GetScalarInt (stack, 1, &n) == FAIL ) return RET_BUG;
      n= Max(n,1);
    }
  if (( M = nsp_matrix_create(NVOID,'r',self->dim,n)) == NULL)
    return RET_BUG;
  for ( i = 0 ; i < n ; i++) 
    {
      if ( nsp_faure (self, &self->seed, M->R + M->m*i)== FAIL) return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(M));
  return 1;
}

%%
override-intcreate Ldrevhalton

/* override the default int_create */

int int_ldrevhalton_create(Stack stack, int rhs, int opt, int lhs)
{
  int dim=-1,  seed=0;
  nsp_option opts[] ={{ "dim",s_int,NULLOBJ,-1},
		      { "seed",s_int,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  NspLdrevhalton *H;
  CheckStdRhs(0,0);
  if ( get_optional_args(stack,rhs,opt,opts,&dim,&seed) == FAIL) 
    return RET_BUG;
  /* want to be sure that type ldrevhalton is initialized */
  nsp_type_ldrevhalton = new_type_ldrevhalton(T_BASE);
  if(( H = nsp_ldrevhalton_create_void(NVOID,(NspTypeBase *) nsp_type_ldrevhalton))
     == NULLLDREVHALTON) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( nsp_ldrevhalton_create_partial(H) == FAIL) return RET_BUG;
  if ( nsp_ldrevhalton_check_values(H) == FAIL) return RET_BUG;
  H->seed= seed;
  if ( nsp_reversehalton_start1(H, dim )== FAIL) return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 


%%
override ldrevhalton_next kwargs

static int _wrap_ldrevhalton_next(NspLdrevhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int n=1,i;
  NspMatrix *M;
  CheckStdRhs(0,1);
  if ( rhs == 1) 
    {
      if ( GetScalarInt (stack, 1, &n) == FAIL ) return RET_BUG;
      n= Max(n,1);
    }
  if (( M = nsp_matrix_create(NVOID,'r',self->dim,n)) == NULL)
    return RET_BUG;
  for ( i = 0 ; i < n ; i++) 
    {
      if ( nsp_reversehalton (self, &self->seed, M->R + M->m*i)== FAIL) return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(M));
  return 1;
}
%%
override-intcreate Ldhalton

/* override the default int_create */

int int_ldhalton_create(Stack stack, int rhs, int opt, int lhs)
{
  int dim=-1,  seed=0;
  nsp_option opts[] ={{ "dim",s_int,NULLOBJ,-1},
		      { "seed",s_int,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  NspLdhalton *H;
  CheckStdRhs(0,0);
  if ( get_optional_args(stack,rhs,opt,opts,&dim,&seed) == FAIL) 
    return RET_BUG;
  /* want to be sure that type ldhalton is initialized */
  nsp_type_ldhalton = new_type_ldhalton(T_BASE);
  if(( H = nsp_ldhalton_create_void(NVOID,(NspTypeBase *) nsp_type_ldhalton))
     == NULLLDHALTON) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( nsp_ldhalton_create_partial(H) == FAIL) return RET_BUG;
  if ( nsp_ldhalton_check_values(H) == FAIL) return RET_BUG;

  if ( nsp_halton_start_def(H, dim )== FAIL) return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 


%%
override ldhalton_next kwargs

static int _wrap_ldhalton_next(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int n=1,i;
  NspMatrix *M;
  CheckStdRhs(0,1);
  if ( rhs == 1) 
    {
      if ( GetScalarInt (stack, 1, &n) == FAIL ) return RET_BUG;
      n= Max(n,1);
    }
  if (( M = nsp_matrix_create(NVOID,'r',self->dim,n)) == NULL)
    return RET_BUG;
  for ( i = 0 ; i < n ; i++) 
    {
      if ( nsp_halton (self, self->step, M->R + M->m*i)== FAIL) return RET_BUG;
      self->step +=1;
    }
  MoveObj(stack,1,NSP_OBJECT(M));
  return 1;
}

%%
override ldhalton_set_leap kwargs

static int _wrap_ldhalton_set_leap(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  int_types T[] = {realmat,t_end};
  NspMatrix *leap;
  if ( GetArgs(stack,rhs,opt,T,&leap) == FAIL) return RET_BUG;
  if ( leap->mn !=  self->dim )
    {
      Scierror("Error: leap should be of size %d\n",self->dim);
      return RET_BUG;
    }
  for (i = 0; i < self->dim; i++)
    {
      self->leap[i] = Max(leap->R[i],1);
    }
  return 0;
}


%%
override ldhalton_get_leap kwargs

static int _wrap_ldhalton_get_leap(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspMatrix *ret;
  if ((ret= nsp_matrix_create(NVOID,'r',1,self->dim))== NULL)
    return RET_BUG;
  for (i = 0; i < self->dim; i++)
    {
      ret->R[i]= self->leap[i];
    }
  MoveObj(stack,1,NSP_OBJECT(ret));
  return 1;
}

%%
override ldhalton_set_base kwargs

static int _wrap_ldhalton_set_base(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  int_types T[] = {realmat,t_end};
  NspMatrix *base;
  if ( GetArgs(stack,rhs,opt,T,&base) == FAIL) return RET_BUG;
  if ( base->mn !=  self->dim )
    {
      Scierror("Error: base should be of size %d\n",self->dim);
      return RET_BUG;
    }
  for (i = 0; i < self->dim; i++)
    {
      if (  base->R[i] == 0 ) 
	{
	  self->base[i]= ld_prime (i + 1);
	}
      else if ( base->R[i] < 0 ) 
	{
	  Scierror("Error: base[%d] should be > 1 or zero\n",i);
	  return RET_BUG;
	}
      else if ( base->R[i] == 1) 
	{
	  Scierror("Error: base[%d] should be > 1 or zero\n",i);
	  return RET_BUG;
	}
      else
	{
	  int p =  ld_prime_ge (base->R[i]);
	  if ( p!= -1 && base->R[i] !=  p) 
	    {
	      Scierror("Error: base[%d]=%d should be prime\n",i,base->R[i]);
	      return RET_BUG;
	    }
	  self->base[i] = base->R[i];
	}
    }
  return 0;
}

%%
override ldhalton_get_base kwargs

static int _wrap_ldhalton_get_base(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspMatrix *ret;
  if ((ret= nsp_matrix_create(NVOID,'r',1,self->dim))== NULL)
    return RET_BUG;
  for (i = 0; i < self->dim; i++)
    {
      ret->R[i]= self->base[i];
    }
  MoveObj(stack,1,NSP_OBJECT(ret));
  return 1;
}

%%
override ldhalton_set_seed kwargs

static int _wrap_ldhalton_set_seed(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  int_types T[] = {realmat,t_end};
  NspMatrix *seed;
  if ( GetArgs(stack,rhs,opt,T,&seed) == FAIL) return RET_BUG;
  if ( seed->mn !=  self->dim )
    {
      Scierror("Error: seed should be of size %d\n",self->dim);
      return RET_BUG;
    }
  for (i = 0; i < self->dim; i++)
    {
      self->seed[i] =Max(seed->R[i],0);
    }
  return 0;
}

%%
override ldhalton_get_seed kwargs

static int _wrap_ldhalton_get_seed(NspLdhalton *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspMatrix *ret;
  if ((ret= nsp_matrix_create(NVOID,'r',1,self->dim))== NULL)
    return RET_BUG;
  for (i = 0; i < self->dim; i++)
    {
      ret->R[i]= self->seed[i];
    }
  MoveObj(stack,1,NSP_OBJECT(ret));
  return 1;
}

%%
override-intcreate Ldsobol4

/* override the default int_create */

int int_ldsobol4_create(Stack stack, int rhs, int opt, int lhs)
{
  int dim=-1,  seed=0;
  nsp_option opts[] ={{ "dim",s_int,NULLOBJ,-1},
		      { "seed",s_int,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  NspLdsobol4 *H;
  CheckStdRhs(0,0);
  if ( get_optional_args(stack,rhs,opt,opts,&dim,&seed) == FAIL) 
    return RET_BUG;
  /* want to be sure that type ldsobol4 is initialized */
  nsp_type_ldsobol4 = new_type_ldsobol4(T_BASE);
  if(( H = nsp_ldsobol4_create_void(NVOID,(NspTypeBase *) nsp_type_ldsobol4))
     == NULLLDSOBOL4) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( nsp_ldsobol4_create_partial(H) == FAIL) return RET_BUG;
  if ( nsp_ldsobol4_check_values(H) == FAIL) return RET_BUG;

  if ( nsp_i4_sobol_start(H, dim )== FAIL) return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 


%%
override ldsobol4_next kwargs

static int _wrap_ldsobol4_next(NspLdsobol4 *self,Stack stack,int rhs,int opt,int lhs)
{
  int n=1,i;
  NspMatrix *M;
  CheckStdRhs(0,1);
  if ( rhs == 1) 
    {
      if ( GetScalarInt (stack, 1, &n) == FAIL ) return RET_BUG;
      n= Max(n,1);
    }
  if (( M = nsp_matrix_create(NVOID,'r',self->dim,n)) == NULL)
    return RET_BUG;
  M->convert = 'f' ;
  for ( i = 0 ; i < n ; i++) 
    {
      if ( nsp_i4_sobol (self, &self->seed, M->F + M->m*i)== FAIL) return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(M));
  return 1;
}
%%
override-intcreate Ldsobol8

/* override the default int_create */

int int_ldsobol8_create(Stack stack, int rhs, int opt, int lhs)
{
  int dim=-1,  seed=0;
  nsp_option opts[] ={{ "dim",s_int,NULLOBJ,-1},
		      { "seed",s_int,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  NspLdsobol8 *H;
  CheckStdRhs(0,0);
  if ( get_optional_args(stack,rhs,opt,opts,&dim,&seed) == FAIL) 
    return RET_BUG;
  /* want to be sure that type ldsobol8 is initialized */
  nsp_type_ldsobol8 = new_type_ldsobol8(T_BASE);
  if(( H = nsp_ldsobol8_create_void(NVOID,(NspTypeBase *) nsp_type_ldsobol8))
     == NULLLDSOBOL8) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( nsp_ldsobol8_create_partial(H) == FAIL) return RET_BUG;
  if ( nsp_ldsobol8_check_values(H) == FAIL) return RET_BUG;

  if ( nsp_i8_sobol_start(H, dim )== FAIL) return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 


%%
override ldsobol8_next kwargs

static int _wrap_ldsobol8_next(NspLdsobol8 *self,Stack stack,int rhs,int opt,int lhs)
{
  int n=1,i;
  NspMatrix *M;
  CheckStdRhs(0,1);
  if ( rhs == 1) 
    {
      if ( GetScalarInt (stack, 1, &n) == FAIL ) return RET_BUG;
      n= Max(n,1);
    }
  if (( M = nsp_matrix_create(NVOID,'r',self->dim,n)) == NULL)
    return RET_BUG;
  for ( i = 0 ; i < n ; i++) 
    {
      if ( nsp_i8_sobol (self, &self->seed, M->R + M->m*i)== FAIL) return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(M));
  return 1;
}

%%
override-intcreate Ldniederreiter

/* override the default int_create */

int int_ldniederreiter_create(Stack stack, int rhs, int opt, int lhs)
{
  int dim=-1, base = 11, skip=0;
  nsp_option opts[] ={{ "dim",s_int,NULLOBJ,-1},
		      { "base",s_int,NULLOBJ,-1},
		      { "skip",s_int,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  NspLdniederreiter *H;
  CheckStdRhs(0,0);
  if ( get_optional_args(stack,rhs,opt,opts,&dim,&base,&skip) == FAIL) 
    return RET_BUG;
  /* want to be sure that type ldniederreiter is initialized */
  nsp_type_ldniederreiter = new_type_ldniederreiter(T_BASE);
  if(( H = nsp_ldniederreiter_create_void(NVOID,(NspTypeBase *) nsp_type_ldniederreiter))
     == NULLLDNIEDERREITER) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( nsp_ldniederreiter_create_partial(H) == FAIL) return RET_BUG;
  if ( nsp_ldniederreiter_check_values(H) == FAIL) return RET_BUG;

  if ( nsp_niederreiter_start(H, dim, base,skip,"gfarit.txt","gfplys.txt" )== FAIL) return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 


%%
override ldniederreiter_next kwargs

static int _wrap_ldniederreiter_next(NspLdniederreiter *self,Stack stack,int rhs,int opt,int lhs)
{
  int n=1,i;
  NspMatrix *M;
  CheckStdRhs(0,1);
  if ( rhs == 1) 
    {
      if ( GetScalarInt (stack, 1, &n) == FAIL ) return RET_BUG;
      n= Max(n,1);
    }
  if (( M = nsp_matrix_create(NVOID,'r',self->dim,n)) == NULL)
    return RET_BUG;
  for ( i = 0 ; i < n ; i++) 
    {
      if ( nsp_niederreiter (self,  M->R + M->m*i)== FAIL) return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(M));
  return 1;
}

