/* -*- Mode: C -*- */
%%
include-start GMatrix1
/* inserted at the start of include file */
#include <nsp/figure.h>


%%
include-public GMatrix1

/* inserted at the end of public part of include file */

extern void PermutOfSort (const int *tab, int *perm);
extern void PaintTriangle (BCG *Xgc,const double *sx,const double *sy,const  double *fxy,
			   const int *zxy, const double *zlevel,const int *fill);

%%
include-private GMatrix1

/* inserted in the private part of include file */

static void nsp_draw_gmatrix1(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_gmatrix1(NspGraphic *o,const double *tr);
static void nsp_rotate_gmatrix1(NspGraphic *o,double *R);
static void nsp_scale_gmatrix1(NspGraphic *o,double *alpha);
static int nsp_getbounds_gmatrix1(NspGraphic *o,double *bounds);
static void nsp_draw_matrix_zmoy(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_draw_matrix_shade(BCG *Xgc,NspGraphic *Obj, void *data);
static void FindIntersection(const double *sx,const double *sy,const double *fxy,
			     double z,int inda, int indb,  int *xint, int *yint);
static void fill_grid_rectangles_gen(BCG *Xgc,const int x[],const int y[],const double z[], int nx, int ny,
				     int remap,const int *colminmax,const double *zminmax, const int *colout);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h>
#include <nsp/figure.h>
#include <nsp/axes.h>

#ifdef  WITH_OPENGL
extern Gengine GL_gengine;
#endif

%%
init

Init portion

%%
override-type GMatrix1
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_gmatrix1;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_gmatrix1 ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_gmatrix1  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_gmatrix1  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_gmatrix1  ;
  /* next method are defined in NspGraphic and need not be chnaged here for GMatrix1 */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_gmatrix1 kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_gmatrix1(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_gmatrix1 kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_gmatrix1(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
last

/* inserted verbatim at the end */

/*
 *  z : is the value of a function on the grid defined by x,y
 *  on each rectangle the average value of z, zmoy, is computed
 *  and the rectangle is painted with a color which depends on
 *  the value of zmoy
 *  the z values, or values from zminmax=[zmin,zmax] if @zminmax is non NULL
 *  are linearly remapped to the min and max values of colors in
 *  the current colormap or to [colormin,colormax] if @colminmax is non NULL.
 *  if remap is set to false @z values are directly casted to color values.
 *  colout can be used to give the colors for z values which are below
 *  zminmax[0] or above zminmax[1] (a zero value is interpreted as no painting).
 */

static void nsp_draw_gmatrix1(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  NspGMatrix1 *P = (NspGMatrix1 *) Obj;

  /* check if the block is inside drawing rectangle
   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  if ( P->obj->shade==TRUE)
    nsp_draw_matrix_shade(Xgc,Obj,data);
  else
    nsp_draw_matrix_zmoy(Xgc,Obj,data);

}


static void nsp_translate_gmatrix1(NspGraphic *Obj,const double *tr)
{
  int i;
  NspGMatrix1 *P = (NspGMatrix1 *) Obj;
  double *x=P->obj->x->R,*y= P->obj->y->R;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++)
    {
      *(x++) += tr[0];
    }
  for ( i=0; i < P->obj->y->mn ; i++)
    {
      *(y++) += tr[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_gmatrix1(NspGraphic *Obj,double *R)
{

}

static void nsp_scale_gmatrix1(NspGraphic *Obj,double *alpha)
{
  int i;
  NspGMatrix1 *P = (NspGMatrix1 *) Obj;
  double *x=P->obj->x->R,*y= P->obj->y->R;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < P->obj->x->mn ; i++)
    {
      *(x++) *= alpha[0];
    }
  for ( i=0; i < P->obj->y->mn ; i++)
    {
      *(y++) *= alpha[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of gmatrix1
 *
 */

static int nsp_getbounds_gmatrix1 (NspGraphic *Obj,double *bounds)
{
  NspGMatrix1 *P = (NspGMatrix1 *) Obj;
  /* get the bound in parent i.e given by wrect : upper-left w,h */
  if ( P->obj->x->mn == 0 || P->obj->y->mn == 0) return FALSE;
  bounds[0]=P->obj->x->R[0]; /* xmin */
  bounds[1]=P->obj->y->R[0]; /* ymin */
  bounds[2]=P->obj->x->R[P->obj->x->mn-1] ;/* xmax */
  bounds[3]=P->obj->y->R[P->obj->y->mn-1];/* ymax */
  return TRUE;
}



static void nsp_draw_matrix_zmoy(BCG *Xgc,NspGraphic *Obj, void *data)
{
  NspGMatrix1 *P = (NspGMatrix1 *) Obj;
  int remap = P->obj->remap;
  int *xm,*ym,  j;
  int  *colminmax = NULL, *colout=NULL;
  double zminmax[2];
  if ( Obj->obj->show == FALSE ) return ;

  if ( P->obj->colminmax->mn == 2 )
    {
      /* colminmax is supposed to be converted to int */
      colminmax =  P->obj->colminmax->I;
    }
  if ( P->obj->colout->mn == 2 )
    {
      /* colout is supposed to be converted to int */
      colout =  P->obj->colout->I;
    }

  if ( P->obj->zminmax->mn == 2 )
    {
      zminmax[0]= P->obj->zminmax->R[0];
      zminmax[1]= P->obj->zminmax->R[1];
    }
  else
    {
      /* it should be better not to compute max/min
       * for each redraw.
       */
      zminmax[0]= Mini(P->obj->data->R,P->obj->data->mn);
      zminmax[1]= Maxi(P->obj->data->R,P->obj->data->mn);
    }

  xm = graphic_alloc(0,P->obj->x->mn,sizeof(int));
  ym = graphic_alloc(1,P->obj->y->mn,sizeof(int));

  if ( xm == 0 || ym == 0)
    {
      Sciprintf("Running out of memory \n");
      return ;
    }
  /* Drawing the curves */
  for ( j =0 ; j < P->obj->x->mn ; j++)	 xm[j]= XScale(Xgc->scales,P->obj->x->R[j]);
  for ( j =0 ; j < P->obj->y->mn ; j++)	 ym[j]= YScale(Xgc->scales,P->obj->y->R[j]);

  fill_grid_rectangles_gen(Xgc,xm,ym,P->obj->data->R,
			   P->obj->data->m,
			   P->obj->data->n,
			   remap,
			   colminmax,
			   zminmax,
			   colout);
}


/**
 * nsp_draw_matrix_shade:
 * @Xgc:
 * @x:
 * @y:
 * @z:
 * @n1:
 * @n2:
 * @strflag:
 * @brect:
 * @aaint:
 * @l1:
 *
 * similar to @nsp_draw_matrix but the we assume that the
 * function is piecewise linear on triangles and we use
 * code similar to code used in nsp_fec to linearly interpolate
 * colors in triangles.
 * The x,y grid is decomposed as follows
 *  ______
 *  | /| /|
 *  |/_|/_|
 *  | /| /|
 *  |/_|/_|
 *
 */

#if 1
/* FIXME */
extern void fillpolyline2D_shade(BCG *Xgc,int *vx, int *vy, int *colors, int n,int closeflag);
extern Gengine GL_gengine;
#endif


static void nsp_draw_matrix_shade(BCG *Xgc,NspGraphic *Obj, void *data)
{
  NspGMatrix1 *P = (NspGMatrix1 *) Obj;
  int remap = P->obj->remap;
  int nx = P->obj->x->mn;
  int ny = P->obj->y->mn;
  int *xm,*ym,i,  j, k;
  double zminmax[2];
  double *func= P->obj->data->R;
  int Nnode= nx*ny;
  int *colminmax = NULL, *colout = NULL;

  if ( Obj->obj->show == FALSE ) return ;


  if ( P->obj->colminmax->mn == 2 )
    {
      colminmax = P->obj->colminmax->I;
    }

  if ( P->obj->colout->mn == 2 )
    {
      /* colout is supposed to be converted to int */
      colout =  P->obj->colout->I;
    }

  if ( P->obj->zminmax->mn == 2 )
    {
      zminmax[0]= P->obj->zminmax->R[0];
      zminmax[1]= P->obj->zminmax->R[1];
    }
  else
    {
      /* it should be better not to compute max/min
       * for each redraw.
       */
      zminmax[0]= Mini(P->obj->data->R,P->obj->data->mn);
      zminmax[1]= Maxi(P->obj->data->R,P->obj->data->mn);
    }

  /* Allocation */
  xm = graphic_alloc(0,Nnode,sizeof(int));
  ym = graphic_alloc(1,Nnode,sizeof(int));
  if ( xm == 0 || ym == 0)
    {
      Sciprintf("Running out of memory \n");
    }

  for ( i = 0 ; i < nx  ; i++ )
    for ( j = 0 ; j < ny  ; j++)
      {
	double xp=P->obj->x->R[i],yp=P->obj->y->R[j];
	scale_f2i(Xgc->scales,&xp,&yp,xm+i+nx*j,ym+i+nx*j,1);
      }

  /* Fec code */
  {
    int nz;
    int whiteid;

    double *zlevel, dz, zmin, zmax, fxy[3], sx[3], sy[3];
    int *zone, *fill, kp, perm[3], zxy[3], color_min;

    /* choice between zmin and zmax given by the user or computed
     * with the min and max z values.
     */

    if ( zminmax == NULL  ) {
      zmin=(double) Mini(func,Nnode);
      zmax=(double) Maxi(func,Nnode);
    }
    else {
      zmin = Min( zminmax[0] , zminmax[1] );
      zmax = Max( zminmax[0] , zminmax[1] );
    };

    whiteid= Xgc->graphic_engine->xget_last(Xgc);
    nz=whiteid;

    /* choice for the colormap (in case of a user 's choice
     * verify the parameter). For the automatic choice I have
     * put colminmax[0]=colominmax[1]=1 in matdes.c
     */

    if ( colminmax == NULL  )  /* automatic choice (see matdes.c) */
      color_min=1;
    else if ( colminmax[0] < 1 || colminmax[1] > nz || colminmax[0] > colminmax[1] ) {
      /* ici on pourrait plutot forcer les choses en imposant 1<= colmin < colmax <= nz */
      Sciprintf("Error: colminmax badly choosen it should be in [0,%d]\n",nz);
      return;
    }
    else {
      color_min = colminmax[0];
      nz = colminmax[1] - colminmax[0] + 1;
    };

    /*
     *  1/ the purpose of the first part is to to compute the "zone" of each point :
     *
     *    - the array zlevel are the boundaries between the differents zones :
     *        zlevel[0] = zmin, zlevel[nz] = zmax
     *     and zlevel[i] = zmin + i*(zmax-zmin)/nz
     *
     *     - if  zlevel[j-1] <= func[i] < zlevel[j]  then zone[i] = j
     *       if func[i] > zmax  then zone[i] = nz+1
     *       if func[i] < zmin  then zone[i] = 0
     *     - the zone j is filled with color fill[j] with
     *       fill[j] = -(j-1 + color_min) if 1 <= j <= nz
     *     - if colout == NULL
     *        fill[0] = color attributed for fill[1]     ---> this behavior may be changed ...
     *        fill[nz+1] = color attributed for fill[nz] --/
     *       else
     *        fill[0]=- colout[0];
     *        fill[1]=- colout[1];
     */

    /* allocations for some arrays ... */

    zone = graphic_alloc(2,Nnode,sizeof(int));
    zlevel = graphic_alloc(3,nz+1,sizeof(double));
    fill  = graphic_alloc(4,nz+2,sizeof(int));
    if ( (zone == NULL) || (zlevel == NULL) || (fill  == NULL))
      {
	Sciprintf("fec: malloc No more Place\n");
	return ;
      }
    /* compute the fill array (fill = - num color) */
    fill[1] = - color_min;
    for ( i = 2 ; i <= nz ; i++ ) fill[i] = fill[i-1] - 1;
    if ( colout == NULL)
      {
	fill[0] =  fill[1] ; fill[nz+1] = fill[nz];
      }
    else
      {
	fill[0] = - Max(colout[0],0) ; fill[nz+1] = - Max(colout[1],0);
      }


    /* finaly compute the zone of each point */

    if (remap == FALSE && colminmax == NULL && P->obj->zminmax->mn != 2 )
      {
	for (i = 0 ; i <= nz ; i++) zlevel[i] = i;
	for ( i = 0 ; i < Nnode ; i++ ) zone[i] = Min(Max(func[i],0),nz+1);
      }
    else
      {
	/* compute the zlevels */
	dz = (zmax - zmin)/nz;
	for (i = 0 ; i < nz ; i++) zlevel[i] = zmin + i*dz;
	zlevel[nz] = zmax;
	for ( i = 0 ; i < Nnode ; i++ ) {
	  if ( func[i] > zmax )
	    zone[i] = nz+1;
	  else if ( func[i] < zmin )
	    zone[i] = 0;
	  else
	    zone[i] = floor( (func[i] - zmin)/dz ) + 1;
	}
      }

    /*
     * 2/ loop on the triangles : each triangle is finally decomposed
     *    into its differents zones (polygons) by the function PaintTriangle
     */

#ifdef  WITH_OPENGL
    /* the opengl version does not work it should be revisited */
    if ( 0 && Xgc->graphic_engine == &GL_gengine )
      {
	for ( i = 0 ; i < nx -1 ; i++ )
	  for ( j = 0 ; j < ny -1 ; j++)
	    {
	      int pos[4],colors[4],xp[4],yp[4];
	      pos[0]=i+nx*j; pos[1]=pos[0]+nx;  pos[2]=pos[0]+nx+1, pos[3]=pos[0]+1;
	      for ( k = 0 ; k < 4 ; k++ )
		{
		  colors[k]= fill[zone[pos[k]]];
		  xp[k]= xm[pos[k]];
		  yp[k]= ym[pos[k]];
		}
	      fillpolyline2D_shade(Xgc,xp,yp,colors,4,1);
	    }
      }
    else
#endif
      {
	for ( i = 0 ; i < nx -1 ; i++ )
	  for ( j = 0 ; j < ny -1 ; j++)
	    {
	      int pos[3],tr;
	      for ( tr = 0 ; tr < 2 ; tr ++ )
		{
		  if ((i +j) % 2 == 0 )
		    {
		      if ( tr == 0 )
			{
			  /*
			   *  ___ upper triangle
			   *  | /
			   *  |/
			   */
			  pos[0]=i+nx*j; pos[1]=pos[0]+nx;  pos[2]=pos[0]+nx+1;
			}
		      else
			{
			  /*
			   *   /|  lower triangle
			   *  /_|
			   */
			  pos[0]=i+nx*j;  pos[1]=pos[0]+1;   pos[2]=pos[0]+nx+1;
			}
		    }
		  else
		    {
		      if ( tr == 0 )
			{
			  /*
			   *  |\    upper triangle
			   *  |_\
			   */
			  pos[0]=i+nx*j; pos[1]=pos[0]+1;  pos[2]=pos[0]+nx;
			}
		      else
			{
			  /*
			   *  ___  lower triangle
			   *  \ |
			   *   \|
			   */
			  pos[0]=i+nx*j+1;  pos[1]=pos[0]+nx;   pos[2]=pos[0]+nx-1;
			}
		    }

		  /* retrieve node numbers and functions values */
		  for ( k = 0 ; k < 3 ; k++ ) zxy[k]= zone[pos[k]];
		  /* get the permutation perm so as zxy[perm] is sorted */
		  PermutOfSort(zxy, perm);
		  /* apply the permutation to get the triangle 's vertices
		   * in increasing zone (zxy[0] <= zxy[1] <= zxy[2])
		   */
		  for ( k = 0 ; k < 3 ; k++ ) {
		    kp = perm[k];
		    zxy[k]= zone[pos[kp]];
		    fxy[k]= func[pos[kp]];
		    sx[k] = xm[pos[kp]];
		    sy[k] = ym[pos[kp]];
		  }
		  /* call the "painting" function */
		  PaintTriangle(Xgc,sx, sy, fxy, zxy, zlevel, fill);
		}
	    }
      }
  }
}




/**
 * PermutOfSort:
 * @tab:
 * @perm:
 *
 * functions used above (Bruno 01/02/2001)
 *
 **/

void PermutOfSort (const int *tab, int *perm)
{
  /*
   * get the permutation perm[3] which sort the array tab[3] in increasing order
   */
  perm[0]=0; perm[1] = 1; perm[2] = 2;
  if ( tab[1] < tab[0] ) {
    perm[1]=0 ; perm[0] = 1;
  };
  if ( tab[2] < tab[perm[1]] ) {   /* sort not finish */
    if ( tab[2] < tab[perm[0]] ) {
      perm[2] = perm[1]; perm[1] = perm[0]; perm[0] = 2;
    }
    else {
      perm[2] = perm[1] ; perm[1] = 2;
    };
  };
}


/**
 * PaintTriangle:
 * @Xgc:
 * @sx:
 * @sy: vertices coordinates of a triangle (Pi=(sx[i],sy[i]) i=0,1,2)
 * @fxy: fxy[i], (i=0,1,2) value of an affine function on the vertex Pi
 * @zxy: zone of Pi : zxy[i]=j if  zlevel[j-1] <= fxy[i] < zlevel[j]
 * @zlevel: a (0..nz) vector given the boundaries for color filling
 * @fill: fill[j] is the color pattern associated with zone[j] when fill[j]=0 the
 * zone is not painted.
 *
 * decomposes the triangle into its different zones (which gives polygones) and
 * send them to the graphic driver. This is something like the shade function
 * (see Plo3d.c) but a little different as in shade a color is directly
 * associated with each vertex.
 *
 * Note that zxy is increasing when entering this function.
 **/

void PaintTriangle (BCG *Xgc,const double *sx,const double *sy,const  double *fxy,
		    const int *zxy, const double *zlevel,const int *fill)
{
  int nb0, edge, izone, color, c_color, nr;
  int xEdge2, yEdge2, xEdge, yEdge;
  double resx[5],resy[5];
  /*
   * case of only one color for the triangle :
   */

  c_color = Xgc->graphic_engine->xget_color(Xgc);

  if ( zxy[0] == zxy[2] ) {
    resx[0]=inint(sx[0]); resx[1]=inint(sx[1]);  resx[2]=inint(sx[2]);
    resy[0]=inint(sy[0]); resy[1]=inint(sy[1]);  resy[2]=inint(sy[2]);
    color = fill[zxy[0]]; nr = 3;
    if ( color != 0 )
      {
	Xgc->graphic_engine->xset_color(Xgc,Abs(color));
	Xgc->graphic_engine->fillpolyline(Xgc,resx,resy,nr,1,-1);
      }
    Xgc->graphic_engine->xset_color(Xgc,c_color);
    return;
  }

  /*
   *  at least 2 colors for painting the triangle : it is divided in elementary
   *  polygons. The number of polygons is npolys = zxy[2]-zxy[0]+1.
   *
   *  P2           as zxy[0] <= zxy[1] <  zxy[2] or
   *  Notations/Hints :       /\           zxy[0] <  zxy[1] <= zxy[2]
   *                  edge2  /  \ edge1    from a previus sort. All the polygons
   *                        /    \         have 2 points on edge2, the others points
   *                       /______\        are on edge0 and/or edge1. I name the 2 ends
   *                     P0        P1      points on each poly PEdge2 and Pedge, they are
   *                         edge0         the 2 first points of the next poly. I start
   *  from P0 to form the first poly (a triangle or
   *  a 4 sides depending if zxy[0]=zxy[1]), then the 2, 3, .., npolys - 1 (if they exist)
   *  and finally the last one which comprise the P2 vertex.  In some special cases
   *  we can have a degenerate poly but it doesn't matter !
   */

  nb0 = zxy[1]-zxy[0]; /* number of intersection points on edge 0 */

  /*
   *    compute the first poly
   */

  resx[0]=inint(sx[0]); resy[0]=inint(sy[0]); nr = 1; edge = 0;
  if ( nb0 == 0 ) {    /* the intersection point is on Edge1 but the next point
                          of the poly is P1 */
    resx[1]=inint(sx[1]); resy[1]=inint(sy[1]); nr++;
    edge = 1;          /* the next intersection points will be on edge1 */
  } else nb0--;
  /* the intersection point on edge (0 or 1) : */
  FindIntersection(sx, sy, fxy, zlevel[zxy[0]], edge, edge+1, &xEdge, &yEdge);
  resx[nr]=xEdge; resy[nr]=yEdge; nr++;
  /* the last point of the first poly (edge 2) : */
  FindIntersection(sx, sy, fxy, zlevel[zxy[0]], 0, 2, &xEdge2, &yEdge2);
  resx[nr]=xEdge2; resy[nr]=yEdge2; nr++;
  color = fill[zxy[0]];
  if ( color != 0 )
    {
      Xgc->graphic_engine->xset_color(Xgc,Abs(color));
      Xgc->graphic_engine->fillpolyline(Xgc,resx,resy,nr,1,-1);
    }

  /*
   *  compute the intermediary polygon(s)
   */

  for ( izone = zxy[0]+1 ; izone < zxy[2] ; izone++ )
    {
      resx[0] = xEdge2; resy[0] = yEdge2;          /* the 2 first points are known */
      resx[1] = xEdge;  resy[1] = yEdge; nr = 2;
      if ( edge == 0 )
	{
	  /* the intersection point is perhaps on edge 0 */
	  if (nb0 == 0 )
	    {
	      /* no it is on edge 1 but the next point of the poly is P1 */
	      resx[2]=inint(sx[1]); resy[2]=inint(sy[1]); nr++;
	      edge = 1;          /* the next intersection points will be on edge1 */
	    }
	  else
	    {
	      nb0--;
	    }
	}
      /* the intersection point on edge (0 or 1) : */
      FindIntersection(sx, sy, fxy, zlevel[izone], edge, edge+1, &xEdge, &yEdge);
      resx[nr]=xEdge; resy[nr]=yEdge; nr++;
      /* the last point of the first poly (edge 2) : */
      FindIntersection(sx, sy, fxy, zlevel[izone], 0, 2, &xEdge2, &yEdge2);
      resx[nr]=xEdge2; resy[nr]=yEdge2; nr++;
      color = fill[izone];
      if ( color != 0 )
	{
	  Xgc->graphic_engine->xset_color(Xgc,Abs(color));
	  Xgc->graphic_engine->fillpolyline(Xgc,resx,resy,nr,1,-1);
	}
      /*
       * this function could be used to draw levels as we can test here.
       */
      if (0 && color != 0 )
	{
	  color = -  fill[izone];
	  Xgc->graphic_engine->xset_color(Xgc,Abs(color));
	  Xgc->graphic_engine->drawpolyline(Xgc,resx,resy,nr,1);
	}
    }

  /*
   *  compute the last poly
   */

  resx[0] = xEdge2; resy[0] = yEdge2;         /* the 2 first points are known */
  resx[1] = xEdge;  resy[1] = yEdge; nr = 2;
  if ( edge == 0 )
    {
      /* the next point of the poly is P1 */
      resx[2]=inint(sx[1]); resy[2]=inint(sy[1]); nr++;
    }

  /* the last point is P2 */
  resx[nr] = inint(sx[2]); resy[nr] = inint(sy[2]); nr++;
  color = fill[zxy[2]];
  if ( color != 0 )
    {
      Xgc->graphic_engine->xset_color(Xgc,Abs(color));
      Xgc->graphic_engine->fillpolyline(Xgc,resx,resy,nr,1,-1);
    }
  Xgc->graphic_engine->xset_color(Xgc,c_color);
}


static void FindIntersection(const double *sx,const double *sy,const double *fxy,double z,
			     int inda, int indb,  int *xint, int *yint)
{
  double alpha =  (z - fxy[inda])/(fxy[indb] - fxy[inda]);
  *xint = inint((1 - alpha)*sx[inda] + alpha*sx[indb]);
  *yint = inint((1 - alpha)*sy[inda] + alpha*sy[indb]);
}


/**
 * DrawTriangle:
 *
 * very similar to PaintTriangle but the polygons are not filled
 * but partially painted.
 **/

void DrawTriangle (BCG *Xgc,const double *sx,const double *sy,const  double *fxy,
		    const int *zxy, const double *zlevel,const int *fill)
{
  int nb0, edge, izone, color, c_color;
  int nr, resx[5],resy[5];
  int xEdge2, yEdge2, xEdge, yEdge;

  /*
   * case of only one color for the triangle :
   */

  c_color = Xgc->graphic_engine->xget_color(Xgc);

  if ( zxy[0] == zxy[2] ) return;

  /*
   *  at least 2 colors for painting the triangle : it is divided in elementary
   *  polygons. The number of polygons is npolys = zxy[2]-zxy[0]+1.
   *
   *  P2           as zxy[0] <= zxy[1] <  zxy[2] or
   *  Notations/Hints :       /\           zxy[0] <  zxy[1] <= zxy[2]
   *                  edge2  /  \ edge1    from a previous sort. All the polygons
   *                        /    \         have 2 points on edge2, the others points
   *                       /______\        are on edge0 and/or edge1. I name the 2 ends
   *                     P0        P1      points on each poly PEdge2 and Pedge, they are
   *                         edge0         the 2 first points of the next poly. I start
   *  from P0 to form the first poly (a triangle or
   *  a 4 sides depending if zxy[0]=zxy[1]), then the 2, 3, .., npolys - 1 (if they exist)
   *  and finally the last one which comprise the P2 vertex.  In some special cases
   *  we can have a degenerate poly but it doesn't matter !
   */

  nb0 = zxy[1]-zxy[0]; /* number of intersection points on edge 0 */

  /*
   *    compute the first poly
   */

  resx[0]=inint(sx[0]); resy[0]=inint(sy[0]); nr = 1; edge = 0;
  if ( nb0 == 0 ) {    /* the intersection point is on Edge1 but the next point
                          of the poly is P1 */
    resx[1]=inint(sx[1]); resy[1]=inint(sy[1]); nr++;
    edge = 1;          /* the next intersection points will be on edge1 */
  } else nb0--;
  /* the intersection point on edge (0 or 1) : */
  FindIntersection(sx, sy, fxy, zlevel[zxy[0]], edge, edge+1, &xEdge, &yEdge);
  resx[nr]=xEdge; resy[nr]=yEdge; nr++;
  /* the last point of the first poly (edge 2) : */
  FindIntersection(sx, sy, fxy, zlevel[zxy[0]], 0, 2, &xEdge2, &yEdge2);
  resx[nr]=xEdge2; resy[nr]=yEdge2; nr++;
  color = fill[zxy[0]];
  if ( color != 0 )
    {
      Xgc->graphic_engine->xset_color(Xgc,Abs(color));
      Xgc->graphic_engine->drawline(Xgc,resx[nr-2],resy[nr-2],resx[nr-1],resy[nr-1]);
    }

  /*
   *  compute the intermediary polygon(s)
   */

  for ( izone = zxy[0]+1 ; izone < zxy[2] ; izone++ )
    {
      resx[0] = xEdge2; resy[0] = yEdge2;          /* the 2 first points are known */
      resx[1] = xEdge;  resy[1] = yEdge; nr = 2;
      if ( edge == 0 )
	{
	  /* the intersection point is perhaps on edge 0 */
	  if (nb0 == 0 )
	    {
	      /* no it is on edge 1 but the next point of the poly is P1 */
	      resx[2]=inint(sx[1]); resy[2]=inint(sy[1]); nr++;
	      edge = 1;          /* the next intersection points will be on edge1 */
	    }
	  else
	    {
	      nb0--;
	    }
	}
      /* the intersection point on edge (0 or 1) : */
      FindIntersection(sx, sy, fxy, zlevel[izone], edge, edge+1, &xEdge, &yEdge);
      resx[nr]=xEdge; resy[nr]=yEdge; nr++;
      /* the last point of the first poly (edge 2) : */
      FindIntersection(sx, sy, fxy, zlevel[izone], 0, 2, &xEdge2, &yEdge2);
      resx[nr]=xEdge2; resy[nr]=yEdge2; nr++;
      color = fill[izone];
      if ( color != 0 )
	{
	  Xgc->graphic_engine->xset_color(Xgc,Abs(color));
	  Xgc->graphic_engine->drawline(Xgc,resx[2],resy[2],resx[3],resy[3]);
	}
    }

  Xgc->graphic_engine->xset_color(Xgc,c_color);
}


/**
 * fill_grid_rectangles_gen:
 * @Xgc:
 * @x:
 * @y:
 * @z:
 * @nx:
 * @ny:
 *
 * A generic function for drawing a set of rectangles
 * which is accelerated on Gtk driver (see periGtk.c)
 *
 *  x : of size nx gives the x-values of the grid
 *  y : of size ny gives the y-values of the grid
 *  z : of size (nx)*(ny).
 *  the rectangle ( x[i],y[j], x[i+1],y[j+1])
 *  the average value of z is computed on each corner of the rectangle
 *  defined by ( x[i],y[j], x[i+1],y[j+1]). Then this value is
 *  converted to a colorvalue using the current colormap.
 *
 **/

static void fill_grid_rectangles_gen(BCG *Xgc,const int x[],const int y[],const double z[], int nx, int ny,
				     int remap,const int *colminmax,const double *zminmax, const int *colout)
{
  int colmin,colmax;
  double zmax,zmin,coeff,zmoy;
  int i,j,color,cpat,xz[2];

  nsp_remap_colors(Xgc,remap,&colmin,&colmax,&zmin,&zmax,&coeff,colminmax,zminmax,z,nx*ny);
  cpat = Xgc->graphic_engine->xget_color(Xgc);
  Xgc->graphic_engine->xget_windowdim(Xgc,xz,xz+1);
  for (i = 0 ; i < (nx)-1 ; i++)
    for (j = 0 ; j < (ny)-1 ; j++)
      {
	int w,h;
	zmoy=1/4.0*(z[i+nx*j]+z[i+nx*(j+1)]+z[i+1+nx*j]+z[i+1+nx*(j+1)]);
	color = (remap == FALSE) ? rint(zmoy) : rint((colmax-colmin)*(zmoy - zmin)*coeff + colmin);
	if (color < colmin || color > colmax )
	  {
	    if ( colout == NULL) continue;
	    color = ( color < colmin ) ? colout[0] : colout[1];
	    if ( color <= 0 ) continue;
	  }
	Xgc->graphic_engine->xset_color(Xgc,color);
        w=Abs(x[i+1]-x[i]);h=Abs(y[j+1]-y[j]);
	/* We don't trace rectangle which are totally out **/
	if ( w != 0 && h != 0 && x[i] < xz[0] && y[j+1] < xz[1] && x[i]+w > 0 && y[j+1]+h > 0 )
	  {
	    if ( Abs(x[i]) < int16max && Abs(y[j+1]) < int16max && w < uns16max && h < uns16max)
	      {
		double rect[]={x[i],y[j+1],w,h};
		Xgc->graphic_engine->fillrectangle(Xgc,rect);
	      }
	    else
	      {
		/* fprintf(stderr,"Rectangle too large \n"); */
	      }
	  }
      }
  Xgc->graphic_engine->xset_color(Xgc,cpat);
}

/*
 */

void nsp_remap_colors(BCG *Xgc,int remap,int *colmin,int *colmax,double *zmin,
		      double *zmax,double *coeff,
		      const int *colminmax,const double *zminmax,const double z[],int zn)
{
  *colmin=1;
  *colmax=Xgc->graphic_engine->xget_last(Xgc);
  if ( remap == TRUE)
    {
      if ( colminmax != NULL)
	{
	  *colmax = Min(*colmax,colminmax[1]);
	  *colmin = Max(*colmin,colminmax[0]);
	}
      if ( zminmax == NULL)
	{
	  *zmin = Mini(z,zn);
	  *zmax = Maxi(z,zn);
	  *coeff = ( *zmin == *zmax ) ? 1.0: 1.0/(*zmax-*zmin);
	}
      else
	{
	  *zmin = zminmax[0];
	  *zmax = zminmax[1];
	  *coeff = ( *zmin == *zmax ) ? 1.0: 1.0/(*zmax-*zmin);
	}
    }
}

