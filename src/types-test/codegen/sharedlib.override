/* -*- Mode: C -*- */
%%
include-start Sharedlib 
/* inserted at the start of include file */

%%
include-public Sharedlib
/* inserted at the end of public part of include file */
extern int  nsp_insert_shared_library( void *shd,unsigned int id, const  char *path);
extern NspSharedlib * nsp_find_shared_library( int id);

%%
include-private Sharedlib
/* inserted in the private part of include file */

%%
headers
/* headers in C-file */

%%
init 

Init portion 

%%
override-type Sharedlib
  /* inserted verbatim in the type definition */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
last
/* inserted verbatim at the end */

static NspHash *SharedLibs = NULL;

static int nsp_init_shared_library_table(void)
{
  if ( SharedLibs != NULL ) return OK;
  if (( SharedLibs = nsp_hash_create("sharedlibs",256)) == NULL) 
    {
      return FAIL;
    }
  return OK;
}

int  nsp_insert_shared_library( void *shd,unsigned int id, const  char *path)
{
  NspSharedlib *sh = NULL;
  char name[9]; /* size int +1 */
  char *path_c = NULL;
  snprintf(name,9, "%x", id );

  if ( SharedLibs == NULL ) 
    {
      if ( nsp_init_shared_library_table() == FAIL) return FAIL;
    }
  if (( path_c = nsp_string_copy(path)) == NULL) return FAIL;
  if ((sh = nsp_sharedlib_create(name,shd,id,path_c, NULL))== NULL) 
    {
      nsp_string_destroy(&path_c);
      return FAIL;
    }
  if ( nsp_hash_enter(SharedLibs,NSP_OBJECT(sh)) == FAIL ) 
    {
      nsp_sharedlib_destroy(sh);
      return FAIL;
    }
  return OK;
}

NspSharedlib *nsp_find_shared_library( int id) 
{
  NspObject *Obj;
  char name[9]; /* size int +1 */
  snprintf(name,9, "%x", id );
  if ( SharedLibs == NULL ) return NULL;
  if ( nsp_hash_find(SharedLibs,name,&Obj) == FAIL) 
    return NULL;
  return ( NspSharedlib *) Obj;
}

