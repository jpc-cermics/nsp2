/* -*- Mode: C -*- */
%%
include-start Bvar
/* inserted at the start of include file of bvar class */

%%
include-public Bvar
/* inserted at the end of public part of class include file */
extern NspBvar *nsp_bvar(NspObject *Obj,int flag);

%%
include-private Bvar
/* inserted in the private part of include file of bvar class */
static NspObject *nsp_bvar_loop(char *str, NspObject *O, NspObject *O1, int i, int *rep);
static int nsp_bvar_is_true(void *Obj);

%%
headers
#include <nsp/objects.h>
#include <nsp/plist.h> 
#include <nsp/plistc.h> 
#include <nsp/parse.h>

%%
init 

/ * init code  * /

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-type Bvar
  /* inserted verbatim in the type definition */
  top->is_true = (is_true_func  *) nsp_bvar_is_true; 

%%
override-int-create-final Bvar
/* verbatim in create/load/full_copy interface use %(ret)s for returned value */
%%
override-destroy-prelim  Bvar
/* verbatim in destroy */

%%
override Bvar.bvar_get_value kwargs
/* override a method */
static int _wrap_bvar_get_value(NspBvar *self, Stack stack, int rhs, int opt, int lhs)
{
  CheckRhs(0,0);
  CheckLhs(0,1); 
  MoveObj(stack,1, self->value);
  return Max(lhs,1);
}

%%
override Bvar.bvar_set_value kwargs
/* override a method */
static int _wrap_bvar_set_value(NspBvar *self, Stack stack, int rhs, int opt, int lhs)
{
  NspObject *Obj;
  CheckRhs(1,1);
  CheckLhs(0,1); 
  if ((Obj = nsp_object_copy_and_name("ud",NthObj(1))) == NULLOBJ) 
    return RET_BUG;
  if ( self->value != NULL )
    {
      nsp_object_destroy(&self->value);
    }
  self->value = Obj;
  return 0;
}

%%
override Bvar.bvar_get_varname kwargs

static int _wrap_bvar_get_varname(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  if ( nsp_move_string(stack,1,self->varname,-1) ==FAIL)   return RET_BUG;
  return 1;
}

%%
override Bvar.bvar_set_varname kwargs

static int _wrap_bvar_set_varname(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  char *str;
  if ((str = GetString(stack,1)) == (char*)0) return RET_BUG;
  if ((str = nsp_string_copy(str)) ==NULL) return RET_BUG;
  free(self->varname);
  self->varname=str;
  return 0;
}

%%
override Bvar.bvar_is_symbolic kwargs

static int _wrap_bvar_is_symbolic(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  if ( nsp_move_boolean(stack,1,(self->sym == TRUE))==FAIL) return RET_BUG;
  return 1;
}

%%
override Bvar.bvar_set_symbolic kwargs

static int _wrap_bvar_set_symbolic(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {s_bool,t_end};
  int status;
  if ( GetArgs(stack,rhs,opt,T,&status) == FAIL) return RET_BUG;
  self->sym = status;
  return 0;
}


%%
override-path-extract Bvar 
top->path_extract = (path_func *) NULL; /* path extract as for matrix type */

%%
override-loop Bvar 
top->loop = (loop_func *) nsp_bvar_loop; /* loop with bvar type */

%%
override-info Bvar 
/*
 * info overriden 
 */

int nsp_bvar_info(NspBvar *M, int indent,const char *name, int rec_level)
{
  return nsp_bvar_print(M,indent,name,rec_level);
}

%%
override-size Bvar 

/*
 * size can be overriden here
 */

static int nsp_bvar_size(NspBvar *Mat, int flag)
{
  /* redirect the size value to Mat->value */
  if ( Mat->value == NULL) 
    return 0;
  else
    return nsp_object_get_size(Mat->value,flag);
}

%%
override-print Bvar 
/*
 * print overriden 
 */

int nsp_bvar_print(NspBvar *M, int indent,const char *name, int rec_level)
{
  const char *pname = (name != NULL) ? name : NSP_OBJECT(M)->name;
  if (user_pref.pr_as_read_syntax)
    {
      if ( strcmp(pname,NVOID) != 0) 
	{
	  nsp_object_print(M->value,indent,"_val",rec_level);
	  Sciprintf1(indent,"%s=bvar(sym=%s,varname=\"%s\",value=_val);",pname,
		     (M->sym == TRUE) ? "%t" : "%f");
	}
      else 
	{
	  nsp_object_print(M->value,indent,"_val",rec_level);
	  Sciprintf1(indent,"%s=bvar(sym=%s,varname=\"%s\",value=_val);",pname,
		     (M->sym == TRUE) ? "%t" : "%f");
	}
    }
  else 
    {
      Sciprintf1(indent,"%s\t= \"%s\",%s,%s\n",pname,M->varname, (M->sym == TRUE ) ? "%t" : "%f",
		 nsp_object_type_as_string(M->value));
    }
  return TRUE;
}


%%
override-equal Bvar

/*
 * A == B 
 */

static int nsp_bvar_eq(NspBvar *A, NspObject *B)
{
  NspBvar *loc = (NspBvar *) B;
  if ( check_cast(B,nsp_type_bvar_id) == FALSE) return FALSE ;
  if ( A->value == NULL && loc->value == NULL) return TRUE;
  if ( A->value != NULL && loc->value != NULL) 
    {
      if ( NSP_OBJECT(A->value)->type->eq(A->value,loc->value) == FALSE ) return FALSE;
    }
  else
    {
      return FALSE;
    }
  return TRUE;
}

/*
 * A != B 
 */

static int nsp_bvar_neq(NspBvar *A, NspObject *B)
{
  return ( nsp_bvar_eq(A,B) == TRUE ) ? FALSE : TRUE;
}


%%
last 

NspBvar *nsp_bvar(NspObject *Obj,int sym)
{
  NspObject *O1;
  NspBvar *H;
  /* want to be sure that type bvar is initialized */
  nsp_type_bvar = new_type_bvar(T_BASE);
  if(( H = nsp_bvar_create_void(NVOID,(NspTypeBase *) nsp_type_bvar)) == NULLBVAR) return NULL;
  if ((O1 = nsp_object_copy_and_name("ud",Obj)) == NULLOBJ) 
    {
      nsp_bvar_destroy(H);
      return NULL;
    }
  if ( H->value != NULL )
    {
      nsp_object_destroy(&H->value);
    }
  H->value = O1;
  H->sym = sym;
  return H;
}


/* loop extraction for bvar variable 
 * @str: name to give to created object 
 * @O: a #NspObject pointer to use to store extracted column or a NULL pointer 
 * @O1: a #NspObject from which we must extract columns
 * @i: undice of the column to be extracted 
 * @rep: returned error value.
 */

static NspObject *nsp_bvar_loop(char *str, NspObject *O, NspObject *O1, int i, int *rep)
{
  NspBvar *b = (NspBvar *) O1;
  if (b->sym == TRUE)
    {
      Scierror("Error: loop cannot work for symbolic values\n");
      return NULLOBJ;
    }
  if ( O != NULL) 
    {
      b->value->type->loop(str,((NspBvar *) O)->value,b->value,i,rep);
      if ((*rep == RET_ENDFOR))
	return NULLOBJ;
      else
	return O;
    }
  else
    {
      char *str1;
      NspObject *Res1;
      NspObject *Res= b->value->type->loop(str,O,b->value,i,rep);
      Res1 = (NspObject *) nsp_bvar(Res,FALSE);
      if ((str1 = nsp_string_copy(str)) ==NULL) return NULLOBJ;
      free(((NspBvar *) Res1)->varname);
      ((NspBvar *) Res1)->varname=str1;
      if (nsp_object_set_name(Res1,str) == FAIL) return NULLOBJ;
      nsp_object_destroy(&Res);
      return Res1;
    }
}

static int nsp_bvar_is_true(void *Obj)
{
  NspBvar *b = (NspBvar *) Obj;
  return  NSP_OBJECT(b->value)->type->is_true(b->value);
}


