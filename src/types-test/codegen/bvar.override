/* -*- Mode: C -*- */
%%
include-start Bvar
/* inserted at the start of include file of bvar class */

%%
include-public Bvar
/* inserted at the end of public part of class include file */
extern NspBvar *nsp_bvar(NspObject *Obj,int flag);

%%
include-private Bvar
/* inserted in the private part of include file of bvar class */
static NspObject *nsp_bvar_loop(char *str, NspObject *O, NspObject *O1, int i, int *rep);
static int nsp_bvar_is_true(void *Obj);
static int bvar_code_getvarname(NspObject *Obj, NspHash *H);
static int bvar_code_countvarname(NspObject *Obj,const char *name, int *count);
static int bvar_code_isvarname(NspObject *Obj,const char *name,int *res);
static int bvar_code_vars(NspList *L, NspHash *H);
static int bvar_code_vars_used(NspList *L, NspHash *H);
static NspObject *bvar_code_replacevarname(NspObject *Obj,const char *name,NspObject *expr,int *changed);
static int bvar_code_replacevar(NspList *L,NspMatrix *Inds, const char *vname,NspObject *expr, int *callf) ;
static int bvar_code_varstatus(NspList *L,NspMatrix **Idx_used,NspMatrix **Idx_modified, const char *vname);

%%
headers
#include <nsp/objects.h>
#include <nsp/plist.h>
#include <nsp/plistc.h>
#include <nsp/parse.h>

%%
init

/ * init code  * /

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-type Bvar
  /* inserted verbatim in the type definition */
  top->is_true = (is_true_func  *) nsp_bvar_is_true;

%%
override-int-create-final Bvar
/* verbatim in create/load/full_copy interface use %(ret)s for returned value */
%%
override-destroy-prelim  Bvar
/* verbatim in destroy */

%%
override Bvar.bvar_get_value kwargs
/* override a method */
static int _wrap_bvar_get_value(NspBvar *self, Stack stack, int rhs, int opt, int lhs)
{
  NspObject *Obj;
  CheckRhs(0,0);
  CheckLhs(0,1);
  if ((Obj = nsp_object_copy(self->value)) == NULLOBJ) return RET_BUG;
  MoveObj(stack,1, Obj);
  return Max(lhs,1);
}

%%
override Bvar.bvar_set_value kwargs
/* override a method */
static int _wrap_bvar_set_value(NspBvar *self, Stack stack, int rhs, int opt, int lhs)
{
  NspObject *Obj,*Arg;
  CheckRhs(1,1);
  CheckLhs(0,1);
  /* take care that argument can be an Hobj */
  if ((Arg =nsp_get_object(stack,1)) == NULLOBJ) return RET_BUG;
  if ((Obj = nsp_object_copy_and_name("ud",Arg)) == NULLOBJ)
    return RET_BUG;
  if ( IsMat(Obj))
    {
      /* be sure that matrix are expanded to double stream */
      NspMatrix *M = (NspMatrix *) Mat2double ((NspMatrix *) Obj);
      if ( M == NULLMAT)
	{
	  Scierror("Error: cannot convert a scalar matrix in double mode\n");
	  return RET_BUG;
	}
    }
  if ( self->value != NULL )
    {
      nsp_object_destroy(&self->value);
    }
  self->value = Obj;
  return 0;
}

%%
override Bvar.bvar_get_varname kwargs

static int _wrap_bvar_get_varname(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  if ( nsp_move_string(stack,1,self->varname,-1) ==FAIL)   return RET_BUG;
  return 1;
}

%%
override Bvar.bvar_set_varname kwargs

static int _wrap_bvar_set_varname(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  char *str;
  CheckRhs(1,1);
  CheckLhs(0,0);
  if ((str = GetString(stack,1)) == (char*)0) return RET_BUG;
  if ((str = nsp_string_copy(str)) ==NULL) return RET_BUG;
  free(self->varname);
  self->varname=str;
  return 0;
}

%%
override Bvar.bvar_is_symbolic kwargs

static int _wrap_bvar_is_symbolic(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  if ( nsp_move_boolean(stack,1,(self->sym == TRUE))==FAIL) return RET_BUG;
  return 1;
}

%%
override Bvar.bvar_set_symbolic kwargs

static int _wrap_bvar_set_symbolic(NspBvar *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {s_bool,t_end};
  int status;
  if ( GetArgs(stack,rhs,opt,T,&status) == FAIL) return RET_BUG;
  self->sym = status;
  return 0;
}


%%
override-path-extract Bvar
top->path_extract = (path_func *) NULL; /* path extract as for matrix type */

%%
override-loop Bvar
top->loop = (loop_func *) nsp_bvar_loop; /* loop with bvar type */

%%
override-info Bvar
/*
 * info overriden
 */

int nsp_bvar_info(NspBvar *M, int indent,const char *name, int rec_level)
{
  return nsp_bvar_print(M,indent,name,rec_level);
}

%%
override-size Bvar

/*
 * size can be overriden here
 */

static int nsp_bvar_size(NspBvar *Mat, int flag)
{
  /* redirect the size value to Mat->value */
  if ( Mat->value == NULL)
    return 0;
  else
    return nsp_object_get_size(Mat->value,flag);
}

%%
override-print Bvar
/*
 * print overriden
 */

int nsp_bvar_print(NspBvar *M, int indent,const char *name, int rec_level)
{
  const char *pname = (name != NULL) ? name : NSP_OBJECT(M)->name;
  if (user_pref.pr_as_read_syntax)
    {
      if ( strcmp(pname,NVOID) != 0)
	{
	  nsp_object_print(M->value,indent,"_val",rec_level);
	  Sciprintf1(indent,"%s=bvar(sym=%s,varname=\"%s\",value=_val);",pname,
		     (M->sym == TRUE) ? "%t" : "%f");
	}
      else
	{
	  nsp_object_print(M->value,indent,"_val",rec_level);
	  Sciprintf1(indent,"%s=bvar(sym=%s,varname=\"%s\",value=_val);",pname,
		     (M->sym == TRUE) ? "%t" : "%f");
	}
    }
  else
    {
      Sciprintf1(indent,"%s\t= name=\"%s\",symbolic=%s,type=%s,size=[%d,%d]\n",
		 pname,M->varname, (M->sym == TRUE ) ? "%t" : "%f",
		 nsp_object_type_as_string(M->value),
		 nsp_object_get_size(M->value,1),
		 nsp_object_get_size(M->value,2)
		 );
    }
  return TRUE;
}


%%
override-equal Bvar

/*
 * A == B
 */

static int nsp_bvar_eq(NspBvar *A, NspObject *B)
{
  NspBvar *loc = (NspBvar *) B;
  if ( check_cast(B,nsp_type_bvar_id) == FALSE) return FALSE ;
  if ( A->value == NULL && loc->value == NULL) return TRUE;
  if ( A->value != NULL && loc->value != NULL)
    {
      if ( NSP_OBJECT(A->value)->type->eq(A->value,loc->value) == FALSE ) return FALSE;
    }
  else
    {
      return FALSE;
    }
  return TRUE;
}

/*
 * A != B
 */

static int nsp_bvar_neq(NspBvar *A, NspObject *B)
{
  return ( nsp_bvar_eq(A,B) == TRUE ) ? FALSE : TRUE;
}

%%
override bvar_code_getvarname kwargs

int _wrap_bvar_code_getvarname(Stack stack, int rhs, int opt, int lhs) /* bvar_get_varname */
{
  NspHash *H;
  int_types T[] = {obj, t_end};
  NspObject *Obj;
  CheckLhs(0,1);
  if ( GetArgs(stack,rhs,opt,T,&Obj,&H) == FAIL) return RET_BUG;
  if ((H = nsp_hash_create(NVOID,20)) == NULL)    return RET_BUG;
  if ( bvar_code_getvarname(Obj, H) == FAIL)
    {
      nsp_hash_destroy(H);
      return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(H));
  return 1;
}

%%
override bvar_code_countvarname kwargs

int _wrap_bvar_code_countvarname(Stack stack, int rhs, int opt, int lhs) /* bvar_get_varname */
{
  char *name = NULL;
  int count=0;
  int_types T[] = {obj, string, s_int ,t_end};
  NspObject *Obj;
  CheckLhs(0,1);
  if ( GetArgs(stack,rhs,opt,T,&Obj,&name,&count) == FAIL) return RET_BUG;
  if ( bvar_code_countvarname(Obj,name,&count) == FAIL)
    {
      return RET_BUG;
    }
  if ( nsp_move_double(stack,1,(double) count)== FAIL) return RET_BUG;
  return 1;
}

%%
override bvar_code_isvarname kwargs

int _wrap_bvar_code_isvarname(Stack stack, int rhs, int opt, int lhs)
{
  int isvarname = FALSE;
  char *name = NULL;
  int_types T[] = {obj, string, t_end};
  NspObject *Obj;
  CheckLhs(0,1);
  if ( GetArgs(stack,rhs,opt,T,&Obj,&name) == FAIL) return RET_BUG;
  if ( bvar_code_isvarname(Obj,name,&isvarname) == FAIL)
    {
      return RET_BUG;
    }
  if ( nsp_move_boolean(stack,1,isvarname)== FAIL) return RET_BUG;
  return 1;
}

%%
override bvar_code_replacevarname kwargs

int _wrap_bvar_code_replacevarname(Stack stack, int rhs, int opt, int lhs)
{
  int changed = FALSE;
  char *name = NULL;
  int_types T[] = {objcopy, string, obj, t_end};
  NspObject *Obj,*expr,*Res;
  CheckLhs(0,2);
  if ( GetArgs(stack,rhs,opt,T,&Obj,&name,&expr) == FAIL) return RET_BUG;
  Res = bvar_code_replacevarname(Obj,name,expr,&changed);
  if ( Res == NULL ) return RET_BUG;
  if ( nsp_move_boolean(stack,1,changed)== FAIL) return RET_BUG;
  if ( lhs >= 2 ) MoveObj(stack,2,Res);
  return Max(lhs,1);
}

%%
override bvar_code_vars kwargs

int _wrap_bvar_code_vars(Stack stack, int rhs, int opt, int lhs)
{
  NspHash *H;
  int_types T[] = { list ,  t_end};
  NspList *code;
  CheckLhs(0,1);
  if ( GetArgs(stack,rhs,opt,T,&code) == FAIL) return RET_BUG;
  if ((H = nsp_hash_create(NVOID,20)) == NULL)    return RET_BUG;
  if ( bvar_code_vars(code,H) == FAIL)
    {
      nsp_hash_destroy(H);
      return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(H));
  return 1;
}

%%
override bvar_code_vars_used kwargs

int _wrap_bvar_code_vars_used(Stack stack, int rhs, int opt, int lhs)
{
  NspHash *H;
  int_types T[] = { list ,  t_end};
  NspList *code;
  CheckLhs(0,1);
  if ( GetArgs(stack,rhs,opt,T,&code) == FAIL) return RET_BUG;
  if ((H = nsp_hash_create(NVOID,20)) == NULL)    return RET_BUG;
  if ( bvar_code_vars_used(code,H) == FAIL)
    {
      nsp_hash_destroy(H);
      return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(H));
  return 1;
}

%%
override bvar_code_replacevar kwargs

int _wrap_bvar_code_replacevar(Stack stack, int rhs, int opt, int lhs)
{
  int callf = FALSE;
  NspObject *expr;
  char *name = NULL;
  NspMatrix *Inds;
  int_types T[] = { list , realmat, string, obj, t_end};
  NspList *code;
  CheckRhs(4,4);
  CheckLhs(0,2);
  if ( GetArgs(stack,rhs,opt,T,&code,&Inds,&name,&expr) == FAIL) return RET_BUG;
  if ( (code = nsp_list_copy(code)) == NULL) return RET_BUG;
  if ( bvar_code_replacevar(code,Inds,name,expr,&callf) == FAIL)
    {
      nsp_list_destroy(code);
      return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(code));
  if ( lhs == 2 )
    {
      if ( nsp_move_boolean(stack,2,callf) == FAIL) return RET_BUG;
    }
  return Max(lhs,1);
}

%%
override bvar_code_varstatus kwargs

int _wrap_bvar_code_varstatus(Stack stack, int rhs, int opt, int lhs)
{
  NspMatrix *Idx_used, *Idx_modified;
  char *name = NULL;
  int_types T[] = { list , string, t_end};
  NspList *code;
  CheckLhs(0,2);
  if ( GetArgs(stack,rhs,opt,T,&code,&name) == FAIL) return RET_BUG;
  if ( bvar_code_varstatus(code,&Idx_used,&Idx_modified,name) == FAIL)
    {
      return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(Idx_used));
  if ( lhs == 2 )
    MoveObj(stack,2,NSP_OBJECT(Idx_modified));
  return Max(1,lhs);
}

%%
last

NspBvar *nsp_bvar(NspObject *Obj,int sym)
{
  NspObject *O1;
  NspBvar *H;
  /* want to be sure that type bvar is initialized */
  nsp_type_bvar = new_type_bvar(T_BASE);
  if(( H = nsp_bvar_create_void(NVOID,(NspTypeBase *) nsp_type_bvar)) == NULLBVAR) return NULL;
  if ((O1 = nsp_object_copy_and_name("ud",Obj)) == NULLOBJ)
    {
      nsp_bvar_destroy(H);
      return NULL;
    }
  if ( IsMat(O1))
    {
      /* be sure that matrix are expanded to double stream */
      NspMatrix *M = (NspMatrix *) Mat2double ((NspMatrix *) O1);
      if ( M == NULLMAT)
	{
	  nsp_bvar_destroy(H);
	  nsp_object_destroy(&O1);
	  return NULL;
	}
    }
  if ( H->value != NULL )
    {
      nsp_object_destroy(&H->value);
    }
  H->value = O1;
  H->sym = sym;
  return H;
}


/* loop extraction for bvar variable
 * @str: name to give to created object
 * @O: a #NspObject pointer to use to store extracted column or a NULL pointer
 * @O1: a #NspObject from which we must extract columns
 * @i: undice of the column to be extracted
 * @rep: returned error value.
 */

static NspObject *nsp_bvar_loop(char *str, NspObject *O, NspObject *O1, int i, int *rep)
{
  NspBvar *b = (NspBvar *) O1;
  if (b->sym == TRUE)
    {
      Scierror("Error: loop cannot work for symbolic values\n");
      return NULLOBJ;
    }
  if ( O != NULL)
    {
      b->value->type->loop(str,((NspBvar *) O)->value,b->value,i,rep);
      if ((*rep == RET_ENDFOR))
	return NULLOBJ;
      else
	return O;
    }
  else
    {
      char *str1;
      NspObject *Res1;
      NspObject *Res= b->value->type->loop(str,O,b->value,i,rep);
      Res1 = (NspObject *) nsp_bvar(Res,FALSE);
      if ((str1 = nsp_string_copy(str)) ==NULL) return NULLOBJ;
      free(((NspBvar *) Res1)->varname);
      ((NspBvar *) Res1)->varname=str1;
      if (nsp_object_set_name(Res1,str) == FAIL) return NULLOBJ;
      nsp_object_destroy(&Res);
      return Res1;
    }
}


static int nsp_bvar_is_true(void *Obj)
{
  NspBvar *b = (NspBvar *) Obj;
  if ( b->sym == TRUE )
    {
      Scierror("Error: do not use symbolic variables in conditions (if, while,case) \n");
      return FALSE;
    }
  else
    {
      return  NSP_OBJECT(b->value)->type->is_true(b->value);
    }
}

/* set of function used for bvar code */

static int bvar_code_is_op(NspObject *Obj)
{
  if ( IsHash(Obj) )
    {
      NspObject *O1;
      NspHash *H = (NspHash *) Obj;
      if (nsp_hash_find(H,"type",&O1) == FAIL )
	{
	  return FAIL;
	}
      else
	{
	  if ( IsSMat(O1) && ((NspSMatrix *) O1)->mn == 1 && strcmp(((NspSMatrix *) O1)->S[0],"op") == 0)
	    return OK;
	}
    }
  return FAIL;
}

/* */

static int bvar_code_countvarname(NspObject *Obj,const char *name, int *count)
{
  /* a bvar */
  if ( IsBvar(Obj))
    {
      NspBvar *B = (NspBvar *) Obj;
      if ( strcmp(B->varname,name)== 0 ) (*count)++;
      return OK;
    }
  /* a hash table with type="op" */
  if ( bvar_code_is_op(Obj) == OK)
    {
      NspObject *Elt, *O1;
      NspHash *H1= (NspHash *) Obj;
      if (nsp_hash_find(H1,"exp",&O1) == FAIL )
	return FAIL;
      if ( ! IsList(O1) ) return FAIL;
      if ( (Elt= nsp_list_get_element((NspList *) O1,2)) == NULL)
	return FAIL;
      return bvar_code_countvarname(Elt,name,count);
    }
  /* a list */
  if ( IsList(Obj) )
    {
      /* loop on elements */
      NspList *L= (NspList *) Obj;
      Cell *C = L->first;
      while ( C != NULLCELL)
	{
	  if ( C->O != NULLOBJ )
	    {
	      if ( bvar_code_countvarname(C->O,name,count) == FAIL) return FAIL;
	    }
	  C = C->next;
	}
    }
  return OK;
}

/* */

static int bvar_code_getvarname(NspObject *Obj,NspHash *H)
{
  /* a bvar */
  if ( IsBvar(Obj))
    {
      NspObject *Res;
      NspBvar *B = (NspBvar *) Obj;
      if ((Res=nsp_create_true_object(B->varname)) == NULL) return FAIL;
      if (nsp_hash_enter( H,Res) == FAIL ) return FAIL;
      return OK;
    }
  /* a hash table with type="op" */
  if ( bvar_code_is_op(Obj) == OK)
    {
      NspObject *Elt, *O1;
      NspHash *H1= (NspHash *) Obj;
      if (nsp_hash_find(H1,"exp",&O1) == FAIL )
	return FAIL;
      if ( ! IsList(O1) ) return FAIL;
      if ( (Elt= nsp_list_get_element((NspList *) O1,2)) == NULL)
	return FAIL;
      return bvar_code_getvarname(Elt,H);
    }
  /* a list */
  if ( IsList(Obj) )
    {
      /* loop on elements */
      NspList *L= (NspList *) Obj;
      Cell *C = L->first;
      while ( C != NULLCELL)
	{
	  if ( C->O != NULLOBJ )
	    {
	      if ( bvar_code_getvarname(C->O,H) == FAIL) return FAIL;
	    }
	  C = C->next;
	}
    }
  return OK;
}

/* */

static int bvar_code_isvarname(NspObject *Obj,const char *name,int *res)
{
  /* a bvar */
  *res = FALSE;
  if ( IsBvar(Obj))
    {
      NspBvar *B = (NspBvar *) Obj;
      *res = (strcmp(B->varname,name)==0) ? TRUE: FALSE;
      return OK;
    }
  /* a hash table with type="op" */
  if ( bvar_code_is_op(Obj) == OK)
    {
      NspObject *Elt, *O1;
      NspHash *H1= (NspHash *) Obj;
      if (nsp_hash_find(H1,"exp",&O1) == FAIL )
	return FAIL;
      if ( ! IsList(O1) ) return FAIL;
      if ( (Elt= nsp_list_get_element((NspList *) O1,2)) == NULL)
	return FAIL;
      return bvar_code_isvarname(Elt,name,res);
    }
  /* a list */
  if ( IsList(Obj) )
    {
      *res = FALSE;
      /* loop on elements */
      NspList *L= (NspList *) Obj;
      Cell *C = L->first;
      while ( C != NULLCELL)
	{
	  if ( C->O != NULLOBJ )
	    {
	      if ( bvar_code_isvarname(C->O,name,res) == FAIL) return FAIL;
	      if ( *res == TRUE ) return OK;
	    }
	  C = C->next;
	}
    }
  return OK;
}

/* replaces name by exp
 * changed is set to TRUE if a replacement was done
 */

static NspObject *bvar_code_replacevarname(NspObject *Obj,const char *name,NspObject *expr,int *changed)
{
  *changed = FALSE;
  /* a bvar */
  if ( IsBvar(Obj))
    {
      NspBvar *B = (NspBvar *) Obj;
      if  (strcmp(B->varname,name)==0)
	{
	  *changed = TRUE;
	  return nsp_object_copy_with_name(expr);
	}
      return Obj;
    }
  /* a hash table with type="op" */
  if ( bvar_code_is_op(Obj) == OK)
    {
      NspObject *Elt,*Elt1, *O1;
      NspHash *H1= (NspHash *) Obj;
      if (nsp_hash_find(H1,"exp",&O1) == FAIL )	return NULL;
      if ( ! IsList(O1) ) return NULL;
      if ((Elt= nsp_list_get_element((NspList *) O1,2)) == NULL) return NULL;
      if ((Elt1= bvar_code_replacevarname(Elt,name,expr,changed)) == NULL) return NULL;
      if ( *changed == TRUE && Elt1 != Elt )
	{
	  if ( nsp_list_insert((NspList *) O1,Elt1,2)==FAIL) return NULL;
	}
      return Obj;
    }
  /* a list */
  if ( IsList(Obj) )
    {
      int changed1 = FALSE;
      /* loop on elements */
      NspList *L= (NspList *) Obj;
      Cell *C = L->first;
      while ( C != NULLCELL)
	{
	  changed1= FALSE;
	  if ( C->O != NULLOBJ )
	    {
	      NspObject *Res;
	      if ((Res= bvar_code_replacevarname(C->O,name,expr,&changed1)) == NULL) return NULL;
	      if ( changed1 == TRUE )   *changed = TRUE;
	      if  (Res != C->O)
		{
		  nsp_object_destroy(&C->O);
		  C->O = Res;
		}
	    }
	  C = C->next;
	}
      return Obj;
    }
  return Obj;
}

/* */

static int bvar_code_vars(NspList *L, NspHash *H)
{
  /* walk through the list */
  Cell *C = L->first;
  while ( C != NULLCELL)
    {
      NspObject *Elt = C->O;
      if ( Elt != NULLOBJ )
	{
	  int i;
	  const char *name;
	  NspObject *elt1,*eltn;
	  if (! IsList(Elt) ) goto fail;
	  /* get first element */
	  if ( (elt1= nsp_list_get_element((NspList *) Elt,1)) == NULL) goto fail;
	  if ( ! ( IsSMat(elt1) && ((NspSMatrix *) elt1)->mn ==1 )) goto fail;
	  name = ((NspSMatrix *) elt1)->S[0];
	  if (strcmp(name,"nop" )==0)
	    {}
	  else if (strcmp(name,"annotation")==0)
	    {}
	  else if (strcmp(name,"set")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"bi_insert")==0)
	    {
	      for ( i = 2 ; i <= 5 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"uni_insert")==0)
	    {
	      for ( i = 2 ; i <= 4 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"assign")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"mcopy")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"if_expr")==0)
	    {
	      for ( i = 2 ; i <= 4 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"endfunction")==0)
	    {}
	  else if (strcmp(name,"switch_expr")==0)
	    {}
	  else if (strcmp(name,"callf")==0)
	    {
	      for ( i = 2 ; i <= 2 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	}
      C = C->next;
    }
  return OK;
 fail:
  return FAIL;
}

/* similar to bvar_code_vars but just checks use of variables */

static int bvar_code_vars_used(NspList *L, NspHash *H)
{
  /* walk through the list */
  Cell *C = L->first;
  while ( C != NULLCELL)
    {
      NspObject *Elt = C->O;
      if ( Elt != NULLOBJ )
	{
	  int i;
	  const char *name;
	  NspObject *elt1,*eltn;
	  if (! IsList(Elt) ) goto fail;
	  /* get first element */
	  if ( (elt1= nsp_list_get_element((NspList *) Elt,1)) == NULL) goto fail;
	  if ( ! ( IsSMat(elt1) && ((NspSMatrix *) elt1)->mn ==1 )) goto fail;
	  name = ((NspSMatrix *) elt1)->S[0];
	  if (strcmp(name,"nop" )==0)
	    {}
	  else if (strcmp(name,"annotation")==0)
	    {}
	  else if (strcmp(name,"set")==0)
	    {
	      for ( i = 3 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"bi_insert")==0)
	    {
	      for ( i = 3 ; i <= 5 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"uni_insert")==0)
	    {
	      for ( i = 3 ; i <= 4 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"assign")==0)
	    {
	      for ( i = 3 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"mcopy")==0)
	    {
	      for ( i = 3 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"if_expr")==0)
	    {
	      for ( i = 3 ; i <= 4 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if (bvar_code_getvarname(eltn,H) == FAIL ) goto fail;
		}
	    }
	  else if (strcmp(name,"endfunction")==0)
	    {}
	  else if (strcmp(name,"switch_expr")==0)
	    {}
	  else if (strcmp(name,"callf")==0)
	    {}
	}
      C = C->next;
    }
  return OK;
 fail:
  return FAIL;
}


/* L is changed, expr is copied each time it is inserted */

static int bvar_code_replacevar(NspList *L,NspMatrix *Inds, const char *vname,NspObject *expr, int *callf)
{
  int count = 0, inds_i=0;
  NspObject *Res;
  int changed=FALSE;
  /* walk through the list */
  Cell *C = L->first;
  *callf = FALSE;
  if ( Inds->mn == 0) return OK;  /* nothing to do */
  while ( C != NULLCELL)
    {
      NspObject *Elt = C->O;
      count++;
      if ( count == Inds->R[inds_i] &&  Elt != NULLOBJ )
	{
	  int i;
	  const char *name;
	  NspObject *elt1,*eltn;
	  inds_i = Min(inds_i+1,Inds->mn -1);
	  if (! IsList(Elt) ) goto fail;
	  /* get first element */
	  if ( (elt1= nsp_list_get_element((NspList *) Elt,1)) == NULL) goto fail;
	  if ( ! ( IsSMat(elt1) && ((NspSMatrix *) elt1)->mn ==1 )) goto fail;
	  name = ((NspSMatrix *) elt1)->S[0];
	  if (strcmp(name,"nop" )==0)
	    {}
	  else if (strcmp(name,"annotation")==0)
	    {}
	  else if (strcmp(name,"set")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( (Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE && Res != eltn )
		    {
		      if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
 		}
	    }
	  else if (strcmp(name,"bi_insert")==0)
	    {
	      for ( i = 2 ; i <= 5 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( (Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE && Res != eltn )
		    {
		      if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
		}
	    }
	  else if (strcmp(name,"uni_insert")==0)
	    {
	      for ( i = 2 ; i <= 4 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( (Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE && Res != eltn )
		    {
		      if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
		}
	    }
	  else if (strcmp(name,"assign")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( (Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE && Res != eltn )
		    {
		      if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
		}
	    }
	  else if (strcmp(name,"mcopy")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( (Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE && Res != eltn )
		    {
		      if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
		}
	    }
	  else if (strcmp(name,"if_expr")==0)
	    {
	      for ( i = 2 ; i <= 4 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( (Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE && Res != eltn )
		    {
		      if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
		}
	    }
	  else if (strcmp(name,"endfunction")==0)
	    {}
	  else if (strcmp(name,"switch_expr")==0)
	    {}
	  else if (strcmp(name,"callf")==0)
	    {
	      for ( i = 2 ; i <= 2 ; i++)
		{
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ((Res = bvar_code_replacevarname(eltn,vname,expr,&changed)) == NULL) goto fail;
		  if ( changed == TRUE )
		    {
		      *callf = TRUE;
		      if ( Res != eltn )
			if ( nsp_list_insert((NspList *) Elt,Res,i)==FAIL) goto fail;
		    }
		}

	    }
	}
      C = C->next;
    }
  return OK;
 fail:
  return FAIL;
}

static int bvar_code_varstatus(NspList *L,NspMatrix **Idx_used,NspMatrix **Idx_modified, const char *vname)
{
  NspMatrix *Used,*Modified;
  int count = 0;
  /* walk through the list */
  Cell *C = L->first;
  if (( Used= nsp_matrix_create(NVOID,'r',1,0)) == NULLMAT) goto fail;
  if (( Modified = nsp_matrix_create(NVOID,'r',1,0)) == NULLMAT) goto fail;
  while ( C != NULLCELL)
    {
      NspObject *Elt = C->O;
      count++;
      int ok_used=FALSE, ok_modified=FALSE;
      if ( Elt != NULLOBJ )
	{
	  int i;
	  const char *name;
	  NspObject *elt1,*eltn;
	  if (! IsList(Elt) ) goto fail;
	  /* get first element */
	  if ( (elt1= nsp_list_get_element((NspList *) Elt,1)) == NULL) goto fail;
	  if ( ! ( IsSMat(elt1) && ((NspSMatrix *) elt1)->mn ==1 )) goto fail;
	  name = ((NspSMatrix *) elt1)->S[0];
	  if (strcmp(name,"nop" )==0)
	    {}
	  else if (strcmp(name,"annotation")==0)
	    {}
	  else if (strcmp(name,"set")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  int ok;
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( bvar_code_isvarname(eltn,vname,&ok)== FAIL ) goto fail;
		  if ( i == 2 ) ok_modified = ok; else ok_used = ok;
 		}
	    }
	  else if (strcmp(name,"bi_insert")==0)
	    {
	      for ( i = 2 ; i <= 5 ; i++)
		{
		  int ok;
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( bvar_code_isvarname(eltn,vname,&ok)== FAIL ) goto fail;
		  if ( i == 2 ) ok_modified = ok; else ok_used = ok;
 		}
	    }
	  else if (strcmp(name,"uni_insert")==0)
	    {
	      for ( i = 2 ; i <= 4 ; i++)
		{
		  int ok;
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( bvar_code_isvarname(eltn,vname,&ok)== FAIL ) goto fail;
		  if ( i == 2 ) ok_modified = ok; else ok_used = ok;
 		}

	    }
	  else if (strcmp(name,"assign")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  int ok;
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( bvar_code_isvarname(eltn,vname,&ok)== FAIL ) goto fail;
		  if ( i == 2 ) ok_modified = ok; else ok_used = ok;
 		}

	    }
	  else if (strcmp(name,"mcopy")==0)
	    {
	      for ( i = 2 ; i <= 3 ; i++)
		{
		  int ok;
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( bvar_code_isvarname(eltn,vname,&ok)== FAIL ) goto fail;
		  if ( i == 2 ) ok_modified = ok; else ok_used = ok;
 		}

	    }
	  else if (strcmp(name,"if_expr")==0)
	    {
	      for ( i = 2 ; i <= 4 ; i++)
		{
		  int ok;
		  if ((eltn= nsp_list_get_element((NspList *) Elt,i)) == NULL) goto fail;
		  if ( bvar_code_isvarname(eltn,vname,&ok)== FAIL ) goto fail;
		  ok_used = ok;
		  if ( i != 2 ) ok_modified = ok;
 		}

	    }
	  else if (strcmp(name,"endfunction")==0)
	    {}
	  else if (strcmp(name,"switch_expr")==0)
	    {}
	  else if (strcmp(name,"callf")==0)
	    {
	      NspHash *H;
	      NspObject *O1,*O2,*out_list,*in_list;
	      if ((eltn= nsp_list_get_element((NspList *) Elt,2)) == NULL) goto fail;
	      /* now we need
	       * ins=elt(2).exp(2)(3); // in-list
	       * ok_used=bvar_code_isvarname(ins,varname);
	       * outs=elt(2).exp(2)(2);// out-list
	       * ok_modified=bvar_code_isvarname(outs,varname);
	       */
	      H = (NspHash *) eltn;
	      if (nsp_hash_find(H,"exp",&O1) == FAIL ) goto fail;
	      if ( ! IsList(O1) ) goto fail;
	      if ( (O2 = nsp_list_get_element((NspList *) O1,2)) == NULL) goto fail;
	      if ( ! IsList(O2) ) goto fail;
	      if ( (out_list= nsp_list_get_element((NspList *) O2,2)) == NULL) goto fail;
	      if ( (in_list= nsp_list_get_element((NspList *) O2,3)) == NULL) goto fail;
	      if ( bvar_code_countvarname(in_list,vname,&ok_used)== FAIL ) goto fail;
	      if ( bvar_code_countvarname(out_list,vname,&ok_modified)== FAIL ) goto fail;
	    }
	  if ( ok_used == TRUE )
	    {
	      if ( nsp_matrix_add_columns(Used,1,count) == FAIL) goto fail;
	    }
	  if ( ok_modified == TRUE )
	    {
	      if ( nsp_matrix_add_columns(Modified,1,count) == FAIL) goto fail;
	    }
	}
      C = C->next;
    }
  *Idx_used = Used;
  *Idx_modified = Modified;
  return OK;
 fail:
  return FAIL;
}
