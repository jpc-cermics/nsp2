/* -*- Mode: C -*- */
%%
include Axes

/* inserted at the end of public part of include file
 * of figure.h
 */

extern NspAxes * nsp_check_for_axes(BCG *Xgc,const double *wrect) ;
extern void nsp_axes_i2f(BCG *Xgc,NspAxes *Obj,int x,int y,double pt[2]);
extern NspObject * nsp_check_pt_axes_or_objs3d(BCG *Xgc,const int *pt);
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
extern void nsp_list_link_figure(NspList *L, NspFigure *F);
extern void nsp_list_unlink_figure(NspList *L, NspFigure *F);
extern int nsp_list_check_figure(NspList *L, nsp_figure *F);
extern void nsp_graphic_link_figure(NspGraphic *G, void *F);
extern void nsp_graphic_unlink_figure(NspGraphic *G, void *F);
extern void nsp_figure_force_redraw(nsp_figure *F);

%%
include_private Axes

/* inserted in the private part of include file
 * of classa.h
 */

static void nsp_draw_axes(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_axes(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_axes(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_axes(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_axes(BCG *Xgc,NspGraphic *o,double *bounds);
static void nsp_axes_compute_inside_bounds(BCG *Xgc,NspGraphic *Obj,double *bounds);
static void nsp_axes_link_figure(NspGraphic *G, void *F);
static void nsp_axes_unlink_figure(NspGraphic *G, void *F);
static NspList *nsp_axes_children(NspGraphic *Obj);

%%
headers
#include <nsp/figuredata.h> 
#include <nsp/figure.h>
#include <nsp/objs3d.h>
#include <nsp/curve.h>

#ifdef  WITH_GTKGLEXT 
extern Gengine GL_gengine;
#endif 

%%
init 

Init portion 

%%
override-type  Axes
  /* inserted verbatim in the type definition */
  ((NspTypeNspGraphic *) type->surtype)->draw = nsp_draw_axes;
  ((NspTypeNspGraphic *) type->surtype)->translate =nsp_translate_axes ;
  ((NspTypeNspGraphic *) type->surtype)->rotate =nsp_rotate_axes  ;
  ((NspTypeNspGraphic *) type->surtype)->scale =nsp_scale_axes  ;
  ((NspTypeNspGraphic *) type->surtype)->bounds =nsp_getbounds_axes  ;
  ((NspTypeNspGraphic *) type->surtype)->full_copy = (full_copy_func *) nsp_axes_full_copy ;
  ((NspTypeNspGraphic *) type->surtype)->link_figure = nsp_axes_link_figure; 
  ((NspTypeNspGraphic *) type->surtype)->unlink_figure = nsp_axes_unlink_figure; 
  ((NspTypeNspGraphic *) type->surtype)->children = (children_func *) nsp_axes_children ;
%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override axes_attach kwargs
int _wrap_axes_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  store_graphic_object(Xgc, pl);
  return 0;
}

%%
override-attr Axes.rho 
/* override set rho */
static int _wrap_axes_set_rho(void *self, char *attr, NspObject *O)
{
  double rho;
  if ( DoubleScalar(O,&rho) == FAIL) return FAIL;

  if ( ((NspAxes *) self)->obj->rho != rho) 
    {
      ((NspAxes *) self)->obj->rho = rho;
      nsp_figure_force_redraw(((NspGraphic *) self)->obj->Fig);
    }
  return OK;
}

%%
override-attr Axes.children

/* here we override get_obj  and set_obj 
 * we want a get to be followed by a set to check that 
 * inserted value is correct thus we use copy = TRUE.
 */

static NspObject *_wrap_axes_get_obj_children(void *self,char *attr, int *copy)
{
  NspList *ret;
  *copy = TRUE; 
  ret = ((NspList*) ((NspAxes *) self)->obj->children);
  return (NspObject *) ret;
}

/* in this function we can check that val is correct before 
 * setting the field with val. return FAIL if val is incorrect.
 */

static int _wrap_axes_set_obj_children(void *self,NspObject *val)
{
  double inside_bounds[4];
  if ( ! IsList(val) ) return FAIL;
  if ( nsp_list_check_figure((NspList *) val, ((NspGraphic *) self)->obj->Fig) == FAIL) return FAIL;
  if (((NspAxes *) self)->obj->children != NULL ) 
    {
      if ( ((NspGraphic *) self)->obj->Fig != NULL) 
	nsp_list_unlink_figure(((NspAxes *) self)->obj->children,((NspGraphic *) self)->obj->Fig);
      nsp_list_destroy(((NspAxes *) self)->obj->children);
    }
  ((NspAxes *) self)->obj->children =  (NspList *) val;
  nsp_axes_compute_inside_bounds(NULL,self,inside_bounds);
  if ( ((NspGraphic *) self)->obj->Fig != NULL) 
    nsp_list_link_figure((NspList *) val,((NspGraphic *) self)->obj->Fig);
  return OK;
}

static int _wrap_axes_set_children(void *self, char *attr, NspObject *O)
{
  double inside_bounds[4];
  NspList *children;
  if ( ! IsList(O) ) return FAIL;
  if ((children = (NspList *) nsp_object_copy_and_name(attr,O)) == NULLLIST) return FAIL;
  if (((NspAxes *) self)->obj->children != NULL ) 
    {
      if ( ((NspGraphic *) self)->obj->Fig != NULL) 
	nsp_list_unlink_figure(((NspAxes *) self)->obj->children,((NspGraphic *) self)->obj->Fig);
      nsp_list_destroy(((NspAxes *) self)->obj->children);
    }
  ((NspAxes *) self)->obj->children= children;
  nsp_axes_compute_inside_bounds(NULL,self,inside_bounds);
  if ( ((NspGraphic *) self)->obj->Fig != NULL) 
    nsp_list_link_figure((NspList *) O,((NspGraphic *) self)->obj->Fig);
  return OK;
}


%%
override nsp_extractelts_axes kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_axes(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_axes kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_axes(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */
void nsp_axes_update_frame_bounds(BCG *Xgc,double *wrect,double *frect,double *arect,
				  int *aaint,int isomode, int auto_axes, char *xf);
static int nsp_axes_legends(BCG *Xgc,NspAxes *axe);

static void nsp_draw_axes(BCG *Xgc,NspGraphic *Obj, void *data)
{
  char xf[]="onn";
  double WRect[4],*wrect1,WRect1[4], FRect[4], ARect[4], inside_bounds[4];
  char logscale[2];
  int aaint[4]={10,2,10,2};
  Cell *cloc;
  NspList *L;
  NspAxes *P = (NspAxes *) Obj;
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;
  /* draw elements */
  L = P->obj->children;
  cloc = L->first ;
  /* we change the scale according to the axes */
  getscale2d(Xgc,WRect,FRect,logscale,ARect);
  if ( P->obj->top == TRUE ) 
    {
      /* This is a top level axes, wrect gives the axes position in the 
       * enclosing graphic window. 
       */
      set_scale(Xgc,"fTffft",P->obj->wrect->R,NULL,NULL,NULL,P->obj->arect->R);
      wrect1= P->obj->wrect->R;
    }
  else 
    {
      /* This is not a top level axes, we draw its enclosing rectangle 
       * if alpha is non nul we should draw a rotated rectangle
       */
      Xgc->graphic_engine->scale->drawrectangle(Xgc,P->obj->wrect->R);
      /* wrect->R is [left,up,w,h] 
       * we need to compute wrect->R in term on window/proportions 
       */
      WRect1[0]= ARect[0]+(1-ARect[0]-ARect[2])*(P->obj->wrect->R[0]-FRect[0])/(FRect[2]-FRect[0]);
      WRect1[1]= ARect[1]+(1-ARect[1]-ARect[3])*(1- (P->obj->wrect->R[1]-FRect[1])/(FRect[3]-FRect[1]));
      WRect1[2]= (1-ARect[0]-ARect[2])*(P->obj->wrect->R[2])/(FRect[2]-FRect[0]);
      WRect1[3]= (1-ARect[1]-ARect[3])*(P->obj->wrect->R[3])/(FRect[3]-FRect[1]);
      wrect1 = WRect1;
      Xgc->scales->cosa= cos( P->obj->rho);
      Xgc->scales->sina= sin( P->obj->rho);
    }

  /* we directly change the default scale because we do not want 
   * to register all the scales that will be generated by set_scale 
   * thus we use T in flag[1].
   */


  if ( P->obj->fixed == FALSE ) 
    {
      /* actualize the inside bounds with objects 
       * this should not be done systématically 
       */
      nsp_axes_compute_inside_bounds(Xgc,Obj,inside_bounds);
      memcpy(P->obj->frect->R,inside_bounds,4*sizeof(double));
    }
  else
    {
      /* bounds of the plot are given by rect 
       */
      memcpy(P->obj->frect->R,P->obj->rect->R,4*sizeof(double));
    }

  if ( P->obj->zoom == TRUE )
    {
      /* when zooming zrect is used 
       */
      memcpy(P->obj->frect->R,P->obj->zrect->R,4*sizeof(double));
    }
  
  if ( P->obj->xlog == TRUE ) xf[1]= 'l';
  if ( P->obj->ylog == TRUE ) xf[2]= 'l';

  nsp_axes_update_frame_bounds(Xgc,wrect1,
			       P->obj->frect->R,
			       P->obj->arect->R,
			       aaint,
			       P->obj->iso,
			       P->obj->auto_axis,
			       xf);

  axis_draw(Xgc,'1', 
	    (P->obj->auto_axis) ? '5': '1',
	    P->obj->grid);
  
  frame_clip_on(Xgc);
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->draw(Xgc,G,NULL);
	}
      cloc = cloc->next;
    }
  /* Note that clipping is wrong when an axe is rotated 
   * since clipping only works with rectangles 
   */
  frame_clip_off(Xgc);
  /* legends */
  nsp_axes_legends(Xgc,P);
  /* title if present */
  if ( P->obj->title[0] != '\0') 
    Xgc->graphic_engine->scale->displaystringa(Xgc,P->obj->title,1);
  if ( P->obj->x[0] != '\0') 
    Xgc->graphic_engine->scale->displaystringa(Xgc,P->obj->x,2);
  if ( P->obj->y[0] != '\0') 
    Xgc->graphic_engine->scale->displaystringa(Xgc,P->obj->y,3);
  
  /* scale back */
  set_scale(Xgc,"fTtfft",WRect,FRect,NULL,NULL,ARect);
  if (  P->obj->top != TRUE )
    {
      Xgc->scales->cosa=1.0;
      Xgc->scales->sina=0.0;
    }
}

/* to be synchronized with the above function 
 *
 */

void nsp_axes_i2f(BCG *Xgc,NspAxes *P,int x,int y,double pt[2])
{
  char xf[]="onn";
  double WRect[4],*wrect1,WRect1[4], FRect[4], ARect[4], inside_bounds[4];
  char logscale[2];
  int aaint[4]={10,2,10,2};
  /* we change the scale according to the axes */
  getscale2d(Xgc,WRect,FRect,logscale,ARect);
  if ( P->obj->top == TRUE ) 
    {
      /* This is a top level axes, wrect gives the axes position in the 
       * enclosing graphic window. 
       */
      set_scale(Xgc,"fTffft",P->obj->wrect->R,NULL,NULL,NULL,P->obj->arect->R);
      wrect1= P->obj->wrect->R;
    }
  else 
    {
      /* wrect->R is [left,up,w,h] 
       * we need to compute wrect->R in term on window/proportions 
       */
      WRect1[0]= ARect[0]+(1-ARect[0]-ARect[2])*(P->obj->wrect->R[0]-FRect[0])/(FRect[2]-FRect[0]);
      WRect1[1]= ARect[1]+(1-ARect[1]-ARect[3])*(1- (P->obj->wrect->R[1]-FRect[1])/(FRect[3]-FRect[1]));
      WRect1[2]= (1-ARect[0]-ARect[2])*(P->obj->wrect->R[2])/(FRect[2]-FRect[0]);
      WRect1[3]= (1-ARect[1]-ARect[3])*(P->obj->wrect->R[3])/(FRect[3]-FRect[1]);
      wrect1 = WRect1;
      Xgc->scales->cosa= cos( P->obj->rho);
      Xgc->scales->sina= sin( P->obj->rho);
    }
  /* we directly change the default scale because we do not want 
   * to register all the scales that will be generated by set_scale 
   * thus we use T in flag[1].
   */
  if ( FALSE ) 
    {
      nsp_axes_compute_inside_bounds(Xgc,(NspGraphic *) P,inside_bounds);
      memcpy(P->obj->frect->R,inside_bounds,4*sizeof(double));
    }

  if ( P->obj->xlog == TRUE ) xf[1]= 'l';
  if ( P->obj->ylog == TRUE ) xf[2]= 'l';

  nsp_axes_update_frame_bounds(Xgc,wrect1,
			       P->obj->frect->R,
			       P->obj->arect->R,
			       aaint,
			       P->obj->iso,
			       P->obj->auto_axis,
			       xf);
  scale_i2f(Xgc,pt,pt+1,&x,&y,1);
  /* scale back */
  set_scale(Xgc,"fTtfft",WRect,FRect,NULL,NULL,ARect);
  if (  P->obj->top != TRUE )
    {
      Xgc->scales->cosa=1.0;
      Xgc->scales->sina=0.0;
    }
}


/* draw legends from information contained in axe 
 */

static int nsp_axes_legends(BCG *Xgc,NspAxes *axe)
{
  int style[56],count=0,legend_pos=1;
  NspSMatrix *legends=NULL,*legend=NULL;
  /* get and collect the legends */
  NspList *L = axe->obj->children;
  Cell *cloc = L->first ;
  legend_pos = axe->obj->lpos;
  legends = nsp_smatrix_create_with_length(NVOID,0,0,-1);
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ && IsCurve(cloc->O) ) 
	{
	  NspCurve *cv = (NspCurve *) cloc->O;
	  if (cv->obj->legend[0] != '\0' ) 
	    {
	      nsp_row_smatrix_append_string(legends,cv->obj->legend);
	      style[count++]= cv->obj->color;
	      if (count >= 56 ) break; 
	    }
	}
      cloc = cloc->next;
    }
  if ( count != 0) 
    {
      legend = nsp_smatrix_row_concat(legends,"@",1);
      if (legend != NULL) 
	nsp_legends(Xgc,legend_pos,legends->mn,style,legend->S[0],"@"); 
    }
  if ( legend != NULL) nsp_smatrix_destroy(legend);
  if ( legends != NULL) nsp_smatrix_destroy(legends);
  return OK;
}


/* compute the bounds of the set of objects countained in the 
 * axes 
 */




static void nsp_axes_compute_inside_bounds(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  double l_bounds[4];
  Cell *cloc;
  NspList *L;
  NspAxes *P = (NspAxes *) Obj;
  L = P->obj->children;
  cloc = L->first ;
  
  if ( cloc == NULLCELL) 
    {
      bounds[0]=bounds[1]=0;
      bounds[2]=bounds[3]=0;
      return;
    }
  
  bounds[0]=bounds[1]=LARGEST_REAL;
  bounds[2]=bounds[3]=-LARGEST_REAL;

  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->bounds(Xgc,G,l_bounds);
	  if ( l_bounds[0] < bounds[0] ) 
	    bounds[0]= l_bounds[0];
	  if (  l_bounds[2] > bounds[2])
	    bounds[2]= l_bounds[2];
	  if ( l_bounds[1] < bounds[1] ) 
	    bounds[1]= l_bounds[1];
	  if (  l_bounds[3] > bounds[3])
	    bounds[3]= l_bounds[3];
	}
      cloc = cloc->next;
    }
}


void nsp_axes_update_frame_bounds(BCG *Xgc,double *wrect,double *frect,double *arect,
				  int *aaint,int isomode,int auto_axes, char *xf)
{
  double FRect1[4];
  int Xdec[3],Ydec[3],i;
  double xmin=0.0,xmax=10.0,ymin= 0.0,ymax= 10.0;
  xmin=frect[0];ymin=frect[1];xmax=frect[2];ymax=frect[3];
  
  /*
   * modify computed min,max if isoview requested 
   */
  
  if ( isomode == TRUE ) 
    {
      /* code by S. Mottelet 11/7/2000 */
      double hx=xmax-xmin,hy=ymax-ymin,hx1,hy1, dwdim[2];
      int wdim[2];
      Xgc->graphic_engine->xget_windowdim(Xgc,wdim,wdim+1);
      dwdim[0]=linint((double)wdim[0] * (wrect[2]*(1.0-arect[0]-arect[1])));  /* add corrections for margins */
      dwdim[1]=linint((double)wdim[1] * (wrect[3]*(1.0-arect[2]-arect[3])));  /* add corrections for margins */
      if ( hx/dwdim[0] < hy/dwdim[1] ) 
	{
	  hx1=dwdim[0]*hy/dwdim[1];
	  xmin=xmin-(hx1-hx)/2.0;
	  xmax=xmax+(hx1-hx)/2.0;
	}
      else 
	{
	  hy1=dwdim[1]*hx/dwdim[0];
	  ymin=ymin-(hy1-hy)/2.0;
	  ymax=ymax+(hy1-hy)/2.0;
	}
    }
    
  /* Changing min,max and aaint if using log scaling X axis */
  if ((int)strlen(xf) >= 2 && xf[1]=='l' ) 
    {
      /* xaxis */
      if ( xmin >  0)
	{
	  xmax=ceil(log10(xmax));  xmin=floor(log10(xmin));
	}
      else 
	{
	  Scistring("Warning: Can't use Log on X-axis xmin is negative \n");
	  xmax= 1; xmin= 0;
	}
      aaint[0]=1;aaint[1]=inint(xmax-xmin);
    }

  /* Changing ymin,ymax and aaint if using log scaling Y axis */
  if ((int)strlen(xf) >=3  && xf[2]=='l' ) 
    {
      /* y axis */
      if ( ymin > 0 ) 
	{
	  ymax= ceil(log10(ymax)); ymin= floor(log10(ymin));
	}
      else 
	{
	  Scistring(" Can't use Log on y-axis ymin is negative \n");
	  ymax= 1; ymin= 0;
	}
      aaint[2]=1;aaint[3]=inint(ymax-ymin);
    }
  
  /* FRect1 gives the plotting boundaries xmin,ymin,xmax,ymax */
  FRect1[0]=xmin;FRect1[1]=ymin;FRect1[2]=xmax;FRect1[3]=ymax;
  /* interval too small */
  
  if ( Abs(FRect1[0]- FRect1[2]) < 1.e-8 ) 
    {
      FRect1[0] -= 1.e-8;
      FRect1[2] += 1.e-8;
    }
  if ( Abs(FRect1[1]- FRect1[3]) < 1.e-8 ) 
    {
      FRect1[1] -= 1.e-8;
      FRect1[3] += 1.e-8;
    }
  
  /* pretty axes */
  if ( auto_axes == TRUE ) 
    {
      double FRect2[4];
      int i;
      for (i=0; i< 4 ;i++) FRect2[i]=FRect1[i];
      /* change graduation */
      Gr_Rescale_new(&xf[1],FRect2,Xdec,Ydec,&(aaint[0]),&(aaint[2]));
    }
  
  /* Update the current scale */
  
  set_scale(Xgc,"tTtttt",wrect,FRect1,aaint,xf+1,arect);
  
  /* store information about graduation in xtics */
  
  if ( auto_axes )
    {
      for (i=0; i < 3 ; i++ ) Xgc->scales->xtics[i] = Xdec[i];
      for (i=0; i < 3 ; i++ ) Xgc->scales->ytics[i] = Ydec[i];
      Xgc->scales->xtics[3] = aaint[1];
      Xgc->scales->ytics[3] = aaint[3];
    }
  else 
    {
      Xgc->scales->xtics[0] = xmin;
      Xgc->scales->xtics[1] = xmax;
      Xgc->scales->xtics[2] = 0.0;
      Xgc->scales->xtics[3] = aaint[1];

      Xgc->scales->ytics[0] = ymin;
      Xgc->scales->ytics[1] = ymax;
      Xgc->scales->ytics[2] = 0.0;
      Xgc->scales->ytics[3] = aaint[3];
    }
  
  /* Changing back min,max and aaint if using log scaling X axis */
  if ((int)strlen(xf) >= 2 && xf[1]=='l' ) 
    {
      FRect1[0]=exp10(xmin);FRect1[2]=exp10(xmax);
    }
  /* Changing ymin,ymax and aaint if using log scaling Y axis */
  if ((int)strlen(xf) >=3  && xf[2]=='l' )
    {
      FRect1[1]= exp10(ymin);FRect1[3]= exp10(ymax);
    }

#ifdef WITH_GTKGLEXT 
  /* transmit info to opengl */
  if ( Xgc->graphic_engine == &GL_gengine ) 
    {
      nsp_ogl_set_2dview(Xgc);
    }
#endif
  
}


static void nsp_translate_axes(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  P->obj->wrect->R[0] += tr[0];
  P->obj->wrect->R[1] += tr[1];
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_axes(BCG *Xgc,NspGraphic *Obj,double *R)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  Sciprintf("we should get a double here for rho\n");
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_axes(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  P->obj->wrect->R[2] *= alpha[0];
  P->obj->wrect->R[3] *= alpha[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of axes 
 *
 */

static void nsp_getbounds_axes(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  /* get the bound in parent i.e given by wrect : upper-left w,h */
  bounds[0]=P->obj->wrect->R[0]; /* xmin */
  bounds[1]=P->obj->wrect->R[1]-P->obj->wrect->R[3];/* ymin */
  bounds[2]=P->obj->wrect->R[0]+P->obj->wrect->R[2];/* xmax */
  bounds[3]=P->obj->wrect->R[1];/* ymax */
}




static void nsp_axes_link_figure(NspGraphic *G, void *F)
{
  /* link toplevel */
  nsp_graphic_link_figure(G, ((NspFigure *) F)->obj);
  /* link children */
  nsp_list_link_figure(((NspAxes *) G)->obj->children,F);
}


static void nsp_axes_unlink_figure(NspGraphic *G, void *F)
{
  /* link toplevel */
  nsp_graphic_unlink_figure(G,  ((NspFigure *) F)->obj);
  /* link children */
  nsp_list_unlink_figure(((NspAxes *) G)->obj->children,F);
}

static NspList *nsp_axes_children(NspGraphic *Obj)
{
  return  ((NspAxes *) Obj)->obj->children;
}


/* set up the bounds of axes according to objects 
 * already inserted and rect. rect can be NULL when unused.
 * 
 */

void nsp_strf_axes(BCG *Xgc,NspAxes *A,double *rect, char scale)
{
  NspGraphic *G= (NspGraphic *) A;
  /* use strf argument to change the axes */
  switch (scale) 
    {
    case '0': /* no computation, the plot use the previus (or default) scale */
      break;
    case '1': /* from the rect arg */
      A->obj->iso = FALSE;
      A->obj->auto_axis = FALSE;
      break;
    case '7': /* backward compatibility  */
      memcpy(A->obj->rect->R,rect,4*sizeof(double));
      A->obj->iso = FALSE;
      A->obj->auto_axis = FALSE;
      A->obj->fixed = TRUE;
      break;
    case '5': /* enlarged for pretty axes from the rect arg */
      memcpy(A->obj->rect->R,rect,4*sizeof(double));
      A->obj->auto_axis = TRUE;
      A->obj->iso = FALSE;
      A->obj->fixed = TRUE; 
      break;
    case '3': /* built for an isometric scale from the rect arg */
      memcpy(A->obj->rect->R,rect,4*sizeof(double));
      A->obj->iso = TRUE;
      A->obj->auto_axis = TRUE;
      A->obj->fixed = TRUE; 
      break;
    case '2': /* from the min/max of the x, y datas */
      /* could be stored in a cache */
      nsp_axes_compute_inside_bounds(Xgc,G,A->obj->bounds->R);
      A->obj->iso = FALSE;
      A->obj->auto_axis = FALSE;
      A->obj->fixed = FALSE; 
      break;
    case '8': /* backward compatibility  */
      nsp_axes_compute_inside_bounds(Xgc,G,A->obj->bounds->R);
      A->obj->auto_axis = TRUE;
      A->obj->iso = FALSE;
      A->obj->fixed = FALSE; 
      break;
    case '6': /* enlarged for pretty axes from the min/max of the x, y datas */
      nsp_axes_compute_inside_bounds(Xgc,G,A->obj->bounds->R);
      A->obj->auto_axis = TRUE;
      A->obj->iso = TRUE;
      A->obj->fixed = FALSE; 
      break;
    case '4': /* built for an isometric plot from the min/max of the x, y datas */
      nsp_axes_compute_inside_bounds(Xgc,G,A->obj->bounds->R);
      A->obj->iso = TRUE;
      A->obj->auto_axis = TRUE;
      A->obj->fixed = FALSE; 
      break;
    }
  if ( A->obj->fixed ) 
    memcpy(A->obj->frect->R,A->obj->rect->R,4*sizeof(double));
  else
    memcpy(A->obj->frect->R,A->obj->bounds->R,4*sizeof(double));
}


  

void nsp_figure_zoom(BCG *Xgc,NspGraphic *Obj,int *box)
{

  NspObject *Obj1;
  int pt[2]={ (box[0]+box[2])/2, (box[1]+box[3])/2};
  Obj1=nsp_check_pt_axes_or_objs3d(Xgc,pt);
  if ( Obj1 == NULL) return ;
  if ( IsAxes(Obj1) )
    {
      NspAxes *A = (NspAxes *) Obj1;
      double pt1[2],pt2[2];
      /* Sciprintf("Found an axes to be zoomed\n"); */
      nsp_axes_i2f(Xgc,A,box[0],box[1], pt1);
      nsp_axes_i2f(Xgc,A,box[2],box[3], pt2);
      A->obj->zoom=TRUE;
      A->obj->zrect->R[0]=pt1[0]; /* xmin */
      A->obj->zrect->R[1]=pt2[1]; /* ymin */
      A->obj->zrect->R[2]=pt2[0]; /* xmax */
      A->obj->zrect->R[3]=pt1[1]; /* ymax */
    }
  else if ( IsObjs3d(Obj1))
    {
      /* Sciprintf("Found a 3dobj to be zoomed\n"); */
    }
}


void nsp_figure_unzoom(NspGraphic *Obj)
{
  NspList *L;
  Cell *cloc;
  NspFigure *F= (NspFigure *) Obj;
  if ( Obj == NULL ||  !IsFigure((NspObject *) Obj))  return ;

  L= F->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( IsAxes(NSP_OBJECT(G)))
	    { 
	      NspAxes *A = (NspAxes *) G;
	      A->obj->zoom= FALSE;
	    }
	  else if ( IsObjs3d(NSP_OBJECT(G)))
	    {
	      /* NspObjs3d *A = (NspObjs3d *) G; */
	      
	    }
	}
      cloc = cloc->next;
    }
}
