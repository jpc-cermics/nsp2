/* -*- Mode: C -*- */
%%
include-start Axes
/* inserted at the start of include file */
#include <nsp/figure.h>

/**
 * NspAxes:
 * @obj: a #nsp_axes pointer 
 *
 * inherits from #NspGraphics 
 */

%%
include-public Axes

/* inserted at the end of public part of include file */

extern NspAxes * nsp_check_for_axes(BCG *Xgc,const double *wrect) ;
extern void nsp_axes_i2f(nsp_axes *A,int x,int y,double pt[2]);
extern BCG *nsp_check_graphic_context(void);
extern void nsp_list_unlink_figure(NspList *L, nsp_figure *F);
extern int nsp_list_check_figure(NspList *L, nsp_figure *F);
extern void nsp_strf_axes(NspAxes *A,double *rect, char scale);
extern int nsp_axes_insert_child(NspAxes *A, NspGraphic *G, int invalidate);
extern void nsp_axes_invalidate(NspGraphic *G);
extern void nsp_figure_unzoom(NspGraphic *Obj);
extern void nsp_figure_zoom(BCG *Xgc,int *box);
extern void nsp_axes_update_frame_bounds(BCG *Xgc,double *wrect,double *frect,double *arect,
					 int *aaint,int isomode, int auto_axes, char *xf);
extern void nsp_draw_colorbar(BCG *Xgc,nsp_axes *P,double vmin , double vmax, int *colminmax);
/* XXX */
extern int gr_compute_ticks(double *xminv,double *xmaxv,double *grads, int *ngrads);
extern NspAxes *nsp_check_for_current_axes(void);
extern NspAxes * nsp_check_for_axes_in_figure(NspFigure *F,const double *wrect);


%%
include-private Axes

/* inserted in the private part of include file
 * of axes.h
 */

static void nsp_draw_axes(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_axes(NspGraphic *o,const double *tr);
static void nsp_rotate_axes(NspGraphic *o,double *R);
static void nsp_scale_axes(NspGraphic *o,double *alpha);
static int nsp_getbounds_axes(NspGraphic *o,double *bounds);
static void nsp_axes_compute_inside_bounds(NspGraphic *Obj,double *bounds);
static void nsp_axes_link_figure(NspGraphic *G, void *F,void *A);
static void nsp_axes_unlink_figure(NspGraphic *G, void *F);
static NspList *nsp_axes_children(NspGraphic *Obj);
static void gr_rescale_new(char *logf, double *FRectI, int *Xdec, int *Ydec, int *xnax, int *ynax);
static int getticks(double xmin,double xmax,double *grads,int *start);

/* requested for nsp_gcscale */

static void nsp_destroy_nsp_gcscale(nsp_gcscale *locks,NspAxes *H);
static int nsp_print_nsp_gcscale(int indent,nsp_gcscale *locks,NspAxes *M);
static int nsp_check_nsp_gcscale(nsp_gcscale *locks,NspAxes *M);
static int nsp_nsp_gcscale_full_copy(NspAxes *C,nsp_gcscale *locks,NspAxes *M);
static int nsp_eq_nsp_gcscale(nsp_gcscale *scale1, nsp_gcscale *scale2);
static void nsp_init_nsp_gcscale(nsp_gcscale *scale);

%%
headers
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h> 
#include <nsp/objs3d.h>
#include <nsp/curve.h>

#ifdef  WITH_GTKGLEXT 
extern Gengine GL_gengine;
#endif 

%%
init 

Init portion 

%%
override-type  Axes
  /* inserted verbatim in the type definition */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_axes;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_axes ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_axes  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_axes  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_axes  ;
  ((NspTypeGraphic *) type->surtype)->link_figure = nsp_axes_link_figure; 
  ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_axes_unlink_figure; 
  ((NspTypeGraphic *) type->surtype)->children = (children_func *) nsp_axes_children ;
  ((NspTypeGraphic *) type->surtype)->invalidate = nsp_axes_invalidate;

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-attr Axes.rho 
/* override set rho */
static int _wrap_axes_set_rho(void *self, char *attr, NspObject *O)
{
  double rho;
  if ( DoubleScalar(O,&rho) == FAIL) return FAIL;

  if ( ((NspAxes *) self)->obj->rho != rho) 
    {
      ((NspAxes *) self)->obj->rho = rho;
      nsp_axes_invalidate((NspGraphic *) self);
    }
  return OK;
}

%%
override-attr Axes.children

/* here we override get_obj  and set_obj 
 * we want a get to be followed by a set to check that 
 * inserted value is correct thus we use copy = TRUE.
 */

static NspObject *_wrap_axes_get_obj_children(void *self,char *attr, int *copy)
{
  NspList *ret;
  *copy = TRUE; 
  ret = ((NspList*) ((NspAxes *) self)->obj->children);
  return (NspObject *) ret;
}

/* in this function we can check that val is correct before 
 * setting the field with val. return FAIL if val is incorrect.
 */

static int _wrap_axes_set_obj_children(void *self,NspObject *val)
{
  if ( ! IsList(val) ) return FAIL;
  if ( nsp_list_check_figure((NspList *) val, ((NspGraphic *) self)->obj->Fig) == FAIL) return FAIL;
  if (((NspAxes *) self)->obj->children != NULL ) 
    {
      if ( ((NspGraphic *) self)->obj->Fig != NULL) 
	nsp_list_unlink_figure(((NspAxes *) self)->obj->children,((NspGraphic *) self)->obj->Fig);
      nsp_list_destroy(((NspAxes *) self)->obj->children);
    }
  ((NspAxes *) self)->obj->children =  (NspList *) val;
  nsp_axes_compute_inside_bounds(self,((NspAxes *) self)->obj->bounds->R);
  if ( ((NspGraphic *) self)->obj->Fig != NULL) 
    nsp_list_link_figure((NspList *) val,((NspGraphic *) self)->obj->Fig,((NspAxes *) self)->obj );
  return OK;
}

static int _wrap_axes_set_children(void *self, char *attr, NspObject *O)
{
  NspList *children;
  if ( ! IsList(O) ) return FAIL;
  if ((children = (NspList *) nsp_object_copy_and_name(attr,O)) == NULLLIST) return FAIL;
  if (((NspAxes *) self)->obj->children != NULL ) 
    {
      if ( ((NspGraphic *) self)->obj->Fig != NULL) 
	nsp_list_unlink_figure(((NspAxes *) self)->obj->children,((NspGraphic *) self)->obj->Fig);
      nsp_list_destroy(((NspAxes *) self)->obj->children);
    }
  ((NspAxes *) self)->obj->children= children;
  nsp_axes_compute_inside_bounds(self,((NspAxes *) self)->obj->bounds->R);
  if ( ((NspGraphic *) self)->obj->Fig != NULL) 
    nsp_list_link_figure((NspList *) O,((NspGraphic *) self)->obj->Fig,((NspAxes *) self)->obj);
  return OK;
}


%%
override nsp_extractelts_axes kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_axes(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_axes kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_axes(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */
static int nsp_axes_legends(BCG *Xgc,NspAxes *axe);

static void nsp_draw_axes(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  nsp_gcscale scale_keep = *Xgc->scales;
  int lw, font[2];
  GdkRectangle clip, clip_axe , r2, rect_a;
  char xf[]="onn";
  double *wrect1, inside_bounds[4];
  int aaint[4]={10,2,10,2};
  Cell *cloc;
  NspList *L;
  NspAxes *P = (NspAxes *) Obj;
  if ( ((NspGraphic *) P)->obj->show == FALSE ) return;

  if ( rect != NULL) rect_a = *rect;
  
  /* get the axe bounding rectangle */

  if ( P->obj->top == TRUE ) 
    {
      /* top level axe 
       * P->obj->wrect gives the position in window as proportions
       */
      int wdim[2];
      Xgc->graphic_engine->xget_windowdim(Xgc,wdim,wdim+1);
      clip_axe.x=P->obj->wrect->R[0]*wdim[0];
      clip_axe.y=P->obj->wrect->R[1]*wdim[1];
      clip_axe.width=P->obj->wrect->R[2]*wdim[0];
      clip_axe.height=P->obj->wrect->R[3]*wdim[1];
    }
  else
    {
      /* non top level axe 
       * P->obj->wrect gives the position in father (up,left,w,h)
       */
      nsp_axes *A = ((NspGraphic *) P)->obj->Axe;
      scale_f2i(&A->scale,P->obj->wrect->R,P->obj->wrect->R+1,&clip_axe.x,&clip_axe.y,1);
      length_scale_f2i(&A->scale,P->obj->wrect->R+2,P->obj->wrect->R+3,
		       &clip_axe.width,&clip_axe.height,1);
    }
  
  if ( rect != NULL) 
    {
      /*
       * check if we are in the draw zone given by rect
       */
      if ( ! gdk_rectangle_intersect(&rect_a,&clip_axe,&r2)) return;
    }
  
  if ( P->obj->top == TRUE ) 
    {
      /* This is a top level axes, wrect gives the axes position in the 
       * enclosing graphic window. 
       */
      set_scale(Xgc->scales,NULL,P->obj->wrect->R,NULL,NULL,NULL,P->obj->arect->R);
      wrect1= P->obj->wrect->R;
    }
  else 
    {
      nsp_axes *A = ((NspGraphic *) P)->obj->Axe;
      double *ARect = A->arect->R, *FRect = A->frect->R, WRect1[4];
      /* This is not a top level axes, we draw its enclosing rectangle 
       * if alpha is non nul we should draw a rotated rectangle
       */
      Xgc->graphic_engine->scale->drawrectangle(Xgc,P->obj->wrect->R);
      /* wrect->R is [left,up,w,h] 
       * we need to compute wrect->R in term on window/proportions 
       */
      WRect1[0]= ARect[0]+(1-ARect[0]-ARect[2])*(P->obj->wrect->R[0]-FRect[0])/(FRect[2]-FRect[0]);
      WRect1[1]= ARect[1]+(1-ARect[1]-ARect[3])*(1- (P->obj->wrect->R[1]-FRect[1])/(FRect[3]-FRect[1]));
      WRect1[2]= (1-ARect[0]-ARect[2])*(P->obj->wrect->R[2])/(FRect[2]-FRect[0]);
      WRect1[3]= (1-ARect[1]-ARect[3])*(P->obj->wrect->R[3])/(FRect[3]-FRect[1]);
      wrect1 = WRect1;
      Xgc->scales->cosa= cos( P->obj->rho);
      Xgc->scales->sina= sin( P->obj->rho);
    }

  /* update frect 
   *
   */

  if ( P->obj->fixed == FALSE ) 
    {
      /* actualize the inside bounds with objects 
       * this should not be done systematically 
       */
      nsp_axes_compute_inside_bounds(Obj,inside_bounds);
      /*
       * update frect with inside_bounds 
       */
      memcpy(P->obj->frect->R,inside_bounds,4*sizeof(double));
    }
  else
    {
      /* bounds of the plot are given by rect 
       */
      memcpy(P->obj->frect->R,P->obj->rect->R,4*sizeof(double));
    }

  if ( P->obj->zoom == TRUE )
    {
      /* when zooming zrect is used 
       */
      memcpy(P->obj->frect->R,P->obj->zrect->R,4*sizeof(double));
    }
  
  if ( P->obj->xlog == TRUE ) xf[1]= 'l';
  if ( P->obj->ylog == TRUE ) xf[2]= 'l';
  
  nsp_axes_update_frame_bounds(Xgc,wrect1,
			       P->obj->frect->R,
			       P->obj->arect->R,
			       aaint,
			       P->obj->iso,
			       P->obj->auto_axis,
			       xf);
  /* save the scales */

  P->obj->scale = *Xgc->scales;
  nsp_send_scale_2D_to_opengl(Xgc);
  
  /* clip the inside rectangle of the  axe
   * Note that clipping is wrong when an axe is rotated 
   * since clipping only works with rectangles 
   */
  
  clip = (  P->obj->clip == TRUE ) ?  Xgc->scales->Irect : clip_axe;
  if ( rect != NULL ) gdk_rectangle_intersect(&rect_a,&clip,&clip);
  
  Xgc->graphic_engine->xset_clip(Xgc, &clip);
  
  /* draw elements 
   * we can limit the drawing to clip 
   */

  L = P->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->draw(Xgc,G,&clip,data);
	}
      cloc = cloc->next;
    }
  
  /* clip the enclosing rectangle of the  axe
   */
  
  clip = clip_axe;
  if ( rect != NULL ) gdk_rectangle_intersect( &rect_a, &clip, &clip);
  
  Xgc->graphic_engine->xset_clip(Xgc, &clip);
  
  Xgc->graphic_engine->xget_font(Xgc,font, FALSE);
  Xgc->graphic_engine->xset_font(Xgc,font[0], P->obj->font_size, FALSE);
  lw = Xgc->graphic_engine->xset_thickness(Xgc, P->obj->line_width);
  
  /* draw axes, ticks */
  axis_draw(Xgc,P->obj->axes+'0', (P->obj->auto_axis) ? '5': '1', P->obj->grid);
  /* legends */
  nsp_axes_legends(Xgc,P);
  /* title if present */
  if ( P->obj->title[0] != '\0') 
    Xgc->graphic_engine->scale->displaystringa(Xgc,P->obj->title,1);
  if ( P->obj->x[0] != '\0') 
    Xgc->graphic_engine->scale->displaystringa(Xgc,P->obj->x,2);
  if ( P->obj->y[0] != '\0') 
    Xgc->graphic_engine->scale->displaystringa(Xgc,P->obj->y,3);
  
  Xgc->graphic_engine->xset_font(Xgc,font[0],font[1], FALSE);
  Xgc->graphic_engine->xset_thickness(Xgc, lw);

  /* back to previous clip zone */

  if ( rect != NULL ) 
    {
      Xgc->graphic_engine->xset_clip(Xgc,rect);
    }
  else
    {
      Xgc->graphic_engine->xset_unclip(Xgc);
    }
  
  /* scale back */
  *Xgc->scales = scale_keep;
}



/* to be synchronized with the above function 
 *
 */

void nsp_axes_i2f(nsp_axes *A,int x,int y,double pt[2])
{
  scale_i2f(&A->scale,pt,pt+1,&x,&y,1);
}

/* draw legends from information contained in axe 
 */

static int nsp_axes_legends(BCG *Xgc,NspAxes *axe)
{
  int style[56],count=0,legend_pos=1;
  NspSMatrix *legends=NULL,*legend=NULL;
  /* get and collect the legends */
  NspList *L = axe->obj->children;
  Cell *cloc = L->first ;
  legend_pos = axe->obj->lpos;
  legends = nsp_smatrix_create_with_length(NVOID,0,0,-1);
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ && IsCurve(cloc->O) ) 
	{
	  NspCurve *cv = (NspCurve *) cloc->O;
	  if (cv->obj->legend[0] != '\0' ) 
	    {
	      nsp_row_smatrix_append_string(legends,cv->obj->legend);
	      style[count++]= cv->obj->color;
	      if (count >= 56 ) break; 
	    }
	}
      cloc = cloc->next;
    }
  if ( count != 0) 
    {
      legend = nsp_smatrix_row_concat(legends,"@",1);
      if (legend != NULL) 
	nsp_legends(Xgc,legend_pos,legends->mn,style,legend->S[0],"@"); 
    }
  if ( legend != NULL) nsp_smatrix_destroy(legend);
  if ( legends != NULL) nsp_smatrix_destroy(legends);
  return OK;
}


/* compute the bounds of the set of objects countained in the 
 * axes 
 */

static void nsp_axes_compute_inside_bounds(NspGraphic *Obj,double *bounds)
{
  double l_bounds[4];
  Cell *cloc;
  NspList *L;
  NspAxes *P = (NspAxes *) Obj;
  L = P->obj->children;
  cloc = L->first ;
  
  if ( cloc == NULLCELL) 
    {
      bounds[0]=bounds[1]=0;
      bounds[2]=bounds[3]=0;
      return;
    }
  
  bounds[0]=bounds[1]=LARGEST_REAL;
  bounds[2]=bounds[3]=-LARGEST_REAL;

  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( G->type->bounds(G,l_bounds) == TRUE ) 
	    {
	      if ( l_bounds[0] < bounds[0] ) 
		bounds[0]= l_bounds[0];
	      if (  l_bounds[2] > bounds[2])
		bounds[2]= l_bounds[2];
	      if ( l_bounds[1] < bounds[1] ) 
		bounds[1]= l_bounds[1];
	      if (  l_bounds[3] > bounds[3])
		bounds[3]= l_bounds[3];
	    }
	}
      cloc = cloc->next;
    }
}


void nsp_axes_update_frame_bounds(BCG *Xgc,double *wrect,double *frect,double *arect,
				  int *aaint,int isomode,int auto_axes, char *xf)
{
  double FRect1[4];
  int Xdec[3],Ydec[3],i;
  double xmin=0.0,xmax=10.0,ymin= 0.0,ymax= 10.0;
  int wdim[2];
  xmin=Min(frect[0],frect[2]);
  ymin=Min(frect[1],frect[3]); 
  xmax=Max(frect[0],frect[2]);
  ymax=Max(frect[1],frect[3]); 

  Xgc->graphic_engine->xget_windowdim(Xgc,wdim,wdim+1);
  
  /*
   * modify computed min,max if isoview requested 
   */
  
  if ( isomode == TRUE ) 
    {
      /* code by S. Mottelet 11/7/2000 */
      double hx=xmax-xmin,hy=ymax-ymin,hx1,hy1, dwdim[2];
      dwdim[0]=linint((double)wdim[0] * (wrect[2]*(1.0-arect[0]-arect[1]))); 
      dwdim[1]=linint((double)wdim[1] * (wrect[3]*(1.0-arect[2]-arect[3]))); 
      if ( hx/dwdim[0] < hy/dwdim[1] ) 
	{
	  hx1=dwdim[0]*hy/dwdim[1];
	  xmin=xmin-(hx1-hx)/2.0;
	  xmax=xmax+(hx1-hx)/2.0;
	}
      else 
	{
	  hy1=dwdim[1]*hx/dwdim[0];
	  ymin=ymin-(hy1-hy)/2.0;
	  ymax=ymax+(hy1-hy)/2.0;
	}
    }
  
  /* Changing min,max and aaint if using log scaling X axis */
  if ((int)strlen(xf) >= 2 && xf[1]=='l' ) 
    {
      /* xaxis */
      if ( xmin >  0)
	{
	  xmax=ceil(log10(xmax));  xmin=floor(log10(xmin));
	}
      else 
	{
	  Scistring("Warning: Can't use Log on X-axis xmin is negative \n");
	  xmax= 1; xmin= 0;
	}
      aaint[0]=1;aaint[1]=inint(xmax-xmin);
    }

  /* Changing ymin,ymax and aaint if using log scaling Y axis */
  if ((int)strlen(xf) >=3  && xf[2]=='l' ) 
    {
      /* y axis */
      if ( ymin > 0 ) 
	{
	  ymax= ceil(log10(ymax)); ymin= floor(log10(ymin));
	}
      else 
	{
	  Scistring(" Can't use Log on y-axis ymin is negative \n");
	  ymax= 1; ymin= 0;
	}
      aaint[2]=1;aaint[3]=inint(ymax-ymin);
    }
  
  /* FRect1 gives the plotting boundaries xmin,ymin,xmax,ymax */
  FRect1[0]=xmin;FRect1[1]=ymin;FRect1[2]=xmax;FRect1[3]=ymax;
  /* interval too small */
  
  if ( Abs(FRect1[0]- FRect1[2]) < 1.e-8 ) 
    {
      FRect1[0] -= 1.e-8;
      FRect1[2] += 1.e-8;
    }
  if ( Abs(FRect1[1]- FRect1[3]) < 1.e-8 ) 
    {
      FRect1[1] -= 1.e-8;
      FRect1[3] += 1.e-8;
    }
  
  /* pretty axes */
  if ( auto_axes == TRUE ) 
    {
      double FRect2[4];
      for (i=0; i< 4 ;i++) FRect2[i]=FRect1[i];
      /* change graduation */
      gr_rescale_new(&xf[1],FRect2,Xdec,Ydec,&(aaint[0]),&(aaint[2]));
    }
  
  /* Update the current scale */
  
  set_scale(Xgc->scales,wdim,wrect,FRect1,aaint,xf+1,arect);
  
  /* store information about graduation in xtics */
  
  if ( auto_axes )
    {
      for (i=0; i < 3 ; i++ ) Xgc->scales->xtics[i] = Xdec[i];
      for (i=0; i < 3 ; i++ ) Xgc->scales->ytics[i] = Ydec[i];
      Xgc->scales->xtics[3] = aaint[1];
      Xgc->scales->ytics[3] = aaint[3];
    }
  else 
    {
      Xgc->scales->xtics[0] = xmin;
      Xgc->scales->xtics[1] = xmax;
      Xgc->scales->xtics[2] = 0.0;
      Xgc->scales->xtics[3] = aaint[1];

      Xgc->scales->ytics[0] = ymin;
      Xgc->scales->ytics[1] = ymax;
      Xgc->scales->ytics[2] = 0.0;
      Xgc->scales->ytics[3] = aaint[3];
    }
  
  /* Changing back min,max and aaint if using log scaling X axis */
  if ((int)strlen(xf) >= 2 && xf[1]=='l' ) 
    {
      FRect1[0]=exp10(xmin);FRect1[2]=exp10(xmax);
    }
  /* Changing ymin,ymax and aaint if using log scaling Y axis */
  if ((int)strlen(xf) >=3  && xf[2]=='l' )
    {
      FRect1[1]= exp10(ymin);FRect1[3]= exp10(ymax);
    }

#ifdef WITH_GTKGLEXT 
  /* transmit info to opengl */
  if ( Xgc->graphic_engine == &GL_gengine ) 
    {
      nsp_ogl_set_2dview(Xgc);
    }
#endif
  
}


static void nsp_translate_axes(NspGraphic *Obj,const double *tr)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  /* only valid for non top axes */
  P->obj->wrect->R[0] += tr[0];
  P->obj->wrect->R[1] += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_axes(NspGraphic *Obj,double *R)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  Sciprintf("we should get a double here for rho\n");
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_axes(NspGraphic *Obj,double *alpha)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE) return ;
  P->obj->wrect->R[2] *= alpha[0];
  P->obj->wrect->R[3] *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of axes 
 *
 */

static int nsp_getbounds_axes(NspGraphic *Obj,double *bounds)
{
  NspAxes *P = (NspAxes *) Obj;
  if ( P->obj->top == TRUE)
    {
      nsp_figure *Fig = (((NspGraphic *) Obj)->obj->Fig);
      BCG *Xgc= Fig->Xgc;
      /* tolevel axe: we need the window dimension */
      int wdim[2];
      Xgc->graphic_engine->xget_windowdim(Xgc,wdim,wdim+1);
      bounds[0]= P->obj->wrect->R[0]*wdim[0];
      bounds[1]= (P->obj->wrect->R[1]- P->obj->wrect->R[3])*wdim[1];
      bounds[2]= (P->obj->wrect->R[0]+P->obj->wrect->R[2])*wdim[0];
      bounds[3]= P->obj->wrect->R[1]*wdim[1];
    }
  else
    {
      /* get the bound in parent i.e given by wrect : upper-left w,h */
      bounds[0]=P->obj->wrect->R[0]; /* xmin */
      bounds[1]=P->obj->wrect->R[1]-P->obj->wrect->R[3];/* ymin */
      bounds[2]=P->obj->wrect->R[0]+P->obj->wrect->R[2];/* xmax */
      bounds[3]=P->obj->wrect->R[1];/* ymax */
    }
  return TRUE;
}

static void nsp_axes_link_figure(NspGraphic *G, void *F, void *A)
{
  /* link toplevel */
  if ( ((NspAxes *) G)->obj->top == TRUE)
    nsp_graphic_link_figure(G, F, ((NspAxes *) G)->obj);
  else
    nsp_graphic_link_figure(G, F, A);
  /* link children */
  nsp_list_link_figure(((NspAxes *) G)->obj->children,F, ((NspAxes *) G)->obj);
}


static void nsp_axes_unlink_figure(NspGraphic *G, void *F)
{
  /* link toplevel */
  nsp_graphic_unlink_figure(G,F);
  /* link children */
  nsp_list_unlink_figure(((NspAxes *) G)->obj->children,F);
}

static NspList *nsp_axes_children(NspGraphic *Obj)
{
  return  ((NspAxes *) Obj)->obj->children;
}


/* set up the bounds of axes according to objects 
 * already inserted and rect. rect can be NULL when unused.
 * 
 */

void nsp_strf_axes(NspAxes *A,double *rect, char scale)
{
  NspGraphic *G= (NspGraphic *) A;
  /* use strf argument to change the axes */
  switch (scale) 
    {
    case '0': /* no computation, the plot use the previus (or default) scale */
      break;
    case '1': /* from the rect arg */
      nsp_axes_compute_inside_bounds(G,A->obj->bounds->R);
      A->obj->iso = FALSE;
      A->obj->auto_axis = FALSE;
      break;
    case '7': /* backward compatibility  */
      memcpy(A->obj->rect->R,rect,4*sizeof(double));
      A->obj->iso = FALSE;
      A->obj->auto_axis = FALSE;
      A->obj->fixed = TRUE;
      break;
    case '5': /* enlarged for pretty axes from the rect arg */
      memcpy(A->obj->rect->R,rect,4*sizeof(double));
      A->obj->auto_axis = TRUE;
      A->obj->iso = FALSE;
      A->obj->fixed = TRUE; 
      break;
    case '3': /* built for an isometric scale from the rect arg */
      memcpy(A->obj->rect->R,rect,4*sizeof(double));
      A->obj->iso = TRUE;
      A->obj->auto_axis = TRUE;
      A->obj->fixed = TRUE; 
      break;
    case '2': /* from the min/max of the x, y datas */
      /* could be stored in a cache */
      nsp_axes_compute_inside_bounds(G,A->obj->bounds->R);
      A->obj->iso = FALSE;
      A->obj->auto_axis = FALSE;
      A->obj->fixed = FALSE; 
      break;
    case '8': /* backward compatibility  */
      nsp_axes_compute_inside_bounds(G,A->obj->bounds->R);
      A->obj->auto_axis = TRUE;
      A->obj->iso = FALSE;
      A->obj->fixed = FALSE; 
      break;
    case '6': /* enlarged for pretty axes from the min/max of the x, y datas */
      nsp_axes_compute_inside_bounds(G,A->obj->bounds->R);
      A->obj->auto_axis = TRUE;
      A->obj->iso = TRUE;
      A->obj->fixed = FALSE; 
      break;
    case '4': /* built for an isometric plot from the min/max of the x, y datas */
      nsp_axes_compute_inside_bounds(G,A->obj->bounds->R);
      A->obj->iso = TRUE;
      A->obj->auto_axis = TRUE;
      A->obj->fixed = FALSE; 
      break;
    }
  if ( A->obj->fixed ) 
    memcpy(A->obj->frect->R,A->obj->rect->R,4*sizeof(double));
  else
    memcpy(A->obj->frect->R,A->obj->bounds->R,4*sizeof(double));
}


/**
 * nsp_figure_zoom:
 * @Xgc: 
 * @box: 
 * 
 * select the axes to be zoomed by considering the 
 * center of the given @box. Then set the zoom 
 * scales on the axe and invalidate the axe. 
 *
 **/

void nsp_figure_zoom(BCG *Xgc,int *box)
{

  NspObject *Obj1;
  int pt[2]={ (box[0]+box[2])/2, (box[1]+box[3])/2};
  Obj1=nsp_check_pt_axes_or_objs3d(Xgc,pt);
  if ( Obj1 == NULL) return ;
  if ( IsAxes(Obj1) )
    {
      NspAxes *A = (NspAxes *) Obj1;
      NspGraphic *G = (NspGraphic *) Obj1;
      double pt1[2],pt2[2];
      /* Sciprintf("Found an axes to be zoomed\n"); */
      nsp_axes_i2f(A->obj,box[0],box[1], pt1);
      nsp_axes_i2f(A->obj,box[2],box[3], pt2);
      A->obj->zoom=TRUE;
      A->obj->zrect->R[0]=pt1[0]; /* xmin */
      A->obj->zrect->R[1]=pt2[1]; /* ymin */
      A->obj->zrect->R[2]=pt2[0]; /* xmax */
      A->obj->zrect->R[3]=pt1[1]; /* ymax */
      G->type->invalidate(G);
    }
  else if ( IsObjs3d(Obj1))
    {
      /* Sciprintf("Found a 3dobj to be zoomed\n"); */
    }
}


/**
 * nsp_figure_unzoom:
 * @Obj: a #NspGraphic
 * 
 * change the zoom flag for all the axes 
 * found in figure @Obj and invalidate the 
 * axes if necessary.
 * 
 **/

void nsp_figure_unzoom(NspGraphic *Obj)
{
  NspList *L;
  Cell *cloc;
  NspFigure *F= (NspFigure *) Obj;
  if ( Obj == NULL ||  !IsFigure((NspObject *) Obj))  return ;

  L= F->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( IsAxes(NSP_OBJECT(G)))
	    { 
	      NspAxes *A = (NspAxes *) G;
	      if ( A->obj->zoom == TRUE)
		{
		  A->obj->zoom= FALSE;
		  G->type->invalidate(G);
		}

	    }
	  else if ( IsObjs3d(NSP_OBJECT(G)))
	    {
	      /* NspObjs3d *A = (NspObjs3d *) G; */
	      
	    }
	}
      cloc = cloc->next;
    }
}


/*
 * here we compute new axis graduation 
 * but without changing FRect. The computed graduation does not 
 * necessary start at FRect boundaries but inside. 
 */


static void gr_rescale_new(char *logf, double *FRectI, int *Xdec, int *Ydec, int *xnax, int *ynax)
{
  int i;
  double FRectO[4];
  double xtest;
  if (logf[0] == 'n') 
    {
      /* avoid infinite loop with nans */
      if ( isnan(FRectI[0]) || isnan(FRectI[2]) ) { FRectI[0]=-1;FRectI[1]=1;}

      if ( FRectI[0]*FRectI[2] < 0 ) 
	{
	  double xmin,xmax;
	  /* if zero is inside frect we try to find a graduation with zero inside */
	  xmin = Min(FRectI[0],-FRectI[2]);
	  xmax = Max(FRectI[2],-FRectI[0]);
	  graduate(&xmin,&xmax,FRectO,FRectO+2,xnax,xnax+1,Xdec,Xdec+1,Xdec+2);
	}
      else
	{
	  graduate(FRectI,FRectI+2,FRectO,FRectO+2,xnax,xnax+1,Xdec,Xdec+1,Xdec+2);
	}
      /* we do not change FRectI but change Xdec to eliminate points outside FRectI
       * The problem is that proceding that way we can obtain just one point.
       */
      i=0;
      while (1) { 
	xtest= exp10((double)Xdec[2])*(Xdec[0] + i*(Xdec[1]-Xdec[0])/xnax[1]); 
	if ( xtest >= FRectI[0] ) break;
	i++;
      }
      Xdec[0] += i*(Xdec[1]-Xdec[0])/xnax[1];
      xnax[1] -= i;
      /* eliminate extra values at the end  */
      i=0;
      while (1) 
	{
	  xtest = exp10((double)Xdec[2])*(Xdec[0]+(xnax[1]-i)*(Xdec[1]-Xdec[0])/xnax[1]);
	  if ( xtest <=  FRectI[2] ) break;
	  i++;
	}
      Xdec[1] -= i*(Xdec[1]-Xdec[0])/xnax[1];
      xnax[1] -= i;
    }
  else
    {
      /* logscale */
      Xdec[0]=inint(FRectI[0]);
      Xdec[1]=inint(FRectI[2]);
      Xdec[2]=0;
    }
  if (logf[1] == 'n') 
    {
      /* avoid infinite loop with nans */
      if ( isnan(FRectI[1]) || isnan(FRectI[3]) ) { FRectI[1]=-1;FRectI[3]=1;}

      if ( FRectI[1]*FRectI[3] < 0 ) 
	{
	  double ymin,ymax;
	  /* if zero is inside frect we try to find a graduation with zero inside */
	  ymin = Min(FRectI[1],-FRectI[3]);
	  ymax = Max(FRectI[3],-FRectI[1]);
	  graduate(&ymin,&ymax,FRectO+1,FRectO+3,ynax,ynax+1,Ydec,Ydec+1,Ydec+2);
	}
      else
	{
	  graduate(FRectI+1,FRectI+3,FRectO+1,FRectO+3,ynax,ynax+1,Ydec,Ydec+1,Ydec+2);
	}

      /* we do not change FRectI but change Xdec to eliminate points outside FRectI
       * The problem is that proceding that way we can obtain just one point.
       */
      i=0;
      while (1)
	{
	  xtest = exp10(Ydec[2])*(Ydec[0] + i*(Ydec[1]-Ydec[0])/ynax[1]);
	  if ( xtest >= FRectI[1] ) break;
	  i++;
	}
      Ydec[0] += i*(Ydec[1]-Ydec[0])/ynax[1];
      ynax[1] -= i;
      /* eliminate extra values at the end  */
      i=0;
      while (1)
	{
	  xtest = exp10(Ydec[2])*(Ydec[0]+(ynax[1]-i)*(Ydec[1]-Ydec[0])/ynax[1]);
	  if ( xtest <=  FRectI[3] ) break;
	  i++;
	}
      Ydec[1] -= i*(Ydec[1]-Ydec[0])/ynax[1];
      ynax[1] -= i;
    }
  else
    {
      /* logscale */
      Ydec[0]=inint(FRectI[1]);Ydec[1]=inint(FRectI[3]);Ydec[2]=0;
    }
}


/* requested for nsp_gcscale
 *
 */

static void  nsp_destroy_nsp_gcscale(nsp_gcscale *scales,NspAxes *H)
{
  return;
}


static int nsp_print_nsp_gcscale(int indent,nsp_gcscale *locks,NspAxes *M)
{
  return OK;
}

static int nsp_check_nsp_gcscale(nsp_gcscale *locks,NspAxes *M)
{
  return OK;
}

static int nsp_nsp_gcscale_full_copy(NspAxes *C,nsp_gcscale *scale,NspAxes *M)
{
  C->obj->scale = *scale;
  return OK;
}

static int nsp_eq_nsp_gcscale(nsp_gcscale *scale1, nsp_gcscale *scale2)
{
  /* XXX */
  return TRUE; 
}

static void nsp_init_nsp_gcscale(nsp_gcscale *scale)
{
  nsp_scale_default(scale);
}

/**
 * nsp_axes_insert_child:
 * @A: a #NspAxes
 * @G: a #NspGraphic 
 * 
 * inserts @G in the given axe @A. The bounds 
 * of the axes are updated acordingly and an 
 * invalidate operation is raised on @G if @invalidate 
 * is true.
 * 
 * Returns: %OK or %FAIL
 **/

int nsp_axes_insert_child(NspAxes *A, NspGraphic *G, int invalidate)
{
  if ( nsp_list_end_insert(A->obj->children,(NspObject *) G )== FAIL)
    return FAIL;
  /* call the link_figure method */
  G->type->link_figure( G,((NspGraphic *) A)->obj->Fig,A->obj);
  /* updates the bounds of the axe */
  nsp_axes_compute_inside_bounds((NspGraphic *) A,A->obj->bounds->R);
  /* raise an invalidate operation */
  if ( invalidate ) nsp_graphic_invalidate((NspGraphic *) G);
  return OK;
}


/**
 * nsp_axes_invalidate:
 * @G: 
 * 
 * invalidate the drawing region associated to an axes object. 
 * 
 **/

void nsp_axes_invalidate(NspGraphic *G)
{
  NspAxes *P = (NspAxes *) G;
  if ( P->obj->top == TRUE)
    {
      gint rect[4]; /* like a GdkRectangle */
      int wdim[2];
      nsp_figure *F = G->obj->Fig;
      BCG *Xgc;
      if ( F == NULL ) return ;
      if ((Xgc= F->Xgc) == NULL) return ;
      if ( F->draw_now== FALSE) return;
      if ( G->obj->show == FALSE ) return;
      Xgc->graphic_engine->xget_windowdim(Xgc,wdim,wdim+1);
      rect[0]= P->obj->wrect->R[0]*wdim[0];
      rect[1]= P->obj->wrect->R[1]*wdim[1];
      rect[2]= P->obj->wrect->R[2]*wdim[0];
      rect[3]= P->obj->wrect->R[3]*wdim[1];
      Xgc->graphic_engine->invalidate(Xgc,rect);
    }
  else
    {
      return nsp_graphic_invalidate(G);
    }
}





void nsp_draw_colorbar(BCG *Xgc,nsp_axes *P,double vmin , double vmax, int *colminmax)
{
  double grads[20], axrect[4], hr;
  int ntags,start, rect[4],color,i,cpat, wdim[2];
  int nb_colors, rrect[4];
  int last = Xgc->graphic_engine->xget_last(Xgc);
  int clip[5];
  GdkRectangle rclip;
  
  Xgc->graphic_engine->xget_windowdim(Xgc,wdim,wdim+1);
  nb_colors = colminmax[1] - colminmax[0]+1;
  
  /* frame rectangle */
  axrect[0]=P->wrect->R[0]*wdim[0];
  axrect[1]=P->wrect->R[1]*wdim[1];
  axrect[2]=P->wrect->R[2]*wdim[0];
  axrect[3]=P->wrect->R[3]*wdim[1];
  /* right margin rectangle */
  rrect[0]= axrect[0]+axrect[2]*(1-P->arect->R[1]);
  rrect[1]= axrect[1]+axrect[3]*(P->arect->R[2]);
  rrect[2]= axrect[2]*(P->arect->R[1]);
  rrect[3]= axrect[3]*(1 - P->arect->R[2] -P->arect->R[3]);

  Xgc->graphic_engine->xget_clip(Xgc,clip);
  rclip.x = rrect[0];
  rclip.y = rrect[1]-10;
  rclip.width = rrect[2];
  rclip.height = rrect[3]+20;
  Xgc->graphic_engine->xset_clip(Xgc,&rclip);
  
  /* colorbar rectangle */
  cpat = Xgc->graphic_engine->xset_pattern(Xgc,last+1);
  rect[0]=rrect[0]+4;
  rect[1]=rrect[1];
  rect[2]=rrect[2]/4;
  hr= rrect[3]/(double) nb_colors;
  rect[3]=hr; 
  color= colminmax[1];
  for (i = 0 ; i < nb_colors ; i++)
    {
      rect[1] = rrect[1]+ i*hr ;
      rect[3] = rrect[1]+ (i+1)*hr - rect[1];
      Xgc->graphic_engine->xset_pattern(Xgc,color);
      Xgc->graphic_engine->fillrectangle(Xgc,rect);
      color--;
    }
  
  /* switch to black */
  Xgc->graphic_engine->xset_pattern(Xgc,last+1);
  rect[1]=rrect[1];
  rect[3]=(nb_colors)*hr;
  Xgc->graphic_engine->drawrectangle(Xgc,rect);
  
  ntags = getticks(vmin,vmax,grads,&start);
  
  for ( i = 0 ; i < ntags ; i++ )
    {
      int srect[4];
      int y;
      double uval;
      char str[256];
      uval = grads[start+i];
      sprintf(str,"%g",uval);
      Xgc->graphic_engine->boundingbox(Xgc,str,0,0,srect);
      y = rect[1] + rect[3]*(1-((uval-vmin)/(vmax - vmin)));
      Xgc->graphic_engine->drawline(Xgc,rect[0]+rect[2],y,rect[0]+rect[2]+5,y);
      y += srect[3]/2;
      Xgc->graphic_engine->displaystring(Xgc,str,rect[0]+rect[2]+8,y,TRUE,0,
					 GR_STR_XLEFT, GR_STR_YBOTTOM);
    }

  if ( clip[0]== 1 ) 
    {
      rclip.x = clip[1];
      rclip.y = clip[2];
      rclip.width = clip[3];
      rclip.height = clip[4];
      Xgc->graphic_engine->xset_clip(Xgc,&rclip);
    }
}


static int getticks(double xmin,double xmax,double *grads,int *start)
{
  int ngrads, n1, n2;
  gr_compute_ticks(&xmin, &xmax, grads, &ngrads);
  n1 = 0; n2 = ngrads-1; 
  if ( grads[n1] < xmin ) n1++;
  if ( grads[n2] > xmax ) n2--;
  ngrads = n2 - n1 + 1;
  *start = n1;
  return ngrads;
}

