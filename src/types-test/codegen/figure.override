/* -*- Mode: C -*- */
%%
include-start Figure
/* inserted at the start of include file */
#include <nsp/objects.h>
#include <nsp/none.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h>

%%
include-public Figure

/* inserted at the end of public part of include file
 * of figure.h
 */

extern BCG *nsp_check_graphic_context(void);
extern NspFigure *nsp_get_figure(BCG *Xgc);
extern NspFigure *nsp_check_for_figure(BCG *Xgc,int set_current);
extern NspObject * nsp_check_for_axes_or_objs3d(BCG *Xgc,const double *wrect);
extern NspObject * nsp_check_pt_axes_or_objs3d(BCG *Xgc,const int *pt);
extern void nsp_list_link_figure(NspList *L, nsp_figure  *F,void *A);
extern void nsp_list_unlink_figure(NspList *L, nsp_figure *F);
extern int nsp_list_check_figure(NspList *L, nsp_figure *F);
extern void nsp_graphic_link_figure(NspGraphic *G, void *F, void *A);
extern void nsp_graphic_unlink_figure(NspGraphic *G, void *F);
extern void nsp_figure_invalidate(NspGraphic *G);
extern NspObject *nsp_check_for_axes_or_objs3d_from_pointer(nsp_figure *F,void *obj);
extern NspGraphic *nsp_get_point_axes(BCG *Xgc,int px,int py,double *dp);
extern void nsp_figure_data_set_colormap(NspFigure *F,NspMatrix *Mc);
extern int nsp_set_current_figure(NspFigure *F);
extern int nsp_unset_current_figure(void);
extern NspFigure *nsp_get_current_figure(void);
extern NspObject *nsp_get_wid_figure(int wid);
extern void nsp_send_scale_2D_to_opengl(BCG *Xgc);
extern void nsp_send_scale_3D_to_opengl(BCG *Xgc);
extern int nsp_figure_remove_children(NspFigure *F);
extern NspObject *nsp_check_for_current_axes_or_objs3d(int create);
extern NspFigure *nsp_check_for_current_figure(void);
extern void nsp_figure_data_reset(NspFigure *F);
/* compute the bounds of graphic objects stored in L */
extern int nsp_grlist_compute_inside_bounds(NspList *L,double *bounds);
extern int nsp_figure_remove_element(NspFigure *F,NspGraphic *Obj);
  
%%
include-private Figure

/* inserted in the private part of include file
 * of classa.h
 */
static void nsp_draw_figure(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static int nsp_figure_connect(NspFigure *);
static int nsp_figure_unconnect(NspFigure *);
static int nsp_figure_draw_latter(NspFigure *);
static int nsp_figure_draw_now(NspFigure *);
static int nsp_figure_draw_status(NspFigure *);
static void nsp_figure_children_unlink_figure(NspFigure *F);
static void nsp_figure_children_link_figure(NspFigure *F);
static int nsp_figure_check_children(NspFigure *F,NspList *L);
static NspList *nsp_figure_children(NspGraphic *Obj);
static int nsp_figure_start_compound(NspFigure *F);
static NspCompound *nsp_figure_end_compound(char *name,NspFigure *F);
static void nsp_figure_set_gc_values(NspFigure *F);
static void nsp_figure_initialize_gc(NspFigure *F);
static void nsp_figure_process_updates(NspFigure *F);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figure.h>
#include <nsp/axes.h>
#include <nsp/objs3d.h>
#include <nsp/compound.h>

%%
init

Init portion

%%
override-type Figure
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_figure;
  ((NspTypeGraphic *) type->surtype)->children = (children_func *) nsp_figure_children ;
  ((NspTypeGraphic *) type->surtype)->invalidate = nsp_figure_invalidate;

%%
ignore-glob
  *_get_type

%%
override-destroy-prelim Figure
  /* inserted verbatim at the begining of destroy */
  nsp_figure_children_unlink_figure(H);

%%
override-int-create-final Figure
  /* verbatim in create/load/full_copy interface use %(ret)s for returned value */
  nsp_figure_children_link_figure(H);
  nsp_figure_initialize_gc(H);

%%
override figure_attach kwargs

int _wrap_figure_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  /* here we should get the Xgc with the same id as figure XXXX */
  Xgc=nsp_check_graphic_context();
  if ((pl = nsp_object_copy_and_name("Obj",pl)) == NULLOBJ )
    return RET_BUG;
  Xgc->figure = pl;
  return 0;
}

%%
override-attr Figure.children

static NspObject *_wrap_figure_get_obj_children(void *self,char *attr, int *copy)
{
  NspList *ret;
  *copy = TRUE;
  ret = ((NspList*) ((NspFigure *) self)->obj->children);
  return (NspObject *) ret;
}

static int _wrap_figure_set_children(void *self, char *attr, NspObject *O)
{
  NspList *children;

  if ( ! IsList(O) ) return FAIL;
  if ((children = (NspList *) nsp_object_copy_and_name(attr,O)) == NULLLIST) return FAIL;
  if (((NspFigure *) self)->obj->children != NULL )
    {
      nsp_figure_children_unlink_figure(self);
      nsp_list_destroy(((NspFigure *) self)->obj->children);
    }
  ((NspFigure *) self)->obj->children= children;
  nsp_figure_children_link_figure(self);
  return OK;
}

static int _wrap_figure_set_obj_children(void *self,NspObject *val)
{
  if ( ! IsList(val) ) return FAIL;
  if ( nsp_figure_check_children(self,(NspList *) val )== FAIL)
    {
      return FAIL;
    }
  if (((NspFigure *) self)->obj->children != NULL )
    {
      nsp_figure_children_unlink_figure(self);
      nsp_list_destroy(((NspFigure *) self)->obj->children);
    }
  ((NspFigure *) self)->obj->children=(NspList *) val ;
  nsp_figure_children_link_figure(self);
  return OK;
}

%%
override nsp_extractelts_figure kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_figure(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_figure kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_figure(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
override nsp_figure_extract kwargs

static int _wrap_nsp_figure_extract(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  NspCompound *C=nsp_figure_get_axe_elts_as_compound(NVOID,self);
  if ( C == NULL) return RET_BUG;
  MoveObj(stack,1,NSP_OBJECT(C));
  return 1;
}

%%
override nsp_figure_start_compound kwargs

static int _wrap_nsp_figure_start_compound(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  if (  nsp_figure_start_compound(self) == FAIL) return RET_BUG;
  return 0;
}


%%
override nsp_figure_end_compound kwargs

static int _wrap_nsp_figure_end_compound(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  NspCompound *C;
  if ((C = nsp_figure_end_compound("compound",self))==NULL) return RET_BUG;
  MoveObj(stack,1,NSP_OBJECT(C));
  return 1;
}
%%
override nsp_get_point_axes kwargs

static int _wrap_nsp_get_point_axes(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  BCG *Xgc =  self->obj->Xgc;
  NspGraphic *G;
  double pt[2];
  int_types T[] = {s_int,s_int, t_end};
  int x, y;
  if ( GetArgs(stack,rhs,opt,T,&x, &y) == FAIL) return RET_BUG;
  if ( Xgc == NULL) return RET_BUG;
  G=nsp_get_point_axes(Xgc,x,y,pt);
  if (nsp_move_doubles(stack,1,1,2,pt[0],pt[1]) == FAIL) return RET_BUG;
  if ( lhs == 2 ) 
    {
      MoveObj(stack,2,NSP_OBJECT(G));
    }
  return Max(lhs,1);
}

%%
override nsp_check_for_current_axes kwargs

static int _wrap_nsp_check_for_current_axes(Stack stack, int rhs, int opt, int lhs) 
{
  int create=TRUE;
  NspObject *ret;
  int_types T[] = {new_opts,t_end} ;
  nsp_option opts_2d[] ={{ "create",s_bool,NULLOBJ,-1},
			 { NULL,t_end,NULLOBJ,-1}};
  if ( GetArgs(stack,rhs,opt,T,&opts_2d,&create) == FAIL)
    return RET_BUG;
  CheckStdRhs(0,0);
  CheckLhs(0,1);
  ret = (NspObject *) nsp_check_for_current_axes(create);
  if (ret == NULL )
    {
      if ((ret= (NspObject *) nsp_none_create(NVOID,NULL))  == NULL)
	return RET_BUG;
    }
  MoveObj(stack,1,ret);
  return 1;
}

%%
override nsp_check_for_current_objs3d kwargs

static int _wrap_nsp_check_for_current_objs3d(Stack stack, int rhs, int opt, int lhs) 
{
  int create=TRUE;
  NspObject *ret;
  int_types T[] = {new_opts,t_end} ;
  nsp_option opts_2d[] ={{ "create",s_bool,NULLOBJ,-1},
			 { NULL,t_end,NULLOBJ,-1}};
  if ( GetArgs(stack,rhs,opt,T,&opts_2d,&create) == FAIL)
    return RET_BUG;
  CheckStdRhs(0,0);
  CheckLhs(0,1);
  ret = (NspObject *) nsp_check_for_current_objs3d(create);
  if (ret == NULL )
    {
      if ((ret= (NspObject *) nsp_none_create(NVOID,NULL))  == NULL)
	return RET_BUG;
    }
  MoveObj(stack,1,ret);
  return 1;
}

%%
override nsp_check_for_current_axes_or_objs3d kwargs

int _wrap_nsp_check_for_current_axes_or_objs3d(Stack stack, int rhs, int opt, int lhs)
{
  int create=TRUE;
  NspObject *ret;
  int_types T[] = {new_opts,t_end} ;
  nsp_option opts_2d[] ={{ "create",s_bool,NULLOBJ,-1},
			 { NULL,t_end,NULLOBJ,-1}};
  if ( GetArgs(stack,rhs,opt,T,&opts_2d,&create) == FAIL)
    return RET_BUG;
  CheckStdRhs(0,0);
  CheckLhs(0,1);
  ret =nsp_check_for_current_axes_or_objs3d(create);
  if (ret == NULL )
    {
      if ((ret= (NspObject *) nsp_none_create(NVOID,NULL))  == NULL)
	return RET_BUG;
    }
  MoveObj(stack,1,ret);
  return 1;
}

%%
override-attr FigureData.colormap

static NspObject *_wrap_figuredata_get_colormap(void *self,const char *attr)
{
  NspMatrix *ret;
  ret = ((NspFigureData *) self)->colormap;
  return (NspObject *) ret;
}

static NspObject *_wrap_figuredata_get_obj_colormap(void *self,const char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE;
  ret = ((NspMatrix*) ((NspFigureData *) self)->colormap);
  return (NspObject *) ret;
}

static int _wrap_figuredata_set_obj_colormap(void *self, NspObject *O)
{
  NspMatrix *colormap;
  if ( ! IsMat(O) ) return FAIL;
  if ((colormap = (NspMatrix *) nsp_object_copy_and_name("cmap",O)) == NULLMAT) return FAIL;
  if (((NspFigureData *) self)->colormap != NULL )
    nsp_matrix_destroy(((NspFigureData *) self)->colormap);
  ((NspFigureData *) self)->colormap= colormap;
  return OK;
}

/**
 * _wrap_figuredata_set_colormap:
 * @self:
 * @attr:
 * @O:
 *
 *
 *
 * Returns:
 **/

static int _wrap_figuredata_set_colormap(void *self,const char *attr, NspObject *O)
{
  NspMatrix *colormap;
  if ( ! IsMat(O) ) return FAIL;
  if ((colormap = (NspMatrix *) nsp_object_copy_and_name(attr,O)) == NULLMAT) return FAIL;
  if (((NspFigureData *) self)->colormap != NULL )
    nsp_matrix_destroy(((NspFigureData *) self)->colormap);
  ((NspFigureData *) self)->colormap= colormap;
  return OK;
}


%%
last

/**
 * nsp_draw_figure:
 * @Xgc:
 * @Obj:
 * @rect:
 * @data:
 *
 *
 **/

static void nsp_draw_figure(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  int rep;
  Cell *cloc;
  NspList *L;
  NspFigure *F = (NspFigure *) Obj;
  /* set up values according to figure */
  nsp_figure_set_gc_values(F);
  rep = Xgc->graphic_engine->xpush_colormap(Xgc, F->obj->gc->colormap);

  /* clear proper zone */
  if ( rect != NULL)
    {
      GdkRectangle rect1 = *rect;
      Xgc->graphic_engine->cleararea(Xgc,&rect1);
#if 0
      /* debug helper */
      {
	  static int nc=0;
	  nc = (nc + 1) % 30;
	  int color = Xgc->graphic_engine->xset_color(Xgc,nc);
	  Xgc->graphic_engine->fillrectangle(Xgc,rect);
	  Xgc->graphic_engine->xset_color(Xgc,color);
      }
#endif
      Xgc->graphic_engine->xset_clip(Xgc,&rect1);
    }
  else
    {
      Xgc->graphic_engine->clearwindow(Xgc);
    }

  /* draw elements */
  L = F->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL )
    {
      if ( cloc->O != NULLOBJ )
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->draw(Xgc,G,rect,data);
	}
      cloc = cloc->next;
    }
  /* reset Xgc colors */
  if ( rep == OK)  Xgc->graphic_engine->xpop_colormap(Xgc);
  /* unclip */
  Xgc->graphic_engine->xset_unclip(Xgc);
}


#ifdef WITH_OPENGL
extern Gengine GL_gengine;
#endif
#ifdef WITH_CAIRO
extern Gengine Cairo_gengine;
#endif
extern Gengine XFig_gengine, Pos_gengine;

/**
 * nsp_figure_connect:
 * @F:
 *
 * creates a graphic window, sets this window as the current one
 * then add figure to the Xgc associated to the
 * window. The type of the window depends on the
 * driver field of the figure @F.
 *
 * Returns: %OK or %FAIL
 **/

static int nsp_figure_connect(NspFigure *F)
{
  BCG *Xgc;
  driver_initgraphic *initg = Cairo_gengine.initgraphic;
  int v1=-1, wdim[2], wpdim[2],  wpos[2];
  if (F->obj->Xgc != NULL )
    {
      /* Figure is already connected */
      return OK;
    }

  if ( F->obj->dims != NULL && F->obj->dims->mn == 2 )
    {
      wdim[0] = F->obj->dims->R[0];
      wdim[1] = F->obj->dims->R[1];
    }

  if ( F->obj->viewport_dims != NULL &&  F->obj->viewport_dims->mn == 2 )
    {
      wpdim[0] = F->obj->viewport_dims->R[0];
      wpdim[1] = F->obj->viewport_dims->R[1];
    }

  /* A FAIRE c'est les offsets du viewport */
  /*
     if (viewport != NULL && viewport->mn != 2 )
     {
     viewport[0]= F->obj->viewport_pos->R[0];
     viewport[1]= F->obj->viewport_pos->R[1];
     }
  */
  if ( F->obj->position != NULL && F->obj->position->mn == 2 )
    {
      wpos[0] = F->obj->position->R[0];
      wpos[1] = F->obj->position->R[1];
    }

  if ( strcmp(F->obj->driver,"Gtk") == 0) initg = Cairo_gengine.initgraphic;
  else if ( strcmp(F->obj->driver,"OpenGl") == 0)
    {
#ifdef WITH_OPENGL
      initg = GL_gengine.initgraphic;
#else
      Sciprintf("No opengl support in this version\n");
#endif
    }
  else if ( strcmp(F->obj->driver,"Cairo") == 0)
    {
#ifdef WITH_CAIRO
      initg = Cairo_gengine.initgraphic;
#else
      Sciprintf("No cairo support in this version\n");
#endif
    }
  else
    {
      initg = Cairo_gengine.initgraphic;
    }

  v1 = -1;

  if ((F = (NspFigure *) nsp_object_copy_and_name("fig",NSP_OBJECT(F))) == NULL )
    return FAIL;

  initg("",&v1,
	(F->obj->dims != NULL  && F->obj->dims->mn == 2 ) ? wdim :NULL,
	(F->obj->viewport_dims  != NULL &&  F->obj->viewport_dims->mn == 2) ? wpdim : NULL ,
	NULL,
	( F->obj->position != NULL && F->obj->position->mn == 2 ) ? wpos: NULL ,
	'e',NULL,F);

  if ( F->obj->Xgc == NULL)
    {
      Sciprintf("failed to connect figure\n");
      return FAIL;
    }
  Xgc = F->obj->Xgc;
  Xgc->graphic_engine->xset_wresize(Xgc,F->obj->wresize);
  if ( F->obj->fname != NULL && strcmp(F->obj->fname,"") != 0 )
    Xgc->graphic_engine->setpopupname(F->obj->Xgc,F->obj->fname);
  return OK;
}


/**
 * nsp_figure_unconnect:
 * @F: a #NspFigure
 *
 * delete graphic window associated to @F.
 * @F is not deleted.
 *
 * Returns: %OK
 **/

static int nsp_figure_unconnect(NspFigure *F)
{
  BCG *Xgc =  F->obj->Xgc;
  if ( Xgc != NULL)  Xgc->actions->destroy(Xgc);
  F->obj->Xgc = NULL;
  return OK ;
}

/**
 * nsp_list_link_figure:
 * @L:
 * @F:
 * @A:
 *
 * recursively call the link_figure method for each element of
 * the list.
 *
 **/

void nsp_list_link_figure(NspList *L, nsp_figure *F, void *A)
{
  /* A should be a nsp_axes */
  Cell *cloc = L->first ;
  while ( cloc != NULLCELL )
    {
      if ( cloc->O != NULLOBJ )
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->link_figure(G,F,A);
	}
      cloc = cloc->next;
    }
}

/**
 * nsp_list_unlink_figure:
 * @L:
 * @F:
 *
 * recursively call the unlink_figure method for each element of
 * the list.
 *
 **/

void nsp_list_unlink_figure(NspList *L, nsp_figure *F)
{
  Cell *cloc = L->first ;
  while ( cloc != NULLCELL )
    {
      if ( cloc->O != NULLOBJ )
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->unlink_figure(G,F);
	}
      cloc = cloc->next;
    }
}

/**
 * nsp_list_check_figure:
 * @L:
 * @F:
 *
 * checks that all the children of the Figure @F have a field Fif
 * set to #nsp_figure @F.
 *
 *
 * Returns: %OK or %FAIL
 **/

int nsp_list_check_figure(NspList *L, nsp_figure *F)
{
  Cell *cloc = L->first ;
  while ( cloc != NULLCELL )
    {
      if ( cloc->O != NULLOBJ )
	{
	  if ( ! IsGraphic( cloc->O))
	    {
	      Scierror("Error: List should only contain graphic objects\n");
	      return FAIL;
	    }
	  if ( ((NspGraphic *) cloc->O)->obj->Fig != NULL && ((NspGraphic *) cloc->O)->obj->Fig != F )
	    {
	      Scierror("Error: A graphic object already belongs to an other figure\n");
	      return FAIL;
	    }
	}
      cloc = cloc->next;
    }
  return OK;
}

/**
 * nsp_figure_children_link_figure:
 * @F: a #NspFigure
 *
 * call link_figure method on children of @F.
 *
 **/
static void nsp_figure_children_link_figure(NspFigure *F)
{
  nsp_list_link_figure(F->obj->children, F->obj, NULL);
}


/**
 * nsp_figure_children_unlink_figure:
 * @F: a #NspFigure
 *
 *
 * call unlink_figure method on children of @F.
 **/
static void nsp_figure_children_unlink_figure(NspFigure *F)
{
  nsp_list_unlink_figure(F->obj->children,F->obj);
}


/**
 * nsp_figure_check_children:
 * @F:
 * @L:
 *
 *
 * cheks that all the children of @F have proper Fig field
 *
 * Returns:
 **/
static int nsp_figure_check_children(NspFigure *F,NspList *L)
{
  return  nsp_list_check_figure(F->obj->children,F->obj);
}

/**
 * nsp_get_current_figure:
 * @void:
 *
 * returns the current figure (not a copy).
 *
 * Returns: a #NspFigure or %NULL
 **/

static NspFigure *nsp_current_figure=NULL;

NspFigure *nsp_get_current_figure(void)
{
  BCG *Xgc;
  NspObject  *F = NULL;
  if ( nsp_current_figure != NULL )
    {
      if ( nsp_current_figure->obj->ref_count > 1)
	return nsp_current_figure;
      /* no more ref to the current_figure */
      nsp_figure_destroy(nsp_current_figure);
      nsp_current_figure = NULL;
    }
  /* check if we have a graphic window with
   * a figure non recorded as current
   */
  if ((Xgc = window_list_get_first()) == NULL) return NULL;
  if ((F = (NspObject *) Xgc->figure)== NULL) return NULL;
  if (F == NULL || ! IsFigure(F)) return NULL;
  nsp_current_figure = (NspFigure *) nsp_object_copy_and_name("Fig",(NspObject *) F);
  return nsp_current_figure;
}

/**
 * nsp_set_current_figure:
 * @F:
 *
 * sets nsp_current_figure to @F
 *
 * Returns: %OK or %FAIL
 **/

int nsp_set_current_figure(NspFigure *F)
{
  NspFigure *loc;
  if ((loc =(NspFigure *) nsp_object_copy_and_name("Fig",(NspObject *) F)) == NULL )
    return FAIL;
  if ( nsp_current_figure != NULL)
    nsp_figure_destroy(nsp_current_figure);
  nsp_current_figure =loc ;
  return OK;
}

/**
 * nsp_unset_current_figure:
 * @void:
 *
 * unset nsp_current_figure
 *
 * Returns: %OK or %FAIL
 **/

int nsp_unset_current_figure(void)
{
  if ( nsp_current_figure != NULL)
    nsp_figure_destroy(nsp_current_figure);
  nsp_current_figure = NULL;
  return OK;
}

/**
 * nsp_figure_children:
 * @Obj: a #NspGraphic which is to be a #NspFigure.
 *
 * returns the children of a @Figure
 *
 * Returns:
 **/

static NspList *nsp_figure_children(NspGraphic *Obj)
{
  return  ((NspFigure *) Obj)->obj->children;
}

/**
 * nsp_create_default_figure:
 * @Xgc: a graphic context
 *
 * create and return a #NspFigure connected to @Xgc.
 *
 * Returns: a new #NspFigure.
 **/

static NspFigure *nsp_create_default_figure(BCG *Xgc)
{
  NspFigure *Fig;
  char *name,*driver;
  /* take care that nsp_figure_create won't allocate its fields
   * we have to make the copies here
   */
  if (( name =new_nsp_string("Graphic window")) == NULLSTRING)
    return NULL;
  if (( driver =new_nsp_string("Gtk")) == NULLSTRING)
    return NULL;
  Fig = nsp_figure_create("fig",name,driver,Xgc->CurWindow,NULL,NULL,TRUE,NULL,NULL,
			  TRUE,NULL,Xgc,NULL);
  /* insert in Xgc */
  if ( Fig != NULL)
    {
      NspObject *obj;
      if ((obj = nsp_object_copy_and_name("Obj",NSP_OBJECT(Fig))) == NULLOBJ )
	return NULL;
      Xgc->figure = obj;
    }
  return Fig;
}




/**
 * nsp_check_for_axes:
 * @Xgc:
 * @wrect:
 *
 *
 * checks for a figure and an axes in Xgc
 * create one if not present.
 * Xgc should not be null here.
 * this is not a definitive function just a hack.
 * since graphic should be driven by Figure Not by Xgc
 *
 * Returns:
 **/

NspAxes * nsp_check_for_axes(BCG *Xgc,const double *wrect)
{
  int created=FALSE;
  NspAxes *Axes= NULL;
  NspFigure  *F = Xgc->figure;
  if ( F == NULL)
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
      created=TRUE;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  Axes = nsp_check_for_axes_in_figure(F,wrect,TRUE);
  if ( created==TRUE) nsp_figure_destroy(F);
  return Axes;
}


/**
 * nsp_check_for_axes_in_figure:
 * @Xgc:
 * @wrect:
 * @create: integer 
 *
 * checks for a figure and an axes in Xgc
 * create one if not present and @create is %TRUE
 * If create is %TRUE, the id of the current_axe is 
 * changed to the id of the found or created #NspAxes
 *
 * Returns: a new #NspAxes or %NULL
 **/

NspAxes * nsp_check_for_axes_in_figure(NspFigure *F,const double *wrect, int create)
{
  int i,l;
  NspObject *Obj=NULLOBJ;
  NspList *L;
  if ( F == NULL) return NULL;
  L= F->obj->children;
  /* return the first axes found
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj) )
	{
	  double *wrectA = ((NspAxes *) Obj)->obj->wrect->R;
	  if ( wrect == NULL ||
	       ( Abs(wrectA[0]-wrect[0])< 1.e-4
		 && Abs(wrectA[1]-wrect[1])< 1.e-4
		 && Abs(wrectA[2]-wrect[2])< 1.e-4
		 && Abs(wrectA[3]-wrect[3])< 1.e-4 ))
	    {
	      if ( create )
		{
		  F->obj->gc->current_axe = i;
		  F->obj->gc->current_axe_or_objs3d = i;
		}
	      return (NspAxes *) Obj;
	    }
	}
    }
  /* here Axes is NULL */
  if ( create == FALSE ) return NULL;
  /* create a new axes */
  if (( Obj = (NspObject *) nsp_axes_create_default("axe"))==NULL) return NULL;
  /* store in Figure */
  if ( nsp_list_begin_insert(L, Obj)== FAIL)
    {
      nsp_axes_destroy( (NspAxes *) Obj);
      return NULL;
    }
  /* set figure informations in axe */
  nsp_figure_children_link_figure(F);
  F->obj->gc->current_axe = 1;
  F->obj->gc->current_axe_or_objs3d = 1;
  return (NspAxes *) Obj;
}

/**
 * nsp_check_for_objs3d:
 * @Xgc:
 * @wrect:
 *
 *
 * checks for a figure and a 3dobj-axes in Xgc
 * create one if not present.
 * Xgc should not be null here.
 * this is not a definitive function just a hack.
 * since graphic should be driven by Figure Not by Xgc
 *
 * Returns:
 **/

NspObjs3d * nsp_check_for_objs3d(BCG *Xgc,const double *wrect)
{
  int  created=FALSE;
  NspObjs3d *Objs3d=NULL;
  NspFigure  *F = Xgc->figure;
  if ( F == NULL)
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
      created = TRUE;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  Objs3d = nsp_check_for_objs3d_in_figure(F,wrect,TRUE);
  if ( created==TRUE) nsp_figure_destroy(F);
  return  Objs3d;
}


/**
 * nsp_check_for_objs3d_in_figure:
 * @Xgc:
 * @wrect:
 * @create: integer 
 *
 *
 * checks for a figure and a 3dobj-axes in Xgc
 * create one if not present and @create is %TRUE
 * If create is %TRUE, the id of the current_axe is 
 * changed to the id of the found or created #NspAxes
 *
 * Returns: a new #NspObjs3d or %NULL
 **/

NspObjs3d * nsp_check_for_objs3d_in_figure(NspFigure *F,const double *wrect,int create)
{
  int i,l ;
  NspObject *Obj=NULLOBJ;
  NspList *L;
  if ( F == NULL) return NULL;
  L= F->obj->children;
  /* return the first axes found
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  double *wrectO3 = ((NspObjs3d *) Obj)->obj->wrect->R;
	  if ( wrect == NULL ||
	       ( Abs(wrectO3[0]-wrect[0])< 1.e-4
		 && Abs(wrectO3[1]-wrect[1])< 1.e-4
		 && Abs(wrectO3[2]-wrect[2])< 1.e-4
		 && Abs(wrectO3[3]-wrect[3])< 1.e-4 ))
	    {
	      if (create )
		{
		  F->obj->gc->current_objs3d = i;
		  F->obj->gc->current_axe_or_objs3d = i;
		}
	      return (NspObjs3d *) Obj;
	    }
	  break;
	}
    }
  if ( create == FALSE ) return NULL;
  /* create a new obj3d */
  if (( Obj= (NspObject *) nsp_objs3d_create_default("axe3d")) == NULL) return NULL;
  /* store in Figure */
  if ( nsp_list_begin_insert(L, Obj)== FAIL)
    {
      nsp_objs3d_destroy((NspObjs3d *) Obj);
      return NULL;
    }
  /* set figure informations in axe */
  nsp_figure_children_link_figure(F);
  F->obj->gc->current_objs3d = 1;
  F->obj->gc->current_axe_or_objs3d = 1;
  return (NspObjs3d *) Obj;
}


/**
 * nsp_check_for_axes_or_objs3d:
 * @Xgc:
 * @wrect:
 *
 *
 *
 * Returns:
 **/

NspObject * nsp_check_for_axes_or_objs3d(BCG *Xgc,const double *wrect)
{
  int i,l, created=FALSE;
  NspObject *Obj=NULLOBJ,*Res=NULLOBJ;
  NspList *L;
  NspFigure  *F = (NspFigure *) Xgc->figure;
  if ( F == NULL)
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
      created=TRUE;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  L= F->obj->children;
  /* return the first axes or objs3d found
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj))
	{
	  Res =Obj;
	  if ( wrect == NULL)
	    {
	      break;
	    }
	  if ( Abs(((NspAxes *)Res)->obj->wrect->R[0]-wrect[0])< 1.e-4
	       && Abs(((NspAxes *)Res)->obj->wrect->R[1]-wrect[1])< 1.e-4
	       && Abs(((NspAxes *)Res)->obj->wrect->R[2]-wrect[2])< 1.e-4
	       && Abs(((NspAxes *)Res)->obj->wrect->R[3]-wrect[3])< 1.e-4 )
	    {
	      break;
	    }
	  Res = NULL;
	}
      else if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  Res=Obj;
	  if ( wrect == NULL)
	    {
	      break;
	    }
	  if ( Abs(((NspObjs3d *)Res)->obj->wrect->R[0]-wrect[0])< 1.e-4
	       && Abs(((NspObjs3d *)Res)->obj->wrect->R[1]-wrect[1])< 1.e-4
	       && Abs(((NspObjs3d *)Res)->obj->wrect->R[2]-wrect[2])< 1.e-4
	       && Abs(((NspObjs3d *)Res)->obj->wrect->R[3]-wrect[3])< 1.e-4 )
	    {
	      break;
	    }
	  Res = NULL;
	  break;
	}

    }
  if ( Res == NULLOBJ)
    {
      /* create a new axes */
      NspAxes *axe= nsp_axes_create_default("axe");
      if ( axe == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) axe)== FAIL)
	{
	  nsp_axes_destroy(axe);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      F->obj->gc->current_axe = 1;
      F->obj->gc->current_axe_or_objs3d = 1;
      Res =(NspObject *) axe;
    }
  else
    {
      F->obj->gc->current_axe = i;
      F->obj->gc->current_axe_or_objs3d = i;
    }
        
  if ( created==TRUE) nsp_figure_destroy(F);
  return Res;
}


/**
 * nsp_check_pt_axes_or_objs3d:
 * @Xgc:
 * @pt:
 *
 *
 * check if a point is inside an axes or objs3d
 *
 * Returns:
 **/

NspObject * nsp_check_pt_axes_or_objs3d(BCG *Xgc,const int *pt)
{
  int wdim[]= {Xgc->CWindowWidth,  Xgc->CWindowHeight};
  int i,l,  Irect[4];
  NspObject *Obj=NULLOBJ,*Res=NULLOBJ;
  NspList *L;
  NspFigure  *F = (NspFigure *) Xgc->figure;
  if ( F== NULL ||  ! IsFigure((NspObject *) F)) return NULL;

  L= F->obj->children;
  /* return the first axes or objs3d found which contains pt
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj))
	{
	  Res =Obj;
	  /* the figure rectangle in int values */
	  Irect[0]=((NspAxes *) Res)->obj->wrect->R[0]*wdim[0];
	  Irect[1]=((NspAxes *) Res)->obj->wrect->R[1]*wdim[1];
	  Irect[2]=((NspAxes *) Res)->obj->wrect->R[2]*wdim[0];
	  Irect[3]=((NspAxes *) Res)->obj->wrect->R[3]*wdim[1];

	  if ( Irect[0] <= pt[0] && pt[0] <= Irect[0]+Irect[2]
	       && Irect[1] <= pt[1] && pt[1] <= Irect[1]+Irect[3] )
	    {
	      break;
	    }
	  Res = NULL;
	}
      else if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  Res=Obj;
	  /* the figure rectangle in int values */
	  Irect[0]=((NspObjs3d *) Res)->obj->wrect->R[0]*wdim[0];
	  Irect[1]=((NspObjs3d *) Res)->obj->wrect->R[1]*wdim[1];
	  Irect[2]=((NspObjs3d *) Res)->obj->wrect->R[2]*wdim[0];
	  Irect[3]=((NspObjs3d *) Res)->obj->wrect->R[3]*wdim[1];

	  if ( Irect[0] <= pt[0] && pt[0] <= Irect[0]+Irect[2]
	       && Irect[1] <= pt[1] && pt[1] <= Irect[1]+Irect[3] )
	    {
	      break;
	    }
	  Res = NULL;
	}

    }
  return Res;
}

/**
 * nsp_check_for_axes_or_objs3d_from_pointer:
 * @F:
 * @obj:
 *
 *
 *
 * Returns:
 **/

NspObject *nsp_check_for_axes_or_objs3d_from_pointer(nsp_figure *F,void *obj)
{
  int i,l;
  NspObject *Obj=NULLOBJ;
  NspList *L;
  if ( F == NULL) return NULL;
  L= F->children;
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj))
	{
	  NspAxes *A = (NspAxes *) Obj;
	  if ( A->obj == obj ) return (NspObject *) A;
	}
      else if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  NspObjs3d *A = (NspObjs3d *) Obj;
	  if ( A->obj == obj ) return (NspObject *) A;
	}
    }
  return NULL;
}


/**
 * nsp_figure_draw_latter:
 * @F:
 *
 *
 *
 * Returns:
 **/
static int nsp_figure_draw_latter(NspFigure *F)
{
  F->obj->draw_now=FALSE;
  return OK ;
}

/**
 * nsp_figure_draw_now:
 * @F:
 *
 *
 *
 * Returns:
 **/

static int nsp_figure_draw_now(NspFigure *F)
{
  BCG *Xgc;
  if ( F->obj->draw_now == FALSE )
    {
      F->obj->draw_now= TRUE;
      /* we were not in draw_now mode
       * thus all the invalidate have been
       * lost
       */
      nsp_figure_invalidate((NspGraphic *) F);
    }
  if ((Xgc= F->obj->Xgc) == NULL) return FAIL;
  /* flush the accumulated expose events */
  Xgc->graphic_engine->process_updates(Xgc);
  return OK ;
}

/**
 * nsp_figure_draw_status:
 * @F:
 *
 *
 *
 * Returns:
 **/

static int nsp_figure_draw_status(NspFigure *F)
{
  return F->obj->draw_now == TRUE ;
}

/**
 * nsp_get_point_axes:
 * @Xgc:
 * @px:
 * @py:
 * @dp:
 *
 * get the axes which contains a point (px,py)
 * and use the axes scale to convert point to double dp[2].
 * This function has the side effect that the axe scale is
 * set in Xgc.
 *
 *
 * Returns:
 **/

NspGraphic *nsp_get_point_axes(BCG *Xgc,int px,int py,double *dp)
{
  NspGraphic *gr=NULL;
  NspFigure *F=nsp_get_figure(Xgc);
  int ww= Xgc->CWindowWidth, wh = Xgc->CWindowHeight;
  NspList *L;
  Cell *cloc;
  if ( F == NULL || F->obj == NULL ) return NULL;
  L= F->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL )
    {
      if ( cloc->O != NULLOBJ )
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( IsAxes(NSP_OBJECT(G)))
	    {
	      NspAxes *A = (NspAxes *) G;
	      int w = ww*A->obj->wrect->R[2];
	      int h = wh*A->obj->wrect->R[3];
	      int x = ww*A->obj->wrect->R[0];
	      int y = ww*A->obj->wrect->R[1];
	      if (cloc->next==NULL || ( px >= x && px <= x+w && py >= y && py <= y +h))
		{
		  gr = G;
		  nsp_axes_i2f(A->obj,px,py,dp);
		}
	    }
	  else if ( IsObjs3d(NSP_OBJECT(G)))
	    {
	      NspObjs3d *A = (NspObjs3d *) G;
	      int w = ww*A->obj->wrect->R[2];
	      int h = wh*A->obj->wrect->R[3];
	      int x = ww*A->obj->wrect->R[0];
	      int y = ww*A->obj->wrect->R[1];
	      if ( px >= x && px <= x+w && py >= y && py <= y +h)
		{
		  gr = G;
		  /* a revoir XXXXX */
		  set_scale(Xgc->scales,NULL,A->obj->wrect->R,A->obj->frect->R,NULL,NULL,A->obj->arect->R);
		  scale_i2f(Xgc->scales,dp,dp+1,&px,&py,1);
		}
	    }
	}
      cloc = cloc->next;
    }
  return gr;
}


/**
 * nsp_get_figure:
 * @Xgc:
 *
 *
 *
 * Returns:
 **/

NspFigure *nsp_get_figure(BCG *Xgc)
{
  NspObject  *F = NULL;
  if ( Xgc == NULL) return NULL;
  F = Xgc->figure;
  if ( F== NULL || ! IsFigure(F)) return NULL;
  return (NspFigure *) F;
}

/**
 * nsp_figure_get_axe_elts_as_compound:
 * @name:
 * @F:
 *
 * get the elements of the first axe as a compound
 * and remove the elements.
 *
 *
 * Returns:
 **/
NspCompound *nsp_figure_get_axe_elts_as_compound(char *name,NspFigure *F)
{
  NspAxes *A;
  NspList *L;
  NspCompound *C;
  if ((C= nsp_compound_create(name,NULL,NULL,2,-1,10,NULL))== NULL) return NULL;
  /* unlink the children from the figure */
  /* return the first axes XXX  */
  if ( (A =(NspAxes *) nsp_list_get_element(F->obj->children,1)) ==  NULL )
    return NULL;
  if ( IsAxes(NSP_OBJECT(A)) == FALSE) return NULL;
  nsp_list_unlink_figure(A->obj->children,F->obj);
  /* swap respective children */
  L = C->obj->children;
  C->obj->children = A->obj->children;
  A->obj->children = L;
  return C;
}



/**
 * nsp_figure_start_compound:
 * @F:
 *
 * creates a new axe which is inserted in a figure
 * as the first axe. This axe also becomes the
 * default axe and its show attribute is set to
 * %FALSE. Subsequent graphics are collected in
 * this axe. Using #nsp_figure_end_compound it is
 * possible to collect all the graphics contained in this
 * axe and store them in a compound.
 *
 * Returns: %OK or %FAIL
 **/

static int count = 0;

static int nsp_figure_start_compound(NspFigure *F)
{
  NspAxes *axe= nsp_axes_create_default("axe");
  if ( axe == NULL) return FAIL;
  /* store in Figure */

  if (count == 0 )
    {
      count = 1;
    }
  else
    {
      Sciprintf("Recursive call to nsp_figure_start_compound\n");
      return FAIL;
    }

  if ( nsp_list_begin_insert(F->obj->children,(NspObject *) axe)== FAIL)
    {
      nsp_axes_destroy(axe);
      return FAIL;
    }
  F->obj->gc->current_axe = 1;
  /* set figure informations in axe */
  ((NspGraphic *) axe)->type->link_figure((NspGraphic *) axe,F->obj, axe->obj);
  /* set the axe drawing mode to false */
  ((NspGraphic *) axe)->obj->show = FALSE;
  return OK;
}

/**
 * nsp_figure_end_compound:
 * @name:
 * @F:
 *
 *
 * get the elements in the first axe
 * put them in a compound.
 * Then:
 *  if the axe is unique store the compound in the axe
 *  if an other axe exists store the compound on the next
 *  axe and remove the first one.
 *
 *
 * Returns:
 **/

static NspCompound *nsp_figure_end_compound(char *name,NspFigure *F)
{
  /* double l_bounds[4]; */
  NspAxes *A1,*A2;
  NspList *L;
  NspCompound *C;

  if ( count == 0 )
    {
      Sciprintf("ending a non started compound\n");
    }
  else
    {
      count = 0;
    }

  if ((C= nsp_compound_create(name,NULL,NULL,2,-1,10,NULL))== NULL) return NULL;
  /*
   * the first child of figure is the axe that must be converted to
   * compound.
   */
  if ( (A1 =(NspAxes *) nsp_list_get_element(F->obj->children,1)) ==  NULL )
    return NULL;
  if ( IsAxes(NSP_OBJECT(A1)) == FALSE) return NULL;
  /*
   * mv the axe children in the compound.
   */
  L = C->obj->children;
  C->obj->children = A1->obj->children;
  A1->obj->children = L;
  /* need now to update the bounds of the compound
   * since its children have changed.
   * Note that it is also done by nsp_axes_insert_child
   */
  /*   ((NspGraphic *) C)->type->bounds((NspGraphic *) C,l_bounds);*/
  if ( (A2 =(NspAxes *) nsp_list_get_element(F->obj->children,2)) ==  NULL )
    {
      /* if we just have one axe we insert the new compound in
       * the same axe.
       */
      if ( nsp_axes_insert_child(A1, (NspGraphic *) C, TRUE) == FAIL)
	return NULL;
    }
  else
    {
      /* insert the compound in A2 */
      if ( nsp_axes_insert_child(A2, (NspGraphic *) C, TRUE) == FAIL)
	return NULL;
      /* remove A1 */
      nsp_list_remove_first(F->obj->children);
    }
  return C;
}



/**
 * nsp_list_delete_graphic_obj:
 * @F:
 * @L:
 * @Obj:
 *
 * Remove a graphic object in a List and recursively
 * explore the list elements if they can contain children
 *
 *
 * Returns:
 **/

static int nsp_list_delete_graphic_obj(NspFigure *F,NspList *L, NspGraphic *Obj)
{
  Cell *Loc = L->first;
  while ( Loc != NULLCELL )
    {
      if ( Loc->O != NULLOBJ )
	{
	  NspGraphic *G= (NspGraphic *) Loc->O;
	  if ( G->obj == Obj->obj )
	    {
	      G->type->unlink_figure(G,F->obj);
	      nsp_remove_cell_from_list(L, Loc);
	      L->icurrent = 0;
	      L->current = NULLCELL;
	      nsp_cell_destroy(&Loc);
	      return OK;
	    }
	  else
	    {
	      if ( IsAxes(NSP_OBJECT(G)))
		{
		  NspAxes *A = (NspAxes *) G;
		  NspList *L1=  A->obj->children;
		  if (nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
		}
	      else if ( IsObjs3d(NSP_OBJECT(G)))
		{
		  NspObjs3d *A = (NspObjs3d *) G;
		  NspList *L1=  A->obj->children;
		  if ( nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
		}
	      else if ( IsCompound(NSP_OBJECT(G)))
		{
		  NspCompound *C = (NspCompound *) G;
		  NspList *L1=  C->obj->children;
		  if ( nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
		}
	    }
	}
      Loc = Loc->next;
    }
  return FAIL;
}

/**
 * nsp_figure_remove_element:
 * @F:
 * @Obj:
 *
 *
 *
 * Returns:
 **/

int nsp_figure_remove_element(NspFigure *F,NspGraphic *Obj)
{
  NspList *L= F->obj->children;
  Cell *cloc  = L->first ;
  while ( cloc != NULLCELL )
    {
      if ( cloc->O != NULLOBJ )
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( IsAxes(NSP_OBJECT(G)))
	    {
	      NspAxes *A = (NspAxes *) G;
	      NspList *L1=  A->obj->children;
	      if (nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
	    }
	  else if ( IsObjs3d(NSP_OBJECT(G)))
	    {
	      NspObjs3d *A = (NspObjs3d *) G;
	      NspList *L1=  A->obj->children;
	      if ( nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
	    }
	}
      cloc = cloc->next;
    }
  /* check if Obj is an axes or objs3d inside figure */
  nsp_list_delete_graphic_obj(F,F->obj->children,Obj);
  return FAIL;
}

/**
 * nsp_figure_invalidate:
 * @G:
 *
 * invalidate the drawing region associated to a
 * figure.
 *
 **/

void nsp_figure_invalidate(NspGraphic *G)
{
  NspFigure *F = (NspFigure *) G;
  BCG *Xgc;
  if ( F == NULL ) return ;
  if ((Xgc= F->obj->Xgc) == NULL) return ;
  if ( F->obj->draw_now== FALSE) return;
  Xgc->graphic_engine->invalidate(Xgc,NULL);
}



/**
 * nsp_figure_set_gc_values:
 * @F:
 *
 * used FigureData to set up values in
 * Xgc
 **/

static void nsp_figure_set_gc_values(NspFigure *F)
{
  NspFigureData *Gc = F->obj->gc;
  BCG *Xgc =  F->obj->Xgc;
  Gc = F->obj->gc;
  if ( Xgc == NULL) return;
  Xgc->graphic_engine->xset_color(Xgc,Gc->color);
  if ( Gc->background != -1 )
    Xgc->graphic_engine->xset_background(Xgc,Gc->background);
  else
    Gc->background= Xgc->graphic_engine->xget_background(Xgc);
  if ( Gc->foreground != -1 )
    Xgc->graphic_engine->xset_foreground(Xgc,Gc->foreground);
  else
    Gc->foreground= Xgc->graphic_engine->xget_foreground(Xgc);
  Xgc->graphic_engine->xset_dash(Xgc,Gc->dashes);
  Xgc->graphic_engine->xset_font(Xgc,Gc->font,Gc->font_size, FALSE);
  Xgc->graphic_engine->xset_hidden3d(Xgc,Gc->hidden3d);
  Xgc->graphic_engine->xset_absourel(Xgc,Gc->line_mode);
  Xgc->graphic_engine->xset_dash(Xgc,Gc->line_style);
  Xgc->graphic_engine->xset_mark(Xgc,Gc->mark,Gc->mark_size);
  Xgc->graphic_engine->xset_pixmapOn(Xgc,Gc->pixmap);
  Xgc->graphic_engine->xset_thickness(Xgc,Gc->thickness);
  Xgc->graphic_engine->xset_usecolor(Xgc,Gc->use_color);
  Xgc->graphic_engine->xset_autoclear(Xgc,Gc->auto_clear);
}

/**
 * nsp_figure_initialize_gc:
 * @F:
 *
 * initialize some values in FigureData
 * which are not properly initialized at creation.
 **/

void nsp_figure_initialize_gc(NspFigure *F)
{
  NspFigureData *Gc = F->obj->gc;
  BCG *Xgc =  F->obj->Xgc;
  Gc = F->obj->gc;
  if ( Xgc != NULL)
    {
      if ( Gc->background == -1 )
	Gc->background = Xgc->graphic_engine->xget_background(Xgc);
      if ( Gc->foreground == -1 )
	Gc->foreground = Xgc->graphic_engine->xget_foreground(Xgc);
    }
}

/**
 * nsp_figure_data_set_colormap:
 * @Xgc:
 * @Mc:
 *
 * @Mc is not copied here and should contains a colormap + 3 colors.
 **/

void nsp_figure_data_set_colormap(NspFigure *F,NspMatrix *Mc)
{
  NspFigureData *Gc = F->obj->gc;
  BCG *Xgc =  F->obj->Xgc;
  int m = Mc->m;
  if ( Gc->colormap != NULL) nsp_matrix_destroy(Gc->colormap);
  Gc->colormap = Mc;
  Gc->foreground = m+1;
  Gc->background = m+2;
  if ( Xgc != NULL )
    {
      Xgc->graphic_engine->xset_usecolor(Xgc,1);
      Xgc->graphic_engine->xset_foreground(Xgc,-1);
      Xgc->graphic_engine->xset_foreground(Xgc,Gc->foreground);
      Xgc->graphic_engine->xset_background(Xgc,-1);
      Xgc->graphic_engine->xset_background(Xgc,Gc->background);
      Xgc->graphic_engine->xset_color(Xgc,-1);
      Xgc->graphic_engine->xset_color(Xgc,Gc->foreground);
    }
}

/**
 * nsp_figure_data_reset:
 * @F: a #NspFigure
 *
 * reset Figure data to default values
 **/

void nsp_figure_data_reset(NspFigure *F)
{
  NspFigureData *Gc = F->obj->gc;
  if ( Gc->colormap != NULL)
    nsp_matrix_destroy(Gc->colormap);
  /* in order to use default colormap */
  Gc->colormap = nsp_matrix_create("colormap",'r',0,0);
  Gc->foreground = -1;
  Gc->background = -1;
  Gc->color= 1;
  Gc->dashes=  1;
  Gc->font=  2;
  Gc->font_size=  1;
  Gc->hidden3d=  4;
  Gc->line_mode=  0;
  Gc->line_style=  1;
  Gc->mark=  0;
  Gc->mark_size=  0;
  Gc->pattern=  1;
  Gc->pixmap=  0;
  Gc->thickness=  1;
  Gc->use_color=  1;
  Gc->auto_clear= FALSE;
  Gc->current_axe = 0;
  Gc->current_objs3d = 0;
  Gc->current_axe_or_objs3d = 0;
  Gc->mtlb_mode = -1;
}


/**
 * nsp_figure_process_updates:
 * @F: a #NspFigure
 *
 * call process_updates on the graphic window if any
 * associated to figure @F.
 *
 **/
static void nsp_figure_process_updates(NspFigure *F)
{
  BCG *Xgc =  F->obj->Xgc;
  if ( Xgc == NULL ) return ;
  Xgc->graphic_engine->process_updates(Xgc);
}

/**
 * nsp_check_for_figure :
 * @Xgc:
 *
 * check if a figure is present in @Xgc.
 * if not figure is created and set as current if
 * set_current is %TRUE.
 *
 * Returns: a new Figure or %NULL
 **/

NspFigure *nsp_check_for_figure(BCG *Xgc,int set_current)
{
  NspFigure *F;
  if ( Xgc == NULL ) return NULL;
  if ( Xgc->figure != NULL)
    {
      if ( set_current == TRUE )
	{
	  if ( nsp_set_current_figure(Xgc->figure) == FAIL) return NULL;
	}
      return Xgc->figure;
    }
  F = nsp_create_default_figure(Xgc);
  if ( F == NULL) return NULL;
  if ( set_current == TRUE )
    {
      if (  nsp_set_current_figure(F) == FAIL) return NULL;
    }
  /* destroy the local copy */
  nsp_figure_destroy(F);
  F = nsp_get_current_figure();
  return F;
}

/**
 * nsp_check_for_current_figure :
 * @void:
 *
 * returns the current figure, creating
 * the figure if necessary.
 *
 * Returns:
 **/

NspFigure *nsp_check_for_current_figure(void)
{
  NspFigure *F;
  F = nsp_get_current_figure();
  if ( F == NULL)
    {
      /* create a new figure and store it in Xgc */
      BCG *Xgc=nsp_check_graphic_context();
      F = nsp_check_for_figure(Xgc,TRUE);
    }
  return F;
}

/**
 * nsp_check_for_current_axes:
 * @create: integer 
 *
 * returns the current axe and create one
 * if necessary.
 *
 * Returns: a new #NspAxes or %NULL.
 **/

NspAxes *nsp_check_for_current_axes(int create)
{
  int l,i;
  NspObject *Obj;
  NspList *L;
  NspFigure *F;
  NspAxes *Axes= NULLAXES;
  F = nsp_check_for_current_figure();
  if ( F == NULL) return NULL;
  L= F->obj->children;
  l= nsp_list_length(L);
  /* return current axes if already set */
  if ( F->obj->gc->current_axe >= 1 && F->obj->gc->current_axe <= l)
    {
      Obj = nsp_list_get_element(L,F->obj->gc->current_axe);
      if ( Obj != NULLOBJ && IsAxes(Obj) )
	{
	  return (NspAxes *) Obj;
	}
    }
  /* returns the first axe found */
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj) )
	{
	  F->obj->gc->current_axe = i;
	  return  (NspAxes *) Obj;
	}
    }
  if (create)
    {
      /* create a new axes */
      if (( Axes= nsp_axes_create_default("axe")) == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) Axes)== FAIL)
	{
	  nsp_axes_destroy(Axes);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      F->obj->gc->current_axe = 1;
      return Axes;
    }
  return NULL;
}

/**
 * nsp_check_for_current_objs3d:
 * @create: integer 
 *
 * returns the current objs3d and create one
 * if necessary.
 *
 * Returns: a new #NspObjs3d or %NULL.
 **/

NspObjs3d *nsp_check_for_current_objs3d(int create)
{
  int l,i;
  NspObject *Obj;
  NspList *L;
  NspFigure *F;
  NspObjs3d *Objs3d = NULL;
  F = nsp_check_for_current_figure();
  if ( F == NULL) return NULL;
  L= F->obj->children;
  l= nsp_list_length(L);
  /* return current objs3d if already set */
  if ( F->obj->gc->current_objs3d >= 1 && F->obj->gc->current_objs3d <= l)
    {
      Obj = nsp_list_get_element(L,F->obj->gc->current_objs3d);
      if ( Obj != NULLOBJ && IsObjs3d(Obj) )
	{
	  return (NspObjs3d *) Obj;
	}
    }
  /* returns the first objs3d found */
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsObjs3d(Obj) )
	{
	  F->obj->gc->current_objs3d = i;
	  return (NspObjs3d *) Obj;
	}
    }
  if (create)
    {
      /* create a new Objs3d */
      if ((Objs3d= nsp_objs3d_create_default("objs3d")) == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) Objs3d)== FAIL)
	{
	  nsp_objs3d_destroy(Objs3d);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      F->obj->gc->current_objs3d = 1;
      return Objs3d;
    }
  return NULL;
}

/**
 * nsp_check_for_current_axes_or_objs3d:
 * @create: integer 
 *
 * returns the current axes or objs3d and create one
 * if necessary.
 *
 * Returns: a new #NspObjs3d or %NULL.
 **/

NspObject *nsp_check_for_current_axes_or_objs3d(int create)
{
  int l,i;
  NspObject *Obj;
  NspList *L;
  NspFigure *F;
  F = nsp_check_for_current_figure();
  if ( F == NULL) return NULL;
  L= F->obj->children;
  l= nsp_list_length(L);
  /* return current if already set */
  if ( F->obj->gc->current_axe_or_objs3d >= 1 && F->obj->gc->current_axe_or_objs3d <= l)
    {
      Obj = nsp_list_get_element(L,F->obj->gc->current_axe_or_objs3d);
      if ( Obj != NULLOBJ && ( IsObjs3d(Obj) || IsAxes(Obj) ))
	{
	  return Obj;
	}
    }
  /* returns the first axes or objs3d found */ 
  for ( i= 1; i <= l ; i++)
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && ( IsObjs3d(Obj) || IsAxes(Obj)) )
	{
	  F->obj->gc->current_axe_or_objs3d = i;
	  return Obj;
	}
    }
  if ( create )
    {
      /* create a new axes */
      NspAxes *Axes =  nsp_axes_create_default("axe");
      if ( Axes == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) Axes)== FAIL)
	{
	  nsp_axes_destroy(Axes);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      F->obj->gc->current_axe = 1;
      F->obj->gc->current_axe_or_objs3d = 1;
      return (NspObject *) Axes;
    }
  return NULL;
}


void nsp_send_scale_2D_to_opengl(BCG *Xgc)
{
#ifdef WITH_OPENGL
  /* transmit info to opengl */
  if ( Xgc->graphic_engine == &GL_gengine )
    {
      nsp_ogl_set_2dview(Xgc);
    }
#endif
}

void nsp_send_scale_3D_to_opengl(BCG *Xgc)
{
#ifdef WITH_OPENGL
  /* transmit info to opengl */
  if ( Xgc->graphic_engine == &GL_gengine )
    {
      nsp_ogl_set_3dview(Xgc);
    }
#endif
}


/**
 * nsp_figure_remove_children:
 * @F:
 *
 *
 *
 * Returns:
 **/

int nsp_figure_remove_children(NspFigure *F)
{
  if (F->obj->children != NULL )
    {
      nsp_figure_children_unlink_figure(F);
      nsp_list_destroy(F->obj->children);
    }
  F->obj->gc->current_axe = 0;
  if ((F->obj->children = nsp_list_create("children")) == NULLLIST)
    return FAIL;
  else
    return OK;
}


/**
 * nsp_get_wid_figure:
 * @wid: a graphic window id
 *
 * returns a #NspFigure object associated to window id
 * if it exists or %NULL if the graphic window has no associated
 * figure.
 *
 * Returns: a new #NspFigure or %NULL
 **/

NspObject *nsp_get_wid_figure(int wid)
{
  BCG *Xgc;
  NspFigure *F = NULL;
  /* check if we have a graphic window with
   * a figure non recorded as current
   */
  Xgc=window_list_search_new(wid);
  if ( Xgc == NULL) goto end;
  if ((F= nsp_get_figure(Xgc))== NULL) goto end;
  return nsp_object_copy((NspObject *) F);
 end:
  return (NspObject *) nsp_matrix_create(NVOID,'r',0,0);
}
