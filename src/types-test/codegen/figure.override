/* -*- Mode: C -*- */
%%
include-public Figure

/* inserted at the end of public part of include file
 * of figure.h
 */

extern BCG *nsp_check_graphic_context(void);
extern NspFigure *nsp_get_figure(BCG *Xgc);
extern void tape_store_graphic_object(BCG *Xgc,NspObject *obj);
extern NspFigure *nsp_check_for_figure(BCG *Xgc);
extern NspObject * nsp_check_for_axes_or_objs3d(BCG *Xgc,const double *wrect);
extern NspObject * nsp_check_pt_axes_or_objs3d(BCG *Xgc,const int *pt);
extern void nsp_figure_force_redraw(nsp_figure *F,void *rect);
extern void nsp_list_link_figure(NspList *L, nsp_figure  *F,void *A);
extern void nsp_list_unlink_figure(NspList *L, nsp_figure *F);
extern int nsp_list_check_figure(NspList *L, nsp_figure *F);
extern void nsp_graphic_link_figure(NspGraphic *G, void *F, void *A);
extern void nsp_graphic_unlink_figure(NspGraphic *G, void *F);

%%
include-private Figure

/* inserted in the private part of include file
 * of classa.h
 */
static void nsp_draw_figure(BCG *Xgc,NspGraphic *Obj, void *data);
static int nsp_figure_connect(NspFigure *);
static int nsp_figure_unconnect(NspFigure *);
static int nsp_figure_draw_latter(NspFigure *);
static int nsp_figure_draw_now(NspFigure *);
static void nsp_figure_children_unlink_figure(NspFigure *F);
static void nsp_figure_children_link_figure(NspFigure *F);
static int nsp_figure_check_children(NspFigure *F,NspList *L);
static NspFigure *nsp_get_current_figure(void);
static NspList *nsp_figure_children(NspGraphic *Obj);
static NspAxes *nsp_get_current_axes(void);
static int nsp_figure_start_compound(NspFigure *F);
static NspCompound *nsp_figure_end_compound(char *name,NspFigure *F);
static int nsp_figure_remove_element(NspFigure *F,NspGraphic *Obj);

%%
headers

#include <nsp/figuredata.h>
#include <nsp/figure.h>
#include <nsp/axes.h>
#include <nsp/objs3d.h>
#include <nsp/compound.h>

%%
init 

Init portion 

%%
override-type Figure
  /* inserted verbatim in the type definition */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_figure;
  ((NspTypeGraphic *) type->surtype)->children = (children_func *) nsp_figure_children ;

%%
ignore-glob
  *_get_type

%%
override_destroy_prelim Figure
  /* inserted verbatim at the begining of destroy */
  nsp_figure_children_unlink_figure(H);

%%
override figure_attach kwargs
int _wrap_figure_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  /* here we should get the Xgc with the same id as figure XXXX */
  Xgc=nsp_check_graphic_context();
  tape_store_graphic_object(Xgc, pl);
  return 0;
}

%%
override-attr Figure.children

static NspObject *_wrap_figure_get_obj_children(void *self,char *attr, int *copy)
{
  NspList *ret;
  *copy = TRUE;
  ret = ((NspList*) ((NspFigure *) self)->obj->children);
  return (NspObject *) ret;
}

static int _wrap_figure_set_children(void *self, char *attr, NspObject *O)
{
  NspList *children;

  if ( ! IsList(O) ) return FAIL;
  if ((children = (NspList *) nsp_object_copy_and_name(attr,O)) == NULLLIST) return FAIL;
  if (((NspFigure *) self)->obj->children != NULL ) 
    {
      nsp_figure_children_unlink_figure(self);
      nsp_list_destroy(((NspFigure *) self)->obj->children);
    }
  ((NspFigure *) self)->obj->children= children;
  nsp_figure_children_link_figure(self);
  return OK;
}

static int _wrap_figure_set_obj_children(void *self,NspObject *val)
{
  if ( ! IsList(val) ) return FAIL;
  if ( nsp_figure_check_children(self,(NspList *) val )== FAIL) 
    {
      return FAIL;
    }
  if (((NspFigure *) self)->obj->children != NULL ) 
    {
      nsp_figure_children_unlink_figure(self);
      nsp_list_destroy(((NspFigure *) self)->obj->children);
    }
  ((NspFigure *) self)->obj->children=(NspList *) val ;
  nsp_figure_children_link_figure(self);
  return OK;
}

%%
override nsp_extractelts_figure kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_figure(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_figure kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_figure(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
override nsp_figure_extract kwargs

static int _wrap_nsp_figure_extract(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  NspCompound *C=nsp_figure_get_axe_elts_as_compound(NVOID,self);
  if ( C == NULL) return RET_BUG;
  MoveObj(stack,1,NSP_OBJECT(C));
  return 1;
}

%%
override nsp_figure_start_compound kwargs

static int _wrap_nsp_figure_start_compound(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  if (  nsp_figure_start_compound(self) == FAIL) return RET_BUG;
  return 0;
}


%%
override nsp_figure_end_compound kwargs

static int _wrap_nsp_figure_end_compound(NspFigure *self,Stack stack,int rhs,int opt,int lhs)
{
  NspCompound *C;
  if ((C = nsp_figure_end_compound("compound",self))==NULL) return RET_BUG;
  MoveObj(stack,1,NSP_OBJECT(C));
  return 1;
}

%%
last


/* draw the axes contained in the Figure 
 *
 */

static void nsp_draw_figure(BCG *Xgc,NspGraphic *Obj, void *data)
{
  Cell *cloc;
  NspList *L;
  NspFigure *F = (NspFigure *) Obj;
  /* draw elements */
  L = F->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->draw(Xgc,G,data);
	}
      cloc = cloc->next;
    }
}

/* create a graphic window (in fact a Gtk one)
 * an set this window as the current one 
 * then add figure to the Xgc associated to the 
 * window 
 */

#ifdef WITH_GTKGLEXT 
extern Gengine GL_gengine; 
#endif 

#ifdef WITH_CAIRO
extern Gengine Cairo_gengine; 
#endif 

extern Gengine XFig_gengine, Pos_gengine, Gtk_gengine; 


static int nsp_figure_connect(NspFigure *F)
{
  driver_initgraphic *initg = Gtk_gengine.initgraphic;
  int v1=-1, wdim[2], wpdim[2],  wpos[2];
  BCG *Xgc;

  if (F->obj->Xgc != NULL ) 
    {
      /* Figure is already connected */
      return OK;
    }
#if 0
  Xgc = window_list_search_new(F->obj->id);

  if ( Xgc != NULL) 
    {
      NspFigure *F1=nsp_get_figure(Xgc);
      if ( F1 != NULL && nsp_figure_eq(F1,NSP_OBJECT(F))) return OK;
      /* delete window F->obj->id and reconnect */
      Sciprintf("\tFigure %d already connected\n",F->obj->id);
      Sciprintf("\tdeleting window %d\n",F->obj->id);
      Xgc->actions->delete(Xgc);
     }
 #endif
 
  if ( F->obj->dims != NULL && F->obj->dims->mn == 2 )
    { 
      wdim[0] = F->obj->dims->R[0];
      wdim[1] = F->obj->dims->R[1];
    }
  
  if ( F->obj->viewport_dims != NULL &&  F->obj->viewport_dims->mn == 2 ) 
    { 
      wpdim[0] = F->obj->viewport_dims->R[0];
      wpdim[1] = F->obj->viewport_dims->R[1];
    }

  /* A FAIRE c'est les offsets du viewport */
  /* 
     if (viewport != NULL && viewport->mn != 2 ) 
     {
     viewport[0]= F->obj->viewport_pos->R[0];
     viewport[1]= F->obj->viewport_pos->R[1];
     }
  */
  if ( F->obj->position != NULL && F->obj->position->mn == 2 )
    { 
      wpos[0] = F->obj->position->R[0];
      wpos[1] = F->obj->position->R[1];
    }
  
  if ( strcmp(F->obj->driver,"Gtk") == 0) initg = Gtk_gengine.initgraphic;
  else if ( strcmp(F->obj->driver,"OpenGl") == 0) 
    {
#ifdef WITH_GTKGLEXT 
      initg = GL_gengine.initgraphic;
#else 
      Sciprintf("No opengl support in this version\n");
#endif 
    }
  else if ( strcmp(F->obj->driver,"Cairo") == 0) 
    {
#ifdef WITH_CAIRO 
      initg = Cairo_gengine.initgraphic;
#else 
      Sciprintf("No cairo support in this version\n");
#endif
    }
  else 
    initg = Gtk_gengine.initgraphic;
  v1 = -1; 
  F->obj->id=
    initg("",&v1, 
	  (F->obj->dims != NULL  && F->obj->dims->mn == 2 ) ? wdim :NULL, 
	  (F->obj->viewport_dims  != NULL &&  F->obj->viewport_dims->mn == 2) ? wpdim : NULL , 
	  NULL, 
	  ( F->obj->position != NULL && F->obj->position->mn == 2 ) ? wpos: NULL , 
	  'e',NULL);
  
  /* check ! */
  Xgc = window_list_search_new(F->obj->id);
  if ( Xgc == NULL) 
    {
      Sciprintf("failed to connect figure\n");
      return FAIL;
    }
  F->obj->Xgc = Xgc;

  Xgc->graphic_engine->xset_wresize(Xgc,F->obj->wresize);
  
  if ( F->obj->fname != NULL && strcmp(F->obj->fname,"") != 0 )
    Xgc->graphic_engine->setpopupname(Xgc,F->obj->fname);
  tape_store_graphic_object(Xgc,NSP_OBJECT(F));
  /* 
     F->obj->ref_count++;
     ((NspGraphic *) F)->obj->ref_count++;
  */
  return OK;
}



/* delete window associated to F 
 */

static int nsp_figure_unconnect(NspFigure *F)
{
  BCG *Xgc =  F->obj->Xgc;
  if ( Xgc != NULL)  Xgc->actions->delete(Xgc);
  F->obj->Xgc = NULL;
  return OK ;
}

/* utilities */

void nsp_list_link_figure(NspList *L, nsp_figure *F, void *A)
{
  /* A should be a nsp_axes */

  Cell *cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->link_figure(G,F,A);
	}
      cloc = cloc->next;
    }
}

void nsp_list_unlink_figure(NspList *L, nsp_figure *F)
{
  Cell *cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->unlink_figure(G,F);
	}
      cloc = cloc->next;
    }
}

int nsp_list_check_figure(NspList *L, nsp_figure *F)
{
  Cell *cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  if ( ! IsGraphic( cloc->O))
	    {
	      Scierror("Error: List should only contain graphic objects\n");
	      return FAIL;
	    }
	  if ( ((NspGraphic *) cloc->O)->obj->Fig != NULL && ((NspGraphic *) cloc->O)->obj->Fig != F ) 
	    {
	      Scierror("Error: A graphic object already belongs to an other figure\n");
	      return FAIL;
	    }
	}
      cloc = cloc->next;
    }
  return OK;
}


/* set all the children Fig field 
 *
 */

static void nsp_figure_children_link_figure(NspFigure *F)
{
  nsp_list_link_figure(F->obj->children, F->obj, NULL);
}


static void nsp_figure_children_unlink_figure(NspFigure *F)
{
  nsp_list_unlink_figure(F->obj->children,F->obj);
}


static int nsp_figure_check_children(NspFigure *F,NspList *L)
{
  return  nsp_list_check_figure(F->obj->children,F->obj);
}


/* send a force redraw to a figure 
 * should be improved with a rectangle to be used.
 * Note that a force redraw is only effective when gtk events 
 * can be activated.
 */

void nsp_figure_force_redraw(nsp_figure *F,void *rect) 
{
  /* XX should be stored in figure to avoid a search */
  BCG *Xgc;
  if ( F == NULL) return ;
  if ( F->draw_now== FALSE) return;
  Xgc = window_list_search_new(F->id);
  if ( Xgc == NULL) return;
  Xgc->graphic_engine->force_redraw(Xgc,rect);
}



extern NspObject * tape_search_graphic_object(BCG *Xgc,int winnumber);

static NspFigure *nsp_get_current_figure(void)
{
  NspObject  *F = NULL;
  BCG *Xgc = nsp_check_graphic_context();
  if ( Xgc == NULL) return NULL;
  F = tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( F == NULL) return NULL;
  if ( ! IsFigure(F)) return NULL;
  return (NspFigure *) F;
}

static NspList *nsp_figure_children(NspGraphic *Obj)
{
  return  ((NspFigure *) Obj)->obj->children;
}


static NspAxes *nsp_current_axes=NULL;

static NspAxes *nsp_get_current_axes(void)
{
  NspObject *Obj;
  NspFigure *cf;
  NspList *L;
  if ( nsp_current_axes != NULL) return nsp_current_axes;
  cf = nsp_get_current_figure();
  if ( cf == NULL) return NULL;
  L= cf->obj->children;
  /* return the first axes */
  if ( (Obj = nsp_list_get_element(L,1)) ==  NULLOBJ )
    {
      /* maybe we could here build a current axes */
      return NULL;
    }
  nsp_current_axes= (NspAxes *) Obj;
  return nsp_current_axes;
}

static NspFigure *nsp_create_default_figure(BCG *Xgc)
{
  NspFigure *Fig;
  char *name,*driver;
  /* take care that nsp_figure_create won't allocate its fields 
   * we have to make the copies here 
   */
  if (( name =new_nsp_string("Graphic window")) == NULLSTRING)
    return NULL;
  if (( driver =new_nsp_string("Gtk")) == NULLSTRING)
    return NULL;
  Fig = nsp_figure_create("fig",name,driver,Xgc->CurWindow,NULL,NULL,TRUE,NULL,NULL,
			  TRUE,NULL,Xgc,NULL);
  /* insert in Xgc */
  if ( Fig != NULL)  tape_store_graphic_object(Xgc,NSP_OBJECT(Fig));
  return Fig;
}


NspFigure *nsp_check_for_figure(BCG *Xgc)
{
  NspFigure  *F = (NspFigure *) tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( F == NULL) 
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  return F;
}


/* checks for a figure and an axes in Xgc 
 * create one if not present. 
 * Xgc should not be null here. 
 * this is not a definitive function just a hack.
 * since graphic should be driven by Figure Not by Xgc 
 */

NspAxes * nsp_check_for_axes(BCG *Xgc,const double *wrect)
{
  int i,l, created=FALSE;
  NspObject *Obj=NULLOBJ,*Axes=NULLOBJ;
  NspList *L;
  NspFigure  *F = (NspFigure *) tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( F == NULL) 
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
      created=TRUE;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  L= F->obj->children;
  /* return the first axes found 
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++) 
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj) )
	{
	  Axes= Obj;
	  if ( wrect == NULL) 
	    {
	      break;
	    }
	  if ( Abs(((NspAxes *)Axes)->obj->wrect->R[0]-wrect[0])< 1.e-4 
	       && Abs(((NspAxes *)Axes)->obj->wrect->R[1]-wrect[1])< 1.e-4 
	       && Abs(((NspAxes *)Axes)->obj->wrect->R[2]-wrect[2])< 1.e-4 
	       && Abs(((NspAxes *)Axes)->obj->wrect->R[3]-wrect[3])< 1.e-4 )
	    {
	      break;
	    }
	  Axes = NULL;
	}
    }
  if ( Axes == NULLOBJ) 
    {
      /* create a new axes */
      NspAxes *axe= nsp_axes_create_default("axe");
      if ( axe == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) axe)== FAIL) 
	{
	  nsp_axes_destroy(axe);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      Axes =(NspObject *) axe;
    }
  if ( created==TRUE) nsp_figure_destroy(F);
    
  return (NspAxes *) Axes;
}


/* checks for a figure and a 3dobj-axes in Xgc 
 * create one if not present. 
 * Xgc should not be null here. 
 * this is not a definitive function just a hack.
 * since graphic should be driven by Figure Not by Xgc 
 */

NspObjs3d * nsp_check_for_objs3d(BCG *Xgc,const double *wrect)
{
  int i,l , created=FALSE;
  NspObject *Obj=NULLOBJ,*Objs3d=NULLOBJ;
  NspList *L;
  NspFigure  *F = (NspFigure *) tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( F == NULL) 
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
      created = TRUE;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  L= F->obj->children;
  /* return the first axes found 
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++) 
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  Objs3d=Obj;
	  if ( wrect == NULL) 
	    {
	      break;
	    }
	  if ( Abs(((NspObjs3d *)Objs3d)->obj->wrect->R[0]-wrect[0])< 1.e-4 
	       && Abs(((NspObjs3d *)Objs3d)->obj->wrect->R[1]-wrect[1])< 1.e-4 
	       && Abs(((NspObjs3d *)Objs3d)->obj->wrect->R[2]-wrect[2])< 1.e-4 
	       && Abs(((NspObjs3d *)Objs3d)->obj->wrect->R[3]-wrect[3])< 1.e-4 )
	    {
	      break;
	    }
	  Objs3d = NULL;
	  break;
	}
    }
  if ( Objs3d == NULLOBJ) 
    {
      /* create a new obj3d */
      NspObjs3d *obj3d= nsp_objs3d_create_default("axe3d");
      if ( obj3d == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) obj3d)== FAIL) 
	{
	  nsp_objs3d_destroy(obj3d);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      Objs3d =(NspObject *) obj3d;
    }
  if ( created==TRUE) nsp_figure_destroy(F);
  return (NspObjs3d *) Objs3d;
}


NspObject * nsp_check_for_axes_or_objs3d(BCG *Xgc,const double *wrect)
{
  int i,l, created=FALSE;
  NspObject *Obj=NULLOBJ,*Res=NULLOBJ;
  NspList *L;
  NspFigure  *F = (NspFigure *) tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( F == NULL) 
    {
      /* create a new figure and store it in Xgc */
      F = nsp_create_default_figure(Xgc);
      if ( F == NULL) return NULL;
      created=TRUE;
    }
  if ( ! IsFigure((NspObject *) F)) return NULL;
  L= F->obj->children;
  /* return the first axes or objs3d found 
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++) 
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj))
	{
	  Res =Obj;
	  if ( wrect == NULL) 
	    {
	      break;
	    }
	  if ( Abs(((NspAxes *)Res)->obj->wrect->R[0]-wrect[0])< 1.e-4 
	       && Abs(((NspAxes *)Res)->obj->wrect->R[1]-wrect[1])< 1.e-4 
	       && Abs(((NspAxes *)Res)->obj->wrect->R[2]-wrect[2])< 1.e-4 
	       && Abs(((NspAxes *)Res)->obj->wrect->R[3]-wrect[3])< 1.e-4 )
	    {
	      break;
	    }
	  Res = NULL;
	}
      else if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  Res=Obj;
	  if ( wrect == NULL) 
	    {
	      break;
	    }
	  if ( Abs(((NspObjs3d *)Res)->obj->wrect->R[0]-wrect[0])< 1.e-4 
	       && Abs(((NspObjs3d *)Res)->obj->wrect->R[1]-wrect[1])< 1.e-4 
	       && Abs(((NspObjs3d *)Res)->obj->wrect->R[2]-wrect[2])< 1.e-4 
	       && Abs(((NspObjs3d *)Res)->obj->wrect->R[3]-wrect[3])< 1.e-4 )
	    {
	      break;
	    }
	  Res = NULL;
	  break;
	}
	       
    }
  if ( Res == NULLOBJ) 
    {
      /* create a new axes */
      NspAxes *axe= nsp_axes_create_default("axe");
      if ( axe == NULL) return NULL;
      /* store in Figure */
      if ( nsp_list_begin_insert(L,(NspObject *) axe)== FAIL) 
	{
	  nsp_axes_destroy(axe);
	  return NULL;
	}
      /* set figure informations in axe */
      nsp_figure_children_link_figure(F);
      Res =(NspObject *) axe;
    }
  if ( created==TRUE) nsp_figure_destroy(F);
  return Res;
}

/* check if a point is inside an axes or objs3d 
 */

NspObject * nsp_check_pt_axes_or_objs3d(BCG *Xgc,const int *pt)
{
  int wdim[]= {Xgc->CWindowWidth,  Xgc->CWindowHeight};
  int i,l,  Irect[4];
  NspObject *Obj=NULLOBJ,*Res=NULLOBJ;
  NspList *L;
  NspFigure  *F = (NspFigure *) tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( ! IsFigure((NspObject *) F)) return NULL;

  L= F->obj->children;
  /* return the first axes or objs3d found 
   * Note that the children of a Figure should be axes or 3daxes (obj3d)
   */
  l= nsp_list_length(L);
  for ( i= 1; i <= l ; i++) 
    {
      Obj = nsp_list_get_element(L,i);
      if ( Obj != NULLOBJ && IsAxes(Obj))
	{
	  Res =Obj;
	  /* the figure rectangle in int values */
	  Irect[0]=((NspAxes *) Res)->obj->wrect->R[0]*wdim[0];
	  Irect[1]=((NspAxes *) Res)->obj->wrect->R[1]*wdim[1];
	  Irect[2]=((NspAxes *) Res)->obj->wrect->R[2]*wdim[0];
	  Irect[3]=((NspAxes *) Res)->obj->wrect->R[3]*wdim[1];
	  
	  if ( Irect[0] <= pt[0] && pt[0] <= Irect[0]+Irect[2] 
	       && Irect[1] <= pt[1] && pt[1] <= Irect[1]+Irect[3] )
	    {
	      break;
	    }
	  Res = NULL;
	}
      else if ( Obj != NULLOBJ &&  IsObjs3d(Obj))
	{
	  Res=Obj;
	  /* the figure rectangle in int values */
	  Irect[0]=((NspObjs3d *) Res)->obj->wrect->R[0]*wdim[0];
	  Irect[1]=((NspObjs3d *) Res)->obj->wrect->R[1]*wdim[1];
	  Irect[2]=((NspObjs3d *) Res)->obj->wrect->R[2]*wdim[0];
	  Irect[3]=((NspObjs3d *) Res)->obj->wrect->R[3]*wdim[1];
	  
	  if ( Irect[0] <= pt[0] && pt[0] <= Irect[0]+Irect[2] 
	       && Irect[1] <= pt[1] && pt[1] <= Irect[1]+Irect[3] )
	    {
	      break;
	    }
	  Res = NULL;
	}
	       
    }
  return Res;
}



static int nsp_figure_draw_latter(NspFigure *F)
{
  F->obj->draw_now=FALSE; 
  return OK ;
}

static int nsp_figure_draw_now(NspFigure *F)
{
  F->obj->draw_now=TRUE; 
  nsp_figure_force_redraw(F->obj,NULL);
  return OK ;
}

/* get the axes which contains a point (px,py) 
 * and use the axes scale to convert point to double dp[2].
 * This function has the side effect that the axe scale is 
 * set in Xgc.
 */

NspGraphic *nsp_get_point_axes(BCG *Xgc,int px,int py,double *dp)
{
  NspGraphic *gr=NULL;
  NspFigure *F=nsp_get_figure(Xgc);
  int ww= Xgc->CWindowWidth, wh = Xgc->CWindowHeight;
  NspList *L;
  Cell *cloc;
  if ( F == NULL) return NULL;
  L= F->obj->children;
  cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( IsAxes(NSP_OBJECT(G)))
	    { 
	      NspAxes *A = (NspAxes *) G;
	      int w = ww*A->obj->wrect->R[2];
	      int h = wh*A->obj->wrect->R[3];
	      int x = ww*A->obj->wrect->R[0];
	      int y = ww*A->obj->wrect->R[1];
	      if (cloc->next==NULL || ( px >= x && px <= x+w && py >= y && py <= y +h))
		{
		  gr = G;
		  nsp_axes_i2f(A->obj,px,py,dp);
		}
	    }
	  else if ( IsObjs3d(NSP_OBJECT(G)))
	    {
	      NspObjs3d *A = (NspObjs3d *) G;
	      int w = ww*A->obj->wrect->R[2];
	      int h = wh*A->obj->wrect->R[3];
	      int x = ww*A->obj->wrect->R[0];
	      int y = ww*A->obj->wrect->R[1];
	      if ( px >= x && px <= x+w && py >= y && py <= y +h)
		{
		  gr = G;
		  /* a revoir XXXXX */
		  set_scale(Xgc,"fTtfft",A->obj->wrect->R,A->obj->frect->R,NULL,NULL,A->obj->arect->R);
		  scale_i2f(Xgc->scales,dp,dp+1,&px,&py,1);
		}
	    }
	}
      cloc = cloc->next;
    }
  return gr;
}


NspFigure *nsp_get_figure(BCG *Xgc)
{
  NspObject  *F = NULL;
  if ( Xgc == NULL) return NULL;
  F = tape_search_graphic_object(Xgc,Xgc->CurWindow);
  if ( F == NULL) return NULL;
  if ( ! IsFigure(F)) return NULL;
  return (NspFigure *) F;
}

/* get the elements of the first axe as a compound 
 * and remove the elements. 
 */

NspCompound *nsp_figure_get_axe_elts_as_compound(char *name,NspFigure *F)
{
  NspAxes *A; 
  NspList *L;
  NspCompound *C;
  if ((C= nsp_compound_create(name,NULL,NULL,NULL))== NULL) return NULL;
  /* unlink the children from the figure */
  /* return the first axes XXX  */
  if ( (A =(NspAxes *) nsp_list_get_element(F->obj->children,1)) ==  NULL )
    return NULL;
  if ( IsAxes(NSP_OBJECT(A)) == FALSE) return NULL;
  nsp_list_unlink_figure(A->obj->children,F->obj);
  /* swap respective children */
  L = C->obj->children;
  C->obj->children = A->obj->children;
  A->obj->children = L;
  return C;
}

/* get the elements in the first axe 
 * put them in a compound. 
 * Then: 
 *  if the axe is unique store the compound in the axe
 *  if an other axe exists store the compound on the next 
 *  axe and remove the first one. 
 *
 */

static NspCompound *nsp_figure_end_compound(char *name,NspFigure *F)
{
  NspAxes *A1,*A2;
  NspList *L;
  NspCompound *C;
  if ((C= nsp_compound_create(name,NULL,NULL,NULL))== NULL) return NULL;
  /* unlink the children from the figure */
  /* return the first axes XXX  */
  if ( (A1 =(NspAxes *) nsp_list_get_element(F->obj->children,1)) ==  NULL )
    return NULL;
  if ( IsAxes(NSP_OBJECT(A1)) == FALSE) return NULL;
  /* swap respective children */
  L = C->obj->children;
  C->obj->children = A1->obj->children;
  A1->obj->children = L;
  if ( (A2 =(NspAxes *) nsp_list_get_element(F->obj->children,2)) ==  NULL )
    {
      /* insert the compound in A1 */
      nsp_graphic_link_figure((NspGraphic *) C, ((NspFigure *) F)->obj, A1->obj);
      if ( nsp_list_begin_insert(L,(NspObject *) C)== FAIL)
	return NULL;
    }
  else
    {
      /* insert the compound in A2 */
      nsp_graphic_link_figure((NspGraphic *) C, ((NspFigure *) F)->obj, A2->obj);
      if ( nsp_list_begin_insert(A2->obj->children,(NspObject *) C)== FAIL)
	return NULL;
      /* remove A1 */
      nsp_list_remove_first(F->obj->children);
    }
  return C;
}


/* start a new axe in a Figure 
 * which can be used to collect elements 
 * in a compound.
 * with nsp_figure_end_compound(char *name,NspFigure *F)
 */

static int nsp_figure_start_compound(NspFigure *F)
{
  NspAxes *axe= nsp_axes_create_default("axe");
  if ( axe == NULL) return FAIL;
  /* store in Figure */
  if ( nsp_list_begin_insert(F->obj->children,(NspObject *) axe)== FAIL) 
    {
      nsp_axes_destroy(axe);
      return FAIL;
    }
  /* set figure informations in axe */
  ((NspGraphic *) axe)->type->link_figure((NspGraphic *) axe,F->obj, axe->obj);
  return OK;
}


/* Remove a graphic object in a Figure 
 * by exploring the axes
 *
 */

static int nsp_list_delete_graphic_obj(NspFigure *F,NspList *L, NspGraphic *Obj)
{
  Cell *Loc = L->first;
  while ( Loc != NULLCELL ) 
    {
      if ( Loc->O != NULLOBJ )
	{
	  NspGraphic *G1= (NspGraphic *) Loc->O;
	  if ( G1->obj == Obj->obj ) 
	    {
	      G1->type->unlink_figure(G1,F->obj);
	      nsp_remove_cell_from_list(L, Loc);
	      L->icurrent = 0;
	      L->current = NULLCELL;
	      nsp_cell_destroy(&Loc);
	      return OK;
	    }
	}
      Loc = Loc->next;
    }
  return FAIL;
}

static int nsp_figure_remove_element(NspFigure *F,NspGraphic *Obj)
{
  NspList *L= F->obj->children;
  Cell *cloc  = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  if ( IsAxes(NSP_OBJECT(G)))
	    { 
	      NspAxes *A = (NspAxes *) G;
	      NspList *L1=  A->obj->children;
	      if (nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
	    }
	  else if ( IsObjs3d(NSP_OBJECT(G)))
	    {
	      NspObjs3d *A = (NspObjs3d *) G;
	      NspList *L1=  A->obj->children;
	      if ( nsp_list_delete_graphic_obj(F,L1, Obj)==OK) return OK;
	    }
	}
      cloc = cloc->next;
    }
  return FAIL;
}


