/* -*- Mode: C -*- */
%%
include-public  Polyline3d

/* inserted at the end of public part of include file */
extern void drawsegments3D(BCG *Xgc,double *x,double *y,double *z, int n, int *style, int iflag);

%%
include-private  Polyline3d

/* inserted in the private part of include file */
static void nsp_draw_polyline3d(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_polyline3d(NspGraphic *o,const double *tr);
static void nsp_rotate_polyline3d(NspGraphic *o,double *R);
static void nsp_scale_polyline3d(NspGraphic *o,double *alpha);
static int nsp_getbounds_polyline3d(NspGraphic *o,double *bounds);

static void nsp_polyline3d_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF,
				 int *n, int k, double *lim);
static int nsp_polyline3d_n_faces(BCG *Xgc,NspGraphic *Obj);
static int nsp_check_polyline3d(NspPolyline3d *P);

static void draw_polyline3d_ogl(BCG *Xgc,void *Ob);
static void draw_polyline3d_face(BCG *Xgc,NspGraphic *Ob, int j);

%%
headers
#include <nsp/object.h>
#include <nsp/polyline3d.h>
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 
#include "../graphics-new/Plo3dObj.h"
#include <nsp/polyhedron.h>
#include <nsp/spolyhedron.h>
#include <nsp/grcommon.h>

%%
init 

Init portion 

%%
override-type Polyline3d
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_polyline3d;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_polyline3d ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_polyline3d  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_polyline3d  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_polyline3d  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Polyline3d */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 
  ((NspTypeGraphic *) type->surtype)->zmean = nsp_polyline3d_zmean;
  ((NspTypeGraphic *) type->surtype)->n_faces = nsp_polyline3d_n_faces;

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override_int_create_final 
  /* verbatim in create/load/copy interface  */
  if ( nsp_check_polyline3d(H)== FAIL) return %(ret)s; 

%%
override_destroy_prelim  Polyline3d
  /* verbatim in destroy */
  nsp_matrix_destroy(H->obj->Mcoord_l);

%%
override nsp_extractelts_polyline3d kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_polyline3d(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_polyline3d kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_polyline3d(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_polyline3d(BCG *Xgc,NspGraphic *Obj, void *data)
{
  int face; 
  if ( Obj->obj->hidden == TRUE ) return ;
  nsp_check_polyline3d((NspPolyline3d *) Obj);
#ifdef  WITH_GTKGLEXT 
  if ( Xgc->graphic_engine == &GL_gengine ) 
    {
      /* if we are using OpenGl we make a full draw of 
       * object and return 
       */
      draw_polyline3d_ogl(Xgc,Obj);
      nsp_ogl_set_2dview(Xgc); 
      return; 
    }
#endif 
  if ( data != NULL) 
    {
      face = *((int *) data);
      draw_polyline3d_face(Xgc,Obj,face);
    }
  else 
    {
      int i;
      /* draw all the faces: this is not really used  
       * since the face order is computed and sequenced in upper object.
       */
      for ( i= 0 ; i < ((NspPolyline3d *) Obj)->obj->Mcoord->m -1; i++) 
	draw_polyline3d_face(Xgc,Obj,i);
    }
}

static void nsp_translate_polyline3d(NspGraphic *Obj,const double *tr)
{
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_polyline3d(NspGraphic *Obj,double *R)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_polyline3d(NspGraphic *Obj,double *alpha)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of polyline3d 
 *
 */
extern void nsp_gr_bounds_min_max(int n,double *A,int incr,double *Amin, double *Amax) ;

static int nsp_getbounds_polyline3d(NspGraphic *Obj,double *bounds)
{
  int i;
  /* this should be stored in a cache and recomputed when necessary 
   *
   */
  nsp_polyline3d *Q= ((NspPolyline3d *) Obj)->obj;
  nsp_check_polyline3d((NspPolyline3d *) Obj);
  if ( Q->Mcoord->mn == 0) return FALSE;
  for ( i = 0 ; i < Q->Mcoord->n ; i++) 
    nsp_gr_bounds_min_max(Q->Mcoord->m,Q->Mcoord->R+i*Q->Mcoord->m,1,&bounds[2*i],&bounds[2*i+1]);
  return TRUE;
}


int nsp_check_polyline3d( NspPolyline3d *P)
{
  nsp_polyline3d *L = P->obj;
  int L_nb_coords = L->Mcoord->m;

  if ( L->Mcoord->n != 3 ) 
    {
      Scierror("Error: bad coord for polyline3d, second dimension should be 3\n");
      return FAIL;
    }

  if ( L->Mcolor->mn != L->Mcoord->m -1 && L->Mcolor->mn != 1 ) 
    {
      Scierror("Erro: bad color for polyline3d object\n");
    }

  L->Mcolor = Mat2int(L->Mcolor);

  /* create extra data for qpos declared int* 
   * Q->pos id only usefull for non opengl driver 
   */
  if ( L->pos == NULL) L->pos = malloc( L_nb_coords * sizeof(VisionPos));
  L->pos_length = L_nb_coords;
  
  /* create extra data for Mcoord_l declared void* */
  if ( L->Mcoord_l == NULL) 
    {
      L->Mcoord_l = nsp_matrix_create("local",'r',L->Mcoord->m, L->Mcoord->n);
    }
  return OK;
}

static void draw_polyline3d_face(BCG *Xgc,NspGraphic *Ob, int j)
{
  nsp_polyline3d *L = ((NspPolyline3d *) Ob)->obj;
  double * L_coord = ((NspMatrix *) L->Mcoord_l)->R;
  int L_nb_colors = L->Mcolor->mn ;
  int *L_color = L->Mcolor->I;
  int L_nb_coords = L->Mcoord->m;
  int x[2], y[2], color, n=2, flag=0;
  x[0] = XScale(L_coord[j]);
  y[0] = YScale(L_coord[j+L_nb_coords]);
  x[1] = XScale(L_coord[j+1]);
  y[1] = YScale(L_coord[j+1+L_nb_coords]);
  color = ( L_nb_colors == 1 ) ? L_color[0] : L_color[j];
  Xgc->graphic_engine->drawsegments(Xgc, x, y , n, &color, flag);
}

static void draw_polyline3d_ogl(BCG *Xgc,void *Ob)
{
#ifdef  WITH_GTKGLEXT 
  nsp_polyline3d *L = ((NspPolyline3d *) Ob)->obj;
  int j,color;
  double x[2], y[2],z[2];
  int  n=2, flag=0;
  double * L_coord = ((NspMatrix *) L->Mcoord)->R;
  int L_nb_coords = L->Mcoord->m;
  int *L_color = L->Mcolor->I;
  int L_nb_colors = L->Mcolor->mn ;
  for ( j = 0 ; j < L_nb_coords-1 ; j++ )
    {
      color = ( L_nb_colors == 1 ) ? L_color[0] : L_color[j];
      x[0] = L_coord[j];
      y[0] = L_coord[j+L_nb_coords];
      z[0] = L_coord[j+2*L_nb_coords];
      x[1] = L_coord[j+1];
      y[1] = L_coord[j+1+L_nb_coords];
      z[1] = L_coord[j+1+2*L_nb_coords];
      drawsegments3D(Xgc, x, y ,z, n, &color, flag);
    }
#endif
}

static void zmean_faces_for_Polyline3d(void *Obj, double z[], HFstruct HF[], int *n, int k)
{
  nsp_polyline3d *L = ((NspPolyline3d *) Obj)->obj;
  int j;
  double zmean;
  double * L_coord = ((NspMatrix *) L->Mcoord_l)->R;
  int L_nb_coords = L->Mcoord->m;
  for ( j = 0 ; j < L_nb_coords-1 ; j++ )
    {
      zmean = 0.5 * (L_coord[j+2*L_nb_coords] + L_coord[j+1+2*L_nb_coords]);
      if (L->pos[j] != OUT_Z && L->pos[j+1] != OUT_Z)
	if (L->pos[j] == VIN || L->pos[j+1] == VIN)
	  { 
	    /* le segment rentre dans les "facettes" à traiter */
	    z[*n] = zmean;
	    HF[*n].num_obj = k;
	    HF[*n].num_in_obj = j;
	    (*n)++; 
	  }
    }
}

/*
 * requested method for 3d objects.
 */

static void nsp_polyline3d_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim)
{
  nsp_polyline3d *Q= ((NspPolyline3d *) Obj)->obj;
  apply_transforms_new(Xgc,((NspMatrix *) Q->Mcoord_l)->R,Q->Mcoord->R,Q->pos, lim, Q->Mcoord->m);
  zmean_faces_for_Polyline3d(Obj, z,  HF, n, k);
}

/* requested method for 3d objects.
 *
 */

static int nsp_polyline3d_n_faces(BCG *Xgc,NspGraphic *Obj)
{
  return ((NspPolyline3d *) Obj)->obj->Mcoord->m -1;
}

