/* -*- Mode: C -*- */
%%
headers

#include <nsp/figure.h>
extern void nsp_graphic_link_figure(NspGraphic *G, void *F);
extern void nsp_graphic_unlink_figure(NspGraphic *G, void *F);

%%
init 

GLURP 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override_internal_methods

  draw_func *draw; 
  translate_func *translate;
  rotate_func *rotate;
  scale_func *scale;
  bounds_func *bounds;
  full_copy_func *full_copy;
  link_figure_func *link_figure;
  unlink_figure_func *unlink_figure;

%%
override_internal_methods_protos

typedef void draw_func(BCG *Xgc,NspGraphic *Obj);
typedef void translate_func(BCG *Xgc,NspGraphic *Obj,double *tr);
typedef void rotate_func(BCG *Xgc,NspGraphic *Obj,double *R);
typedef void scale_func(BCG *Xgc,NspGraphic *Obj,double *alpha);
typedef void bounds_func(BCG *Xgc,NspGraphic *Obj,double *bounds);
typedef NspGraphic *full_copy_func(NspGraphic *Obj);
typedef void link_figure_func(NspGraphic *Obj,void *F);
typedef void unlink_figure_func(NspGraphic *Obj,void *F);

%%
override_type Graphic

  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   * this method of class Graphic are to be defined by subclasses.
   */
  type->draw = NULL;
  type->translate = NULL;
  type->rotate = NULL;
  type->scale = NULL;
  type->bounds = NULL;
  type->full_copy = NULL; 
  type->link_figure = nsp_graphic_link_figure;
  type->unlink_figure = nsp_graphic_unlink_figure;

%%
override graphic_translate kwargs
/* take care that the name to give for override is the c-name of 
 * the method 
 */
static int _wrap_graphic_translate(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {realmat,t_end};
  NspMatrix *tr;
  if ( GetArgs(stack,rhs,opt,T,&tr) == FAIL) return RET_BUG;
  CheckLength(NspFname(stack),1,tr,2);
  self->type->translate(NULL,self, tr->R);
  return 0;
}

%%
override graphic_scale kwargs
static int _wrap_graphic_scale(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {realmat,t_end};
  NspMatrix *sc;

  if ( GetArgs(stack,rhs,opt,T,&sc) == FAIL) return RET_BUG;
  CheckLength(NspFname(stack),1,sc,2);
  self->type->scale(NULL,self, sc->R);
  return 0;
}

%%
override graphic_rotate kwargs
static int _wrap_graphic_rotate(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {realmat,t_end};
  NspMatrix *R;
  if ( GetArgs(stack,rhs,opt,T,&R) == FAIL) return RET_BUG;
  CheckLength(NspFname(stack),1,R,2);
  self->type->rotate(NULL,self, R->R);
  return 0;
}

%%
override graphic_full_copy kwargs
static int _wrap_graphic_full_copy(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  NspGraphic *ret;
  CheckRhs(0,0);
  ret = self->type->full_copy(self);
  MoveObj(stack,1,NSP_OBJECT(ret));
  return 1;
}

%%
last

/* verbatim at the end */

/* default methods in graphic */

void nsp_graphic_link_figure(NspGraphic *G,void *F)
{
  NspFigure *Fi = F;
  if ( G->obj->Fig == NULL ) 
    {
      Fi->obj->ref_count++;
      ((NspGraphic *) Fi)->obj->ref_count++;
      G->obj->Fig = Fi;
    }
}

void nsp_graphic_unlink_figure(NspGraphic *G, void *F)
{
  NspFigure *Fi = F;
  if ( G->obj->Fig == F ) 
    {
      Fi->obj->ref_count--;
      ((NspGraphic *) Fi)->obj->ref_count--;
      G->obj->Fig = NULL ;
    }
}



