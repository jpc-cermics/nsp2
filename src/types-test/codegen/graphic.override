/* -*- Mode: C -*- */
%%
headers

%%
init 

GLURP 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override_internal_methods

  draw_func *draw; 
  translate_func *translate;
  rotate_func *rotate;
  scale_func *scale;
  bounds_func *bounds;
  full_copy_func *full_copy;

%%
override_internal_methods_protos

typedef void draw_func(BCG *Xgc,NspGraphic *Obj);
typedef void translate_func(BCG *Xgc,NspGraphic *Obj,double *tr);
typedef void rotate_func(BCG *Xgc,NspGraphic *Obj,double *R);
typedef void scale_func(BCG *Xgc,NspGraphic *Obj,double *alpha);
typedef void bounds_func(BCG *Xgc,NspGraphic *Obj,double *bounds);
typedef NspGraphic *full_copy_func(NspGraphic *Obj);

%%
override graphic_translate kwargs
/* take care that the name to give for override is the c-name of 
 * the method 
 */
static int _wrap_graphic_translate(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {realmat,t_end};
  NspMatrix *tr;
  if ( GetArgs(stack,rhs,opt,T,&tr) == FAIL) return RET_BUG;
  CheckLength(NspFname(stack),1,tr,2);
  self->type->translate(NULL,self, tr->R);
  return 0;
}

%%
override graphic_scale kwargs
static int _wrap_graphic_scale(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {realmat,t_end};
  NspMatrix *sc;

  if ( GetArgs(stack,rhs,opt,T,&sc) == FAIL) return RET_BUG;
  CheckLength(NspFname(stack),1,sc,2);
  self->type->scale(NULL,self, sc->R);
  return 0;
}

%%
override graphic_rotate kwargs
static int _wrap_graphic_rotate(NspGraphic *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {realmat,t_end};
  NspMatrix *R;
  if ( GetArgs(stack,rhs,opt,T,&R) == FAIL) return RET_BUG;
  CheckLength(NspFname(stack),1,R,2);
  self->type->rotate(NULL,self, R->R);
  return 0;
}

%%
last

/* verbatim at the end */


