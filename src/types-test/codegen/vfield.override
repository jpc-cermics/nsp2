/* -*- Mode: C -*- */
%%
include-start VField
/* inserted at the start of include file */
#include <nsp/figure.h>

%%
include-public  VField
/* inserted at the end of public part of include file */

%%
include-private   VField

/* inserted in the private part of include file */
static void nsp_draw_vfield(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_vfield(NspGraphic *o,const double *tr);
static void nsp_rotate_vfield(NspGraphic *o,double *R);
static void nsp_scale_vfield(NspGraphic *o,double *alpha);
static int nsp_getbounds_vfield(NspGraphic *o,double *bounds);
static void nsp_draw_vfield_(BCG *Xgc,char *name, int colored, double *x, double *y,
			     double *fx, double *fy, int n1, int n2,char *strflag,
			     double *brect, double *arfact);
static double min_of_doubles (const double *x,int n);

%%
headers

%%
init

Init portion

%%
override-type  VField
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_vfield;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_vfield ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_vfield  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_vfield  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_vfield  ;
  /* next method are defined in NspGraphic and need not be chnaged here for GMatrix */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_vfield kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_vfield(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_vfield kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_vfield(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
last

static void nsp_draw_vfield(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  double arfact = 2.0;
  NspVField *P = (NspVField *) Obj;
  double *x= P->obj->x->R;
  double *y= P->obj->y->R;
  double *fx= P->obj->fx->R;
  double *fy= P->obj->fy->R;
  int n1 = P->obj->x->mn;
  int n2 = P->obj->y->mn;
  if ( ((NspGraphic *) P)->obj->show == FALSE ) return;

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  if ( P->obj->x->mn  == 0 || P->obj->y->mn  == 0 ) return;
  nsp_draw_vfield_(Xgc,"champ",P->obj->colored,x,y,fx,fy,n1,n2,NULL,NULL,&arfact);
}


static void nsp_translate_vfield(NspGraphic *Obj,const double *tr)
{
  NspVField *P = (NspVField *) Obj;
  int i;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i = 0 ; i < P->obj->x->mn ; i++)
    P->obj->x->R[i] += tr[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++)
    P->obj->x->R[i] += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);

}

static void nsp_rotate_vfield(NspGraphic *Obj,double *R)
{
  /* NspVField *P = (NspVField *) Obj; */
  Sciprintf("we should get a double here for alpha\n");
  nsp_graphic_invalidate((NspGraphic *) Obj);

}

static void nsp_scale_vfield(NspGraphic *Obj,double *alpha)
{
  int i;
  NspVField *P = (NspVField *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i = 0 ; i < P->obj->x->mn ; i++)
    P->obj->x->R[i] *= alpha[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++)
    P->obj->x->R[i] *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of vfield
 *
 */

static int nsp_getbounds_vfield (NspGraphic *Obj,double *bounds)
{
  NspVField *P = (NspVField *) Obj;
  if (  P->obj->x->mn == 0 || P->obj->y->mn == 0) return FALSE;
  /* get the bound in parent i.e given by wrect : upper-left w,h */
  if ( P->obj->x->mn != 0 )
    {
      bounds[0]=P->obj->x->R[0]; /* xmin */
      bounds[2]=P->obj->x->R[P->obj->x->mn-1];/* xmax */
    }
  if ( P->obj->y->mn != 0 )
    {
      bounds[1]=P->obj->y->R[0] ; /* ymin */
      bounds[3]=P->obj->y->R[P->obj->y->mn-1];/* ymax */
    }
  return TRUE;
}


static void nsp_draw_vfield_(BCG *Xgc,char *name, int colored, double *x, double *y,
			     double *fx, double *fy, int n1, int n2, char *strflag,
			     double *brect, double *arfact)
{
  int clip_box[4], *zm=NULL,i,j,n,na,im;
  int arsize, cpat,uc;
  double /*  xx[2],yy[2],*/ maxx,maxy, maxsf, nx,ny,sc,sfx,sfy,sfx2,sfy2;
  double  arsize1=0.5,arsize2=0.5;
  double *xm=NULL,*ym=NULL;

  uc = Xgc->graphic_engine->xget_usecolor(Xgc);
  if (uc)
    cpat = Xgc->graphic_engine->xget_color(Xgc);
  else
    cpat = Xgc->graphic_engine->xget_dash(Xgc);

  /* The arrowsize acording to the windowsize **/
  n=2*(n1)*(n2);
  /*
  xx[0]=x[0];xx[1]=x[n1-1];
  yy[0]=y[0];yy[1]=y[n2-1];
  */

  /* Allocation */
  xm = graphic_alloc(0,n,sizeof(double));
  ym = graphic_alloc(1,n,sizeof(double));
  if ( xm == 0 || ym == 0)
    {
      Sciprintf("Running out of memory \n");
      return ;
    }
  if ( colored != 0)
    {
      zm = graphic_alloc(2,n/2,sizeof(int));
      if (  zm == 0 )
	{
	  Sciprintf("Running out of memory \n");
	  return ;
	}
    }
  /* From double to pixels */
  for ( i = 0 ; i < n1 ; i++)
    for ( j =0 ; j < n2 ; j++)
      {
	xm[2*(i +(n1)*j)]= XScale(Xgc->scales,x[i]);
	ym[2*(i +(n1)*j)]= YScale(Xgc->scales,y[j]);
      }
  /* Scaling */
  nx=min_of_doubles(x,n1)*Xgc->scales->Wscx1;
  ny=min_of_doubles(y,n2)*Xgc->scales->Wscy1;
  sfx= Xgc->scales->Wscx1;
  sfy= Xgc->scales->Wscy1;
  sfx2= sfx*sfx;
  sfy2= sfy*sfy;

  im=0;
  maxx = Abs(fx[0]);
  while ( isnan(maxx) && im < (n1)*(n2) )
    {
      maxx = Abs(fx[im++]);
    }
  for (i = im;  i < (n1)*(n2) ; i++)
    {
      double maxx1 = Abs(fx[i]);
      if ( ~isnan(maxx1) && maxx1 > maxx) maxx=maxx1;
    }
  maxx = ( maxx < SMDOUBLE) ? SMDOUBLE : maxx;
  im=0;
  maxy = Abs(fy[0]);
  while ( isnan(maxy) && im < (n1)*(n2) )
    {
      maxy = Abs(fy[im++]);
    }
  for (i = im;  i < (n1)*(n2) ; i++)
    {
      double maxy1 = Abs(fy[i]);
      if ( ~isnan(maxy1) && maxy1 > maxy) maxy=maxy1;
    }
  maxy = ( maxy < SMDOUBLE) ? SMDOUBLE : maxy;
  maxsf= sqrt(sfx2*maxx*maxx+sfy2*maxy*maxy);
  sc= sqrt(nx*nx+ny*ny)/maxsf;

  /* size of arrow */
  arsize1= ((double) Xgc->scales->Irect.width)/(5*(n1));
  arsize2= ((double) Xgc->scales->Irect.height)/(5*(n2));
  arsize=  (arsize1 < arsize2) ? inint(arsize1*10.0) : inint(arsize2*10.0) ;
  arsize = (int)(arsize*(*arfact));

  clip_box[0]=Xgc->scales->Irect.x;
  clip_box[1]=Xgc->scales->Irect.x+Xgc->scales->Irect.width;
  clip_box[2]=Xgc->scales->Irect.y;
  clip_box[3]=Xgc->scales->Irect.y+Xgc->scales->Irect.height;

  if ( colored == 0 )
    {
      int j=0;
      double scx= sfx*sc/2.0;
      double scy= sfy*sc/2.0;
      for ( i = 0 ; i < (n1)*(n2) ; i++)
	{
	  double x1n,y1n,x2n,y2n;
	  int flag1=0;
	  xm[1+2*j]= (int)(scx*fx[i]+xm[2*i]);
	  xm[2*j]  = (int)(-scx*fx[i]+xm[2*i]);
	  ym[1+2*j]= (int)(-scy*fy[i]+ym[2*i]);
	  ym[2*j]  = (int)(scy*fy[i]+ym[2*i]);
	  clip_line(xm[2*j],ym[2*j],xm[2*j+1],ym[2*j+1],&x1n,&y1n,&x2n,&y2n,&flag1,
		    clip_box[0],clip_box[1],clip_box[2],clip_box[3]);
	  if (flag1 !=0)
	    {
	      /* do not want to clip since if clipped the arrow haed will
		 be badly placed. just eliminate the totally out segments
		 if (flag1==1||flag1==3) { xm[2*j]=x1n;ym[2*j]=y1n;};
		 if (flag1==2||flag1==3) { xm[2*j+1]=x2n;ym[2*j+1]=y2n;};
	      */
	      j++;
	    }
	}
      na=2*j;
    }
  else
    {
      double maxn= sqrt(maxx*maxx+maxy*maxy);
      double scx= sfx*sc*maxsf/3.0;
      double scy= sfy*sc*maxsf/3.0;
      double x1n,y1n,x2n,y2n;
      int flag1=0, whiteid, j=0;
      whiteid=  Xgc->graphic_engine->xget_last(Xgc);
      for ( i = 0 ; i < (n1)*(n2) ; i++)
	{
	  double nor0= sqrt(fx[i]*fx[i]+fy[i]*fy[i]);
	  double nor= sqrt(sfx2*fx[i]*fx[i]+sfy2*fy[i]*fy[i]);
	  zm[j] = inint( ((double) whiteid)*(1.0 - nor0/maxn));
	  xm[1+2*j]= (int)(scx*fx[i]/nor+xm[2*i]);
	  xm[2*j]  = (int)(-scx*fx[i]/nor+xm[2*i]);
	  ym[1+2*j]= (int)(-scy*fy[i]/nor+ym[2*i]);
	  ym[2*j]  = (int)(scy*fy[i]/nor+ym[2*i]);
	  clip_line(xm[2*j],ym[2*j],xm[2*j+1],ym[2*j+1],&x1n,&y1n,&x2n,&y2n,&flag1,
		    clip_box[0],clip_box[1],clip_box[2],clip_box[3]);
	  if (flag1 !=0)
	    {
	      /* do not want to clip since if clipped the arrow head will
		 be badly placed. just eliminate the totally out segments
		 if (flag1==1||flag1==3) { xm[2*j]=x1n;ym[2*j]=y1n;};
		 if (flag1==2||flag1==3) { xm[2*j+1]=x2n;ym[2*j+1]=y2n;};
	      */
	      j++;
	    }
	}
      na=2*j;
    }

  if ( colored ==0)
    Xgc->graphic_engine->drawarrows(Xgc,xm,ym,na,arsize,&cpat,0);
  else
    Xgc->graphic_engine->drawarrows(Xgc,xm,ym,na,arsize,zm,1);
}

/*
 * Returns min( abs(x)) excluding null x(i)  values
 * if x==0 then 1 is returned
 */

static double min_of_doubles(const double *x, int n)
{
  int i;
  double dx=1,mindx=1;
  if ( n < 2 ) return(mindx);
  mindx= Abs(x[1]-x[0]);
  mindx = ( ~isnan(mindx) &&  mindx != 0 ) ? mindx : 1;
  for ( i = 2 ; i < n ; i++)
    {
      dx = Abs(x[i]-x[i-1]);
      if ( ~isnan(dx) && dx < mindx && dx != 0 ) mindx=dx;
    }
  return(mindx);
}
