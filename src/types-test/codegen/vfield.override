/* -*- Mode: C -*- */
%%
headers
#include "nsp/axes.h"
#include <nsp/figure.h> 
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
static void nsp_draw_vfield(BCG *Xgc,NspGraphic *Obj);
static void nsp_translate_vfield(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_vfield(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_vfield(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_vfield(BCG *Xgc,NspGraphic *o,double *bounds);

extern void nsp_figure_force_redraw( NspFigure *F);

#ifdef  WITH_GTKGLEXT 
extern Gengine GL_gengine;
#endif 

%%
init 

Init portion 

%%
override_type VField
  /* inserted verbatim in the type definition */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_vfield;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_vfield ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_vfield  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_vfield  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_vfield  ;
  /* next method are defined in NspGraphic and need not be chnaged here for GMatrix */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_vfield kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_vfield(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_vfield kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_vfield(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
last

/* inserted verbatim at the end */

/* 
static void nsp_draw_vfield(BCG *Xgc,NspGraphic *Obj)
{
  NspVField *P = (NspVField *) Obj;
  int *xm,*ym,  j;
  int colminmax[2];
  double *zminmax = NULL;
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;

  if ( P->obj->colminmax->mn == 2 ) 
    {
      colminmax[0] = P->obj->colminmax->R[0];
      colminmax[1] = P->obj->colminmax->R[1];
    }
  if ( P->obj->zminmax->mn == 2 ) 
    zminmax = P->obj->colminmax->R;
  else
    remap = FALSE;

  if  (  Xgc->scales->cosa==1.0 ) 
    {
      scale_f2i(Xgc,xx,yy,xx1,yy1,2);
      xm = graphic_alloc(0,P->obj->data->n+1,sizeof(int));
      ym = graphic_alloc(1,P->obj->data->m+1,sizeof(int));
      if ( xm == 0 || ym == 0 )
	{
	  Scistring("Xgray: running out of memory\n");
	  return ; 
	}
      for ( j =0 ; j < (P->obj->data->n+1) ; j++)	 
	xm[j]= (int) (( xx1[1]*j + xx1[0]*(P->obj->data->n-j) )/((double) P->obj->data->n));
      for ( j =0 ; j < (P->obj->data->m+1) ; j++)	 
	ym[j]= (int) (( yy1[0]*j + yy1[1]*(P->obj->data->m-j) )/((double) P->obj->data->m));
      Xgc->graphic_engine->fill_grid_rectangles1(Xgc,xm,ym,P->obj->data->R,
						 P->obj->data->m, 
						 P->obj->data->n,
						 remap,
						 colminmax,
						 zminmax);
    }
  else
    {
      double xp[4],yp[4];
      const double *z =P->obj->data->R;
      int nr =P->obj->data->m , nc=P->obj->data->n;
      int colmin,colmax;
      double zmin,zmax,coeff;
      int i,j,fill[1],cpat,xz[2];
      cpat = Xgc->graphic_engine->xget_pattern(Xgc);
      Xgc->graphic_engine->xget_windowdim(Xgc,xz,xz+1);
      nsp_remap_colors(Xgc,remap,&colmin,&colmax,&zmin,&zmax,&coeff,colminmax,zminmax,z,nr*nc);
      
      for (i = 0 ; i < nc-1 ; i++)
	for (j = 0 ; j < nr-1 ; j++)
	  {
	    int w,h;
	    fill[0]= (remap == FALSE) ? rint(z[i+nr*j]) : rint((colmax-colmin)*(z[i+nr*j] - zmin)*coeff + colmin);
	    if ( fill[0] < colmin || fill[0] > colmax ) continue ;
	    Xgc->graphic_engine->xset_pattern(Xgc,fill[0]);
	    xp[0]= (( xx[1]*i + xx[0]*(P->obj->data->n-i) )/((double) P->obj->data->n));
	    yp[0]= (( yy[0]*j + yy[1]*(P->obj->data->m-j) )/((double) P->obj->data->m));
	    xp[1]= xp[0];
	    yp[1]= (( yy[0]*(j+1) + yy[1]*(P->obj->data->m-(j+1)) )/((double) P->obj->data->m));
	    xp[2]= (( xx[1]*(i+1) + xx[0]*(P->obj->data->n-(i+1)) )/((double) P->obj->data->n));
	    yp[2]= yp[1];
	    xp[3]= xp[2];
	    yp[3]= yp[0];
	    Xgc->graphic_engine->scale->fillpolyline(Xgc,xp,yp,4,1);
	  }
      Xgc->graphic_engine->xset_pattern(Xgc,cpat);
    }
  
}
*/

static double min_of_doubles(const double *x, int n);

static void nsp_draw_vfield(BCG *Xgc,NspGraphic *Obj)
{
  double arfact = 1.0;
  NspVField *P = (NspVField *) Obj;
  int clip_box[4];
  double *x= P->obj->x->R; 
  double *y= P->obj->y->R; 
  double *fx= P->obj->fx->R; 
  double *fy= P->obj->fy->R; 
  int n1 = P->obj->x->mn;
  int n2 = P->obj->y->mn;

  int *xm,*ym,*zm=NULL,i,j,n,na;
  double  xx[2],yy[2], maxx;
  double  nx,ny,sc,sfx,sfy,sfx2,sfy2;
  double  arsize1=0.5,arsize2=0.5;
  int arsize;

  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;
  if ( ((NspGraphic *) P)->obj->x->mn  == 0 
       || ((NspGraphic *) P)->obj->y->mn  == 0 ) return;
  /* get default dash fo rarrows */
  int cpat,uc;
  uc = Xgc->graphic_engine->xget_usecolor(Xgc);
  if (uc)
    cpat = Xgc->graphic_engine->xget_pattern(Xgc);
  else
    cpat = Xgc->graphic_engine->xget_dash(Xgc);
  
  /* boundaries: assuming that x and y are increasing */
  n=2*(n1)*(n2);
  xx[0]=x[0];xx[1]=x[n1-1];
  yy[0]=y[0];yy[1]=y[n2-1];
  
  /* Allocation */
  xm = graphic_alloc(0,n,sizeof(int));
  ym = graphic_alloc(1,n,sizeof(int));
  if ( xm == 0 || ym == 0) 
    {
      sciprint("Running out of memory \n");
      return ;
    }      
  if ( P->obj->colored == TRUE ) 
    {
      zm = graphic_alloc(2,n/2,sizeof(int));
      if (  zm == 0 ) 
	{
	  sciprint("Running out of memory \n");
	  return ;
	}      
    }
  /* From double to pixels */
  for ( i = 0 ; i < n1 ; i++)
    for ( j =0 ; j < n2 ; j++)
      {
	xm[2*(i +(n1)*j)]= XScale(P->obj->x->R[i]);
	ym[2*(i +(n1)*j)]= YScale(P->obj->y->R[j]);
      }
  /* Scaling */
  nx=min_of_doubles(P->obj->x->R,n1)*Xgc->scales->Wscx1;
  ny=min_of_doubles(P->obj->y->R,n2)*Xgc->scales->Wscy1;
  sfx= Xgc->scales->Wscx1;
  sfy= Xgc->scales->Wscy1;
  sfx2= sfx*sfx;
  sfy2= sfy*sfy;
  maxx = sfx2*fx[0]*fx[0]+sfy2*fy[0]*fy[0];
  for (i = 1;  i < (n1)*(n2) ; i++)
    {
      double maxx1 = sfx2*fx[i]*fx[i]+sfy2*fy[i]*fy[i];
      if ( maxx1 > maxx) maxx=maxx1;
    }
  maxx = ( maxx < SMDOUBLE) ? SMDOUBLE : sqrt(maxx);
  sc=maxx;
  /* sc= Min(nx,ny)/sc; */
  sc= sqrt(nx*nx+ny*ny)/sc;
  sfx *= sc;
  sfy *= sc;
  /* size of arrow */
  arsize1= ((double) Xgc->scales->WIRect1[2])/(5*(n1));
  arsize2= ((double) Xgc->scales->WIRect1[3])/(5*(n2));
  arsize=  (arsize1 < arsize2) ? inint(arsize1*10.0) : inint(arsize2*10.0) ;
  arsize = (int)(arsize*(arfact));
  
  clip_box[0]=Xgc->scales->WIRect1[0];
  clip_box[1]=Xgc->scales->WIRect1[0]+Xgc->scales->WIRect1[2];
  clip_box[2]=Xgc->scales->WIRect1[1];
  clip_box[3]=Xgc->scales->WIRect1[1]+Xgc->scales->WIRect1[3];

  if ( P->obj->colored == FALSE ) 
    {
      int j=0;

      for ( i = 0 ; i < (n1)*(n2) ; i++)
	{
	  int x1n,y1n,x2n,y2n,flag1=0;
	  xm[1+2*j]= (int)(sfx*fx[i]/2+xm[2*i]);
	  xm[2*j]  = (int)(-sfx*fx[i]/2+xm[2*i]);
	  ym[1+2*j]= (int)(-sfy*fy[i]/2+ym[2*i]);
	  ym[2*j]  = (int)(sfy*fy[i]/2+ym[2*i]);
	  clip_line(xm[2*j],ym[2*j],xm[2*j+1],ym[2*j+1],&x1n,&y1n,&x2n,&y2n,&flag1,
		    clip_box[0],clip_box[1],clip_box[2],clip_box[3]);
	  if (flag1 !=0)
	    {
	      /* do not want to clip since if clipped the arrow haed will
		 be badly placed. just eliminate the totally out segments  
		 if (flag1==1||flag1==3) { xm[2*j]=x1n;ym[2*j]=y1n;};
		 if (flag1==2||flag1==3) { xm[2*j+1]=x2n;ym[2*j+1]=y2n;};
	      */
	      j++;
	    } 
	}
      na=2*j;
    }
  else 
    {
      int x1n,y1n,x2n,y2n,flag1=0, whiteid, j=0;
      whiteid=  Xgc->graphic_engine->xget_last(Xgc);
      for ( i = 0 ; i < (n1)*(n2) ; i++)
	{
	  double nor= sqrt(sfx2*fx[i]*fx[i]+sfy2*fy[i]*fy[i]);
	  zm[j] = inint( ((double) whiteid)*(1.0 - nor/maxx));
	  nor= sqrt(fx[i]*fx[i]+fy[i]*fy[i]);
	  xm[1+2*j]= (int)(sfx*fx[i]/(2*nor)+xm[2*i]);
	  xm[2*j]  = (int)(-sfx*fx[i]/(2*nor)+xm[2*i]);
	  ym[1+2*j]= (int)(-sfy*fy[i]/(2*nor)+ym[2*i]);
	  ym[2*j]  = (int)(sfy*fy[i]/(2*nor)+ym[2*i]);
	  clip_line(xm[2*j],ym[2*j],xm[2*j+1],ym[2*j+1],&x1n,&y1n,&x2n,&y2n,&flag1,
		    clip_box[0],clip_box[1],clip_box[2],clip_box[3]);
	  if (flag1 !=0)
	    {
	      /* do not want to clip since if clipped the arrow head will
		 be badly placed. just eliminate the totally out segments 
		 if (flag1==1||flag1==3) { xm[2*j]=x1n;ym[2*j]=y1n;};
		 if (flag1==2||flag1==3) { xm[2*j+1]=x2n;ym[2*j+1]=y2n;};
	      */
	      j++;
	    }
	}
      na=2*j;
    }
  /* Drawing the arrows  */
  frame_clip_on(Xgc);
  if ( P->obj->colored == FALSE ) 
    Xgc->graphic_engine->drawarrows(Xgc,xm,ym,na,arsize,&cpat,0);
  else
    Xgc->graphic_engine->drawarrows(Xgc,xm,ym,na,arsize,zm,1);
  frame_clip_off(Xgc);
}

static double min_of_doubles(const double *x, int n)
{
  int i;
  double dx=1,mindx=1;
  if ( n < 2 ) return(mindx);
  mindx= Abs(x[1]-x[0]);
  mindx = ( mindx != 0 ) ? mindx : 1;
  for ( i = 2 ; i < n ; i++) 
    {
      dx = Abs(x[i]-x[i-1]);
      if ( dx < mindx && dx != 0 ) mindx=dx;
    }
  return(mindx);
}



static void nsp_translate_vfield(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  NspVField *P = (NspVField *) Obj;
  int i;
  for ( i = 0 ; i < P->obj->x->mn ; i++) 
    P->obj->x->R[i] += tr[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++) 
    P->obj->x->R[i] += tr[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_rotate_vfield(BCG *Xgc,NspGraphic *Obj,double *R)
{
  /* NspVField *P = (NspVField *) Obj; */
  Sciprintf("we should get a double here for alpha\n");
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_vfield(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  int i;
  NspVField *P = (NspVField *) Obj;
  for ( i = 0 ; i < P->obj->x->mn ; i++) 
    P->obj->x->R[i] *= alpha[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++) 
    P->obj->x->R[i] *= alpha[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of vfield 
 *
 */

static void nsp_getbounds_vfield (BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  NspVField *P = (NspVField *) Obj;
  /* get the bound in parent i.e given by wrect : upper-left w,h */
  if ( P->obj->x->mn != 0 ) 
    {
      bounds[0]=P->obj->x->R[0]; /* xmin */
      bounds[2]=P->obj->x->R[P->obj->x->mn-1];/* xmax */
    }
  if ( P->obj->y->mn != 0 ) 
    {
      bounds[1]=P->obj->y->R[0] ; /* ymin */
      bounds[3]=P->obj->y->R[P->obj->y->mn-1];/* ymax */
    }
}

