/* -*- Mode: C -*- */
%%
headers
#include "nsp/axes.h"
#include <nsp/figure.h> 
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
static void nsp_draw_contour(BCG *Xgc,NspGraphic *Obj);
static void nsp_translate_contour(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_contour(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_contour(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_contour(BCG *Xgc,NspGraphic *o,double *bounds);

extern void nsp_figure_force_redraw( NspFigure *F);

#ifdef  WITH_GTKGLEXT 
extern Gengine GL_gengine;
#endif 

%%
init 

Init portion 

%%
override_type Contour
  /* inserted verbatim in the type definition */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_contour;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_contour ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_contour  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_contour  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_contour  ;
  /* next method are defined in NspGraphic and need not be changed here for Contour */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_contour kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_contour(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_contour kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_contour(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
last

/* inserted verbatim at the end */

/* 
static void nsp_draw_contour(BCG *Xgc,NspGraphic *Obj)
{
  NspVField *P = (NspVField *) Obj;
  int *xm,*ym,  j;
  int colminmax[2];
  double *zminmax = NULL;
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;

  if ( P->obj->colminmax->mn == 2 ) 
    {
      colminmax[0] = P->obj->colminmax->R[0];
      colminmax[1] = P->obj->colminmax->R[1];
    }
  if ( P->obj->zminmax->mn == 2 ) 
    zminmax = P->obj->colminmax->R;
  else
    remap = FALSE;

  if  (  Xgc->scales->cosa==1.0 ) 
    {
      scale_f2i(Xgc,xx,yy,xx1,yy1,2);
      xm = graphic_alloc(0,P->obj->data->n+1,sizeof(int));
      ym = graphic_alloc(1,P->obj->data->m+1,sizeof(int));
      if ( xm == 0 || ym == 0 )
	{
	  Scistring("Xgray: running out of memory\n");
	  return ; 
	}
      for ( j =0 ; j < (P->obj->data->n+1) ; j++)	 
	xm[j]= (int) (( xx1[1]*j + xx1[0]*(P->obj->data->n-j) )/((double) P->obj->data->n));
      for ( j =0 ; j < (P->obj->data->m+1) ; j++)	 
	ym[j]= (int) (( yy1[0]*j + yy1[1]*(P->obj->data->m-j) )/((double) P->obj->data->m));
      Xgc->graphic_engine->fill_grid_rectangles1(Xgc,xm,ym,P->obj->data->R,
						 P->obj->data->m, 
						 P->obj->data->n,
						 remap,
						 colminmax,
						 zminmax);
    }
  else
    {
      double xp[4],yp[4];
      const double *z =P->obj->data->R;
      int nr =P->obj->data->m , nc=P->obj->data->n;
      int colmin,colmax;
      double zmin,zmax,coeff;
      int i,j,fill[1],cpat,xz[2];
      cpat = Xgc->graphic_engine->xget_pattern(Xgc);
      Xgc->graphic_engine->xget_windowdim(Xgc,xz,xz+1);
      nsp_remap_colors(Xgc,remap,&colmin,&colmax,&zmin,&zmax,&coeff,colminmax,zminmax,z,nr*nc);
      
      for (i = 0 ; i < nc-1 ; i++)
	for (j = 0 ; j < nr-1 ; j++)
	  {
	    int w,h;
	    fill[0]= (remap == FALSE) ? rint(z[i+nr*j]) : rint((colmax-colmin)*(z[i+nr*j] - zmin)*coeff + colmin);
	    if ( fill[0] < colmin || fill[0] > colmax ) continue ;
	    Xgc->graphic_engine->xset_pattern(Xgc,fill[0]);
	    xp[0]= (( xx[1]*i + xx[0]*(P->obj->data->n-i) )/((double) P->obj->data->n));
	    yp[0]= (( yy[0]*j + yy[1]*(P->obj->data->m-j) )/((double) P->obj->data->m));
	    xp[1]= xp[0];
	    yp[1]= (( yy[0]*(j+1) + yy[1]*(P->obj->data->m-(j+1)) )/((double) P->obj->data->m));
	    xp[2]= (( xx[1]*(i+1) + xx[0]*(P->obj->data->n-(i+1)) )/((double) P->obj->data->n));
	    yp[2]= yp[1];
	    xp[3]= xp[2];
	    yp[3]= yp[0];
	    Xgc->graphic_engine->scale->fillpolyline(Xgc,xp,yp,4,1);
	  }
      Xgc->graphic_engine->xset_pattern(Xgc,cpat);
    }
  
}
*/

static double min_of_doubles(const double *x, int n);

static void nsp_draw_contour(BCG *Xgc,NspGraphic *Obj)
{
  NspContour *P = (NspContour *) Obj;
  double *x= P->obj->x->R; 
  double *y= P->obj->y->R; 
  double *z= P->obj->z->R; 
  int n1 = P->obj->x->mn;
  int n2 = P->obj->y->mn;
  
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;
  if ( P->obj->x->mn  == 0 || P->obj->y->mn  == 0 ) return;
  nsp_contour2d_draw(Xgc,x,y,z,n1,n2,P->obj->nlevels,P->obj->levels->R);
}

static double min_of_doubles(const double *x, int n)
{
  int i;
  double dx=1,mindx=1;
  if ( n < 2 ) return(mindx);
  mindx= Abs(x[1]-x[0]);
  mindx = ( mindx != 0 ) ? mindx : 1;
  for ( i = 2 ; i < n ; i++) 
    {
      dx = Abs(x[i]-x[i-1]);
      if ( dx < mindx && dx != 0 ) mindx=dx;
    }
  return(mindx);
}



static void nsp_translate_contour(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  NspContour *P = (NspContour *) Obj;
  int i;
  for ( i = 0 ; i < P->obj->x->mn ; i++) 
    P->obj->x->R[i] += tr[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++) 
    P->obj->x->R[i] += tr[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_rotate_contour(BCG *Xgc,NspGraphic *Obj,double *R)
{
  Sciprintf("we should get a double here for alpha\n");
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_contour(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  int i;
  NspContour *P = (NspContour *) Obj;
  for ( i = 0 ; i < P->obj->x->mn ; i++) 
    P->obj->x->R[i] *= alpha[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++) 
    P->obj->x->R[i] *= alpha[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of contour 
 *
 */

static void nsp_getbounds_contour (BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  NspContour *P = (NspContour *) Obj;
  /* get the bound in parent i.e given by wrect : upper-left w,h */
  if ( P->obj->x->mn != 0 ) 
    {
      bounds[0]=P->obj->x->R[0]; /* xmin */
      bounds[2]=P->obj->x->R[P->obj->x->mn-1];/* xmax */
    }
  if ( P->obj->y->mn != 0 ) 
    {
      bounds[1]=P->obj->y->R[0] ; /* ymin */
      bounds[3]=P->obj->y->R[P->obj->y->mn-1];/* ymax */
    }
}

