/* -*- Mode: C -*- */
%%
include-start Contour
/* inserted at the start of include file */
#include <nsp/figure.h>


%%
include-public Contour

extern int nsp_contour2_obj(BCG *Xgc,double *x, double *y, double *z, int *n1, int *n2, 
			    int *flagnz, int *nz, double *zz, int *style);

/* inserted at the end of public part of include file */

%%
include-private Contour

/* inserted in the private part of include file */

static void nsp_draw_contour(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_contour(NspGraphic *o,const double *tr);
static void nsp_rotate_contour(NspGraphic *o,double *R);
static void nsp_scale_contour(NspGraphic *o,double *alpha);
static int nsp_getbounds_contour(NspGraphic *o,double *bounds);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 
#include <nsp/axes.h>
#include <nsp/contour.h>

#ifdef  WITH_OPENGL 
extern Gengine GL_gengine;
#endif 

%%
init 

Init portion 

%%
override-type Contour
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_contour;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_contour ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_contour  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_contour  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_contour  ;
  /* next method are defined in NspGraphic and need not be changed here for Contour */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_contour kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_contour(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_contour kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_contour(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}

%%
last

static void nsp_draw_contour(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  NspContour *P = (NspContour *) Obj;
  double *x= P->obj->x->R; 
  double *y= P->obj->y->R; 
  double *z= P->obj->z->R; 
  int n1 = P->obj->x->mn;
  int n2 = P->obj->y->mn;
  
  if ( ((NspGraphic *) P)->obj->show == FALSE ) return;

  /* check if the block is inside drawing rectangle   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  if ( P->obj->x->mn  == 0 || P->obj->y->mn  == 0 ) return;
  if ( P->obj->style->mn == 0 )
    {
      nsp_contour2d_draw(Xgc,x,y,z,n1,n2,P->obj->nlevels,P->obj->levels->R,NULL);
    }
  else
    {
      Mat2int(P->obj->style);
      nsp_contour2d_draw(Xgc,x,y,z,n1,n2,P->obj->nlevels,P->obj->levels->R,P->obj->style->I);
    }
}

static void nsp_translate_contour(NspGraphic *Obj,const double *tr)
{
  NspContour *P = (NspContour *) Obj;
  int i;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i = 0 ; i < P->obj->x->mn ; i++) 
    P->obj->x->R[i] += tr[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++) 
    P->obj->x->R[i] += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_contour(NspGraphic *Obj,double *R)
{
  Sciprintf("we should get a double here for alpha\n");
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_contour(NspGraphic *Obj,double *alpha)
{
  int i;
  NspContour *P = (NspContour *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i = 0 ; i < P->obj->x->mn ; i++) 
    P->obj->x->R[i] *= alpha[0];
  for ( i = 0 ; i < P->obj->y->mn ; i++) 
    P->obj->x->R[i] *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of contour 
 *
 */

static int nsp_getbounds_contour (NspGraphic *Obj,double *bounds)
{
  NspContour *P = (NspContour *) Obj;
  /* get the bound in parent i.e given by wrect : upper-left w,h */
  if ( P->obj->x->mn == 0 || P->obj->y->mn ==  0) return FALSE;
  if ( P->obj->x->mn != 0 ) 
    {
      bounds[0]=P->obj->x->R[0]; /* xmin */
      bounds[2]=P->obj->x->R[P->obj->x->mn-1];/* xmax */
    }
  if ( P->obj->y->mn != 0 ) 
    {
      bounds[1]=P->obj->y->R[0] ; /* ymin */
      bounds[3]=P->obj->y->R[P->obj->y->mn-1];/* ymax */
    }
  return TRUE;
}


