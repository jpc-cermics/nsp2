/* -*- Mode: C -*- */
%%
headers
#include "nsp/compound.h"
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
static void nsp_draw_compound(BCG *Xgc,NspGraphic *Obj);

%%
init 

Init portion 

%%
override_type Compound
  /* inserted verbatim in the type definition */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_compound;

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override compound_attach kwargs
int _wrap_compound_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  store_graphic_object(Xgc, pl);
  return 0;
}

%%
override umfpack_action_do_action

static int _wrap_kiko_action_do_action(NspKiko *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {s_int,t_end};
  int i, ret;

  if ( GetArgs(stack,rhs,opt,T,&i) == FAIL) return RET_BUG;
  if ( nsp_move_boolean(stack,1,ret)==FAIL) return RET_BUG;
  return 1;
}

%%
last

/* inserted verbatim at the end */

static void nsp_draw_compound(BCG *Xgc,NspGraphic *Obj)
{
  double WRect[4],WRect1[4], FRect[4], ARect[4];
  char logscale[2];
  Cell *cloc;
  NspList *L;
  NspCompound *P = (NspCompound *) Obj;
  Xgc->graphic_engine->scale->drawrectangle(Xgc,P->obj->wrect->R);
  /* draw elements */
  L = P->obj->elts;
  cloc = L->first ;
  /* we change the scale according to the compound */
  getscale2d(Xgc,WRect,FRect,logscale,ARect);
  /* wrect is [left,up,w,h] */
  WRect1[0]= (P->obj->wrect->R[0]-FRect[0])/(FRect[2]-FRect[0]);
  WRect1[1]= 1- (P->obj->wrect->R[1]-FRect[1])/(FRect[3]-FRect[1]);
  WRect1[2]= (P->obj->wrect->R[2])/(FRect[2]-FRect[0]);
  WRect1[3]= (P->obj->wrect->R[3])/(FRect[3]-FRect[1]);
  /* we directly change the default scale because we do not want 
   * to register all the scales that will be generated by set_scale 
   * thus we use T in flag[1].
   */
  set_scale(Xgc,"fTtfff",WRect1,P->obj->frect->R,NULL,NULL,NULL);
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->draw(Xgc,G);
	}
      cloc = cloc->next;
    }
  /* scale back */
  set_scale(Xgc,"fTtfff",WRect,FRect,NULL,NULL,NULL);
}

/* compute the bounds of the set of objects countained in the 
 * compound 
 */

static void nsp_compound_compute_inside_bounds(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  double l_bounds[4];
  Cell *cloc;
  NspList *L;
  NspCompound *P = (NspCompound *) Obj;
  L = P->obj->elts;
  cloc = L->first ;
  while ( cloc != NULLCELL ) 
    {
      if ( cloc->O != NULLOBJ ) 
	{
	  NspGraphic *G= (NspGraphic *) cloc->O;
	  G->type->bounds(Xgc,G,l_bounds);
	  if ( l_bounds[0] < bounds[0] ) 
	    bounds[0]= l_bounds[0];
	  else if (  l_bounds[2] > bounds[2])
	    bounds[2]= l_bounds[2];
	  if ( l_bounds[1] < bounds[1] ) 
	    bounds[1]= l_bounds[1];
	  else if (  l_bounds[3] > bounds[3])
	    bounds[3]= l_bounds[3];
	}
      cloc = cloc->next;
    }
}



/*
  xsetech(arect=[0.0,0.0,0.0,0.0],wrect=[0,0,1,1],frect=[0,-2,6,2]);
  //plot2d()
  C=compound_create();
  C.wrect=[3,2,3,2]; // the position of the compound in its parent 
  C.frect=[-2,0,2,3]; // the scales that the compound establish for its 
  // inside 
  compound_attach(C);
  P=polyline_create();
  P.Pts=[0,0;1,2;2,0];
  C.elts(1) = P;
  P=polyline_create();
  P.Pts=[-2,0;2,0;2,3;0,3;-2,3];
  C.elts(2) = P;
  x=linspace(-2,2,200);
  P=polyline_create();
  P.Pts=[x;sin(x)]';
  C.elts(3)=P;
  P=polyline_create();
  P.Pts=[0,0;1,2;2,0;0,0];
  polyline_attach(P);
  C.alpha =0.0; %pi/6;
  
  */
