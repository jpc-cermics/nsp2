/* -*- Mode: C -*- */
%%
include-start Qcurve
/* inserted at the start of the include file */
#include <nsp/axes.h> 

%%
include-public Qcurve
/* inserted at the end of public part of include file */

extern void nsp_qcurve_addPts(NspQcurve *C,NspMatrix *Pts);
extern void nsp_qcurve_addpt(NspQcurve *C,const double *x,const double *y,int n);
extern void nsp_qcurve_clear(NspQcurve *C);
extern int nsp_qcurve_get_len(NspQcurve *C);
extern void nsp_qcurve_get_xy(NspQcurve *C,double *cx,double *cy);
extern void nsp_qcurve_get_xy_stem(NspQcurve *C,double *cx,double *cy);
extern int nsp_qcurve_enlarge(NspQcurve *C,int npts);
extern NspMatrix *nsp_qcurve_get_pts(NspQcurve *C);
typedef enum { qcurve_std, qcurve_stairs, qcurve_stem , qcurve_arrow} nsp_qcurve_mode ; 
%%
include-private Qcurve
/* inserted in the private part of include file */

static void nsp_draw_qcurve(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_qcurve(NspGraphic *o,const double *tr);
static void nsp_rotate_qcurve(NspGraphic *o,double *R);
static void nsp_scale_qcurve(NspGraphic *o,double *alpha);
static int nsp_getbounds_qcurve(NspGraphic *o,double *bounds);
static void nsp_qcurve_stem_draw(BCG *Xgc,NspQcurve *C);

%%
headers

%%
init 

Init portion 

%%
override-type Qcurve
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_qcurve;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_qcurve ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_qcurve  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_qcurve  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_qcurve  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Qqcurve */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-attr Qcurve.mode 
/* override set alpha */
static int _wrap_qcurve_set_mode(void *self, char *attr, NspObject *O)
{
  int mode;
  if ( IntScalar(O,&mode) == FAIL) return FAIL;
  if ( ((NspQcurve *) self)->obj->mode !=  mode)
    {
      ((NspQcurve *) self)->obj->mode =  mode;
      nsp_graphic_invalidate((NspGraphic *) self);
    }
  return OK;
}

%%
override-attr Qcurve.Pts 

/* overriden to check dimensions when changing values.
 */

static NspObject *_wrap_qcurve_get_obj_Pts(void *self,char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE; 
  ret = ((NspMatrix*) ((NspQcurve *) self)->obj->Pts);
  return (NspObject *) ret;
}

static int _wrap_qcurve_set_obj_Pts(void *self,NspObject *val)
{
  NspMatrix *M= (NspMatrix *) val ; 
  NspQcurve *poly = self ;
  if ( M->rc_type != 'r' || M->n != 2 )
    {
      Scierror("Error: qcurve field Pts should be real an mx2 sized\n");
      return FAIL;
    }
  /* before replacing the field we check that dimensions are correct */
  if ( poly->obj->Pts != NULL )
    nsp_matrix_destroy(poly->obj->Pts);
  poly->obj->Pts = (NspMatrix *) val ;
  return OK;
}

%%
override nsp_extractelts_qcurve kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_qcurve(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_qcurve kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_qcurve(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */
/* 
    '("int" "color"); curve color 
    '("int" "mark") ; mark to be used 
    '("double" "width"); line width 
    '("int" "style"); line style 
    '("int" "mode"); mode: std, step, stem, arrow.
    '("NspMatrix*" "Pts")
*/



static void nsp_draw_qcurve(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  int cmark=-1;
  int xmark[2];
  NspQcurve *P = (NspQcurve *) Obj;
  int c_width = Xgc->graphic_engine->xget_thickness(Xgc);
  int c_color = Xgc->graphic_engine->xget_color(Xgc);

  if ( Obj->obj->show == FALSE ) return ;

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  if ( P->obj->Pts->m == 0) return;
  if ( P->obj->start == -1) return;

  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->width);
  if ( P->obj->mark >= 0 ) 
    {
      /* use a mark */
      Xgc->graphic_engine->xget_mark(Xgc,xmark); 
      cmark=xmark[0];
      Xgc->graphic_engine->xset_mark(Xgc, P->obj->mark,P->obj->width);
    }
  if ( P->obj->color != -1 ) 
    Xgc->graphic_engine->xset_color(Xgc, P->obj->color);

  switch ( P->obj->mode ) 
    {
    case qcurve_stem:
      {
	int nc = nsp_qcurve_get_len(P);
	double *xm=NULL,*ym=NULL;
	int n= 2*nc;
	xm = graphic_alloc(0,n,sizeof(double));
	ym = graphic_alloc(1,n,sizeof(double));
	if ( xm == 0 || ym == 0) 
	  {
	    Sciprintf("Error: cannot allocated points for drawing\n");
	    return;
	  }
	if ( P->obj->color >= 0) Xgc->graphic_engine->xset_color(Xgc, P->obj->color);
	nsp_qcurve_stem_draw(Xgc,P);
	if ( P->obj->color >= 0) Xgc->graphic_engine->xset_color(Xgc, c_color);
      }
      break;
    case qcurve_std:
    default:
      {
	int n = nsp_qcurve_get_len(P);
	double *xm=NULL,*ym=NULL;
	if ( n == 0) break;
	/* Sciprintf("Drawing a q-curve with %d\n",n); */
	xm = graphic_alloc(0,n,sizeof(double));
	ym = graphic_alloc(1,n,sizeof(double));
	if ( xm == 0 || ym == 0) 
	  {
	    Sciprintf("Error: cannot allocate points for drawing\n");
	    break;
	  }
	nsp_qcurve_get_xy(P,xm,ym);
	if ( P->obj->mark >= 0 )
	  Xgc->graphic_engine->scale->drawpolymark(Xgc,xm,ym,n);
	else
	  Xgc->graphic_engine->scale->drawpolyline(Xgc,xm,ym,n,0);
	break;
      }
    }
  Xgc->graphic_engine->xset_thickness(Xgc,c_width);
  Xgc->graphic_engine->xset_color(Xgc,c_color);
  if ( P->obj->mark >= 0 ) 
    {
      Xgc->graphic_engine->xset_mark(Xgc,cmark,xmark[1]);
    }
}

static void nsp_translate_qcurve(NspGraphic *Obj,const double *tr)
{
  int i; 
  NspQcurve *P = (NspQcurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < M->m ; i++) 
    {
      *(x++) += tr[0];
      *(y++) += tr[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_qcurve(NspGraphic *Obj,double *R)
{
  int i;
  NspQcurve *P = (NspQcurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m,x1,y1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < M->m ; i++) 
    {
      x1 = R[0]*(*x) -R[1]*(*y);
      y1 = R[1]*(*x) +R[0]*(*y);
      *(x++) =x1;
      *(y++) =y1;
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_qcurve(NspGraphic *Obj,double *alpha)
{
  int i;
  NspQcurve *P = (NspQcurve *) Obj;
  NspMatrix *M = P->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  for ( i=0; i < M->m ; i++) 
    {
      *(x++) *= alpha[0];
      *(y++) *= alpha[1];
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of qcurve 
 *
 */

static int nsp_getbounds_qcurve(NspGraphic *Obj,double *bounds)
{
  int pos,max;
  NspQcurve *C = (NspQcurve *) Obj;
  NspMatrix *M = C->obj->Pts;
  double *x=M->R,*y= M->R+M->m, dval;

  if ( M->mn == 0) return FALSE;
  if ( C->obj->start == -1) return FALSE;
  
  pos = C->obj->start;
  
  bounds[0]=x[pos];/* xmin */
  bounds[1]=y[pos];/* ymin */
  bounds[2]=x[pos];/* xmax */
  bounds[3]=y[pos];/* ymax */
  
  if ( pos <= C->obj->last )
    max = C->obj->last;
  else 
    max = M->m -1 ;
  while ( pos <= max )
    {
      dval = x[pos];
      if ( dval > bounds[2] )
	bounds[2] = dval;
      else if ( dval < bounds[0] )
	bounds[0] = dval;
      dval = y[pos];
      if ( dval > bounds[3] )
	bounds[3] = dval;
      else if ( dval < bounds[1] )
	bounds[1] = dval;
      pos++;
    }
  if ( C->obj->last < C->obj->start )
    {
      pos = 0;
      while ( pos <= C->obj->last )
	{
	  dval = x[pos];
	  if ( dval > bounds[2] )
	    bounds[2] = dval;
	  else if ( dval < bounds[0] )
	    bounds[0] = dval;
	  dval = y[pos];
	  if ( dval > bounds[3] )
	    bounds[3] = dval;
	  else if ( dval < bounds[1] )
	    bounds[1] = dval;
	  pos++;
	}
    }
  return TRUE;
}

void nsp_qcurve_addPts(NspQcurve *C,NspMatrix *Pts)
{
  /* XXX : check if matrix is real and with two columns 
   */
  return nsp_qcurve_addpt(C,Pts->R,Pts->R+Pts->m,Pts->m);
}

void nsp_qcurve_addpt(NspQcurve *C,const double *x,const double *y,int n)
{
  NspMatrix *M = C->obj->Pts;
  double *qx=M->R,*qy= M->R+M->m;
  int i,pos;
  /* add n points to the qcurvebuffer 
   */
  if ( M->mn == 0 ) return ;
  if ( C->obj->start == -1 )
    {
      /* initialize */
      C->obj->start = 0;
    }
  for ( i = 0 ; i < n ; i++)
    {
      /* insert after last */
      if ( C->obj->last == -1 )
	{
	  C->obj->last = 0;
	}
      else
	{
	  C->obj->last++;
	  if ( C->obj->last >= M->m )C->obj->last = 0;
	  if ( C->obj->last == C->obj->start)
	    {
	      C->obj->start++;
	      if ( C->obj->start >= M->m ) C->obj->start = 0;
	    }
	}
      /* now insert at  C->obj->last */
      pos = C->obj->last;
      qx[pos]= x[i];
      qy[pos]= y[i];
    }
}

void nsp_qcurve_clear(NspQcurve *C)
{
  C->obj->start = -1;
}

int nsp_qcurve_get_len(NspQcurve *C)
{
  return ( C->obj->start == -1 ) ? 0 :
    ( C->obj->start <= C->obj->last) ? C->obj->last - C->obj->start + 1
    : C->obj->Pts->m - C->obj->start + C->obj->last +1;
}

void nsp_qcurve_get_xy(NspQcurve *C,double *cx,double *cy)
{
  int i=0 ,pos,max;
  NspMatrix *M = C->obj->Pts;
  double *x=M->R,*y= M->R+M->m;
  pos = C->obj->start;
  max =( pos <= C->obj->last )
    ? C->obj->last :  M->m -1 ;

  if ( pos == -1 ) return;
  while ( pos <= max )
    {
      cx[i]  = x[pos];
      cy[i]  = y[pos];
      pos++;i++;
    }
  if ( C->obj->last < C->obj->start )
    {
      pos = 0;
      while ( pos <= C->obj->last )
	{
	  cx[i]  = x[pos];
	  cy[i]  = y[pos];
	  pos++;i++;
	}
    }
}

void nsp_qcurve_get_xy_stem(NspQcurve *C,double *cx,double *cy)
{
  int i=0 ,pos,max;
  const NspMatrix *M = C->obj->Pts;
  const double *x=M->R,*y= M->R+M->m;
  pos = C->obj->start;
  max =( pos <= C->obj->last )
    ? C->obj->last :  M->m -1 ;

  if ( pos == -1 ) return;
  while ( pos <= max )
    {
      cx[2*i]  = x[pos];
      cy[2*i]  = 0;
      cx[2*i+1]  = x[pos];
      cy[2*i+1]  = y[pos];
      pos++;i++;
    }
  if ( C->obj->last < C->obj->start )
    {
      pos = 0;
      while ( pos <= C->obj->last )
	{
	  cx[2*i]  = x[pos];
	  cy[2*i]  = 0;
	  cx[2*i+1]  = x[pos];
	  cy[2*i+1]  = y[pos];
	  pos++;i++;
	}
    }
}

static void nsp_qcurve_stem_draw(BCG *Xgc,NspQcurve *C)
{
  double cx[2],vx[2],cy[2],vy[2];
  int pos = C->obj->start;
  const NspMatrix *M = C->obj->Pts;
  const double *x=M->R,*y= M->R+M->m;
  const int max = ( pos <= C->obj->last ) ? C->obj->last :  M->m -1 ;
  if ( pos == -1 ) return;
  while ( pos <= max )
    {
      cx[0]  = x[pos];
      cy[0]  = 0;
      cx[1]  = x[pos];
      cy[1]  = y[pos];
      scale_double_to_pixels(Xgc->scales,cx,cy,vx,vy,2);
      Xgc->graphic_engine->drawline(Xgc,vx[0],vy[0],vx[1],vy[1]);
      pos++;
    }
  if ( C->obj->last < C->obj->start )
    {
      pos = 0;
      while ( pos <= C->obj->last )
	{
	  cx[0]  = x[pos];
	  cy[0]  = 0;
	  cx[1]  = x[pos];
	  cy[1]  = y[pos];
	  scale_double_to_pixels(Xgc->scales,cx,cy,vx,vy,2);
	  Xgc->graphic_engine->drawline(Xgc,vx[0],vy[0],vx[1],vy[1]);
	  pos++;
	}
    }
}



/* increase the qcurve buffer with npts points 
 *
 */

int nsp_qcurve_enlarge(NspQcurve *C,int npts)
{
  NspMatrix *M = C->obj->Pts;
  NspMatrix *Mnew = nsp_matrix_create("Pts",'r',M->m+npts,2);
  double *cx= (Mnew == NULL) ? NULL : Mnew->R;
  double *x=M->R;
  double *cy= (Mnew == NULL) ? NULL : Mnew->R+Mnew->m;
  double *y = M->R+M->m;
  int start=0, i=0;
  int pos = C->obj->start;
  int max =( pos <= C->obj->last ) ? C->obj->last :  M->m -1 ;
  
  if ( Mnew == NULL ) return FALSE;

  if ( pos != -1 ) 
    {
      while ( pos <= max )
	{
	  cx[i]  = x[pos];
	  cy[i]  = y[pos];
	  pos++;i++;
	}
      if ( C->obj->last < C->obj->start )
	{
	  pos = 0;
	  while ( pos <= C->obj->last )
	    {
	      if ( i > Mnew->m ) 
		{
		  i=0;
		}
	      cx[i]  = x[pos];
	      cy[i]  = y[pos];
	      pos++;
	      if ( i <= start ) start++;
	      i++;
	    }
	}
    }
  else
    {
      start = -1;
    }
  /* update */
  nsp_matrix_destroy(C->obj->Pts);
  C->obj->Pts = Mnew;
  C->obj->last= i-1;
  C->obj->start = start;
  return TRUE;
}

NspMatrix *nsp_qcurve_get_pts(NspQcurve *C)
{
  int np = nsp_qcurve_get_len(C);
  NspMatrix *Pts;
  if (( Pts = nsp_matrix_create("Pts",'r',np,2))== NULL) return NULL;
  nsp_qcurve_get_xy(C,Pts->R,Pts->R+Pts->m);
  return Pts;
}

