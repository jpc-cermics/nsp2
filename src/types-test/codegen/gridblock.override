/* -*- Mode: C -*- */
%%
include-start GridBlock 
/* inserted at the start of include file */
#include <stdio.h>   /* for file declaration */
#include <nsp/figure.h>
#include <nsp/diagram.h>
#include <nsp/grint.h> /* interface definition */
#include <nsp/eval.h>/* interface definition */

/**
 * NspGridBlock:
 * @obj: a #nsp_block pointer 
 *
 * inherits from #NspObject and implements Grint. 
 * Used for graphic blocks for a C implementation of scicos.
 */

%%
include-public  GridBlock

/* inserted at the end of public part of include file */

NspGridBlock *nsp_gridblock_create_override(char *name,double *rect,int color,int thickness,int background);
NspGridBlock *nsp_gridblock_create_from_nsp_diagram(char *name,double *rect,int color,int thickness,int background, NspDiagram *D);
NspDiagram *nsp_gridblock_get_diagram(void *B1);

%%
include-private  GridBlock

/* local */

%%
headers
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h> 
#include "nsp/link.h"
#include "nsp/block.h"
#include "nsp/axes.h"
#include "nsp/grimage.h"

%%
init 

Init portion 

%%
override-type GridBlock
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;

%%
override-implements GridBlock 


  t_grint->get_hilited 	= ((NspTypeGRint *) type->surtype->interface)->get_hilited;
  t_grint->set_hilited 	= ((NspTypeGRint *) type->surtype->interface)->set_hilited;
  t_grint->get_show    	= ((NspTypeGRint *) type->surtype->interface)->get_show;
  t_grint->set_show		= ((NspTypeGRint *) type->surtype->interface)->set_show;
  t_grint->set_pos  	= ((NspTypeGRint *) type->surtype->interface)->set_pos;
  t_grint->get_pos  	= ((NspTypeGRint *) type->surtype->interface)->get_pos;
  t_grint->resize 		= ((NspTypeGRint *) type->surtype->interface)->resize;
  t_grint->update_locks 	= ((NspTypeGRint *) type->surtype->interface)->update_locks;
  t_grint->contains_pt 	= ((NspTypeGRint *) type->surtype->interface)->contains_pt;
  t_grint->control_near_pt 	= ((NspTypeGRint *) type->surtype->interface)->control_near_pt;
  t_grint->lock_near_pt 	= ((NspTypeGRint *) type->surtype->interface)->lock_near_pt;
  t_grint->move_control_init= ((NspTypeGRint *) type->surtype->interface)->move_control_init;
  t_grint->move_control 	= ((NspTypeGRint *) type->surtype->interface)->move_control;

  t_grint->get_number_of_locks = ((NspTypeGRint *) type->surtype->interface)->get_number_of_locks;
  t_grint->get_number_of_ports = ((NspTypeGRint *) type->surtype->interface)->get_number_of_ports;
  t_grint->get_lock_connection = ((NspTypeGRint *) type->surtype->interface)->get_lock_connection;
  t_grint->get_lock_pos = ((NspTypeGRint *) type->surtype->interface)->get_lock_pos;
  t_grint->get_lock_dir = ((NspTypeGRint *) type->surtype->interface)->get_lock_dir;
  t_grint->set_lock_connection = ((NspTypeGRint *) type->surtype->interface)->set_lock_connection;
  t_grint->unset_lock_connection = ((NspTypeGRint *) type->surtype->interface)->unset_lock_connection;
  t_grint->is_lock_connectable = ((NspTypeGRint *) type->surtype->interface)->is_lock_connectable;
  t_grint->is_lock_connected = ((NspTypeGRint *) type->surtype->interface)->is_lock_connected;
  t_grint->set_lock_pos = ((NspTypeGRint *) type->surtype->interface)->set_lock_pos;
  t_grint->unlock = ((NspTypeGRint *) type->surtype->interface)->unlock;

%%
ignore-glob
  *_get_type

%%
override gridblock_edit

int _wrap_gridblock_edit(void *self,Stack stack, int rhs, int opt, int lhs)
{
  NspDiagram *D; 
  if ((D = nsp_diagram_from_gridblock(NVOID,self)) == NULL) return RET_BUG;
  MoveObj(stack,1,NSP_OBJECT(D));
  return 1;
}


%%
last

/* inserted verbatim at the end */

NspGridBlock *nsp_gridblock_create_override(char *name,double *rect,int color,int thickness,int background)
{
  NspDiagram *D;
  NspBlock *B;
  NspGridBlock *H;
  /* want to be sure that type gridblock is initialized */
  nsp_type_gridblock = new_type_gridblock(T_BASE);
  if(( H = nsp_gridblock_create_void(name,(NspTypeBase *) nsp_type_gridblock)) == NULLGRIDBLOCK)
    return NULL;
  if ( nsp_gridblock_create_partial(H) == FAIL) return NULL;
  B = (NspBlock *) H;
  /* create the part from father */
  memcpy(B->obj->r,rect,4*sizeof(double));
  B->obj->color = color;
  B->obj->thickness = thickness;
  B->obj->background = background;
  B->obj->n_locks = 0;
  /* create the own part */
  if ((D = nsp_diagram_create_default("dg")) == NULL) return NULLGRIDBLOCK;
  H->obj->diagram = D;
  /* to prevent destruction of obj */
  D->obj->ref_count++;
#if 0
  {
    /* insert a first object in the frame */
    int color=4,thickness=1, background=9;
    double rect[]={0,100,25,25};
    NspBlock *B;
    B = nsp_block_create("fe",NULL,rect,color,thickness,background,0,NULL,NULL,0,NULL);
    if ( B == NULLBLOCK) return NULLGRIDBLOCK;
    nsp_list_end_insert(D->obj->children,(NspObject  *) B);
  }
#endif 
  return H;
}

/* create a NspGridBlock filled with a full copy of objects from @F
 *
 */

NspGridBlock *nsp_gridblock_create_from_nsp_diagram(char *name,double *rect,int color,int thickness,int background, NspDiagram *D) 
{
  NspGraphic *G;
  NspBlock *B;
  NspGridBlock *H;
  double rect1[]={0,100,25,25};
  /* want to be sure that type gridblock is initialized */
  nsp_type_gridblock = new_type_gridblock(T_BASE);
  if(( H = nsp_gridblock_create_void(name,(NspTypeBase *) nsp_type_gridblock)) == NULLGRIDBLOCK)
    return NULL;
  if ( nsp_gridblock_create_partial(H) == FAIL) return NULL;
  B = (NspBlock *) H;
  /* create the part from father */
  B->obj->color = color;
  B->obj->thickness = thickness;
  B->obj->background = background;
  B->obj->n_locks = 0;
  B->obj->icon = NULL;
  B->obj->locks = NULL;
  B->obj->draw_mode = 0;
  memcpy(B->obj->r,rect1,4*sizeof(double));
  /* create the own part, the Diagram given as argument must be a copy */
  H->obj->diagram = D;
  /* to prevent destruction of obj */
  D->obj->ref_count++;
  G = (NspGraphic *)D;
  G->type->unlink_figure(G, ((NspGraphic *) D)->obj->Fig);
  return H;
}



#if 0

/* #define DRAW_INSIDE */

void gridblock_draw(NspGridBlock *B)
{
#ifdef DRAW_INSIDE
  double WRect[4],WRect1[4], FRect[4], ARect[4];
  char logscale[2];
#endif 
  NspBlock *Bl = (NspBlock *) B;
  /* take care of the fact that str1 must be writable */
  BCG *Xgc;
  int cpat, cwidth;
  /* only draw gridblock which are in a frame */
  if ( Bl->obj->frame == NULL) return;
  /* check the show attribute */
  if ( Bl->obj->show == FALSE ) return ;
  Xgc=Bl->obj->frame->Xgc;
  cpat = Xgc->graphic_engine->xget_pattern(Xgc);
  cwidth = Xgc->graphic_engine->xget_thickness(Xgc);
#ifdef DRAW_INSIDE
  /* Draw the super block inside the block ! 
   */
  /* set the scale for drawing inside the frame */
  getscale2d(Xgc,WRect,FRect,logscale,ARect);
  /* use gf->r to modify the scales */
  WRect1[0]= (B->obj->r[0]-FRect[0])/(FRect[2]-FRect[0]);
  WRect1[1]= 1- (B->obj->r[1]-FRect[1])/(FRect[3]-FRect[1]);
  WRect1[2]= B->obj->r[2]/FRect[2];
  WRect1[3]= B->obj->r[3]/FRect[3];
  /* we directly change the default scale because we do not want 
   * to register all the scales that will be generated by set_scale 
   * thus we use T in flag[1].
   */
  set_scale(Xgc,"fTtfff",WRect1,B->obj->scale,NULL,NULL,NULL);
  nspgframe_draw(B->obj);
  /* scale back */
  set_scale(Xgc,"fTtfff",WRect,FRect,NULL,NULL,NULL);
#endif 
  /* call the father draw */
  GR_INT(Bl->type->interface)->draw(Bl);
  Xgc->graphic_engine->xset_pattern(Xgc,cpat);
  Xgc->graphic_engine->xset_thickness(Xgc,cwidth);
}
#endif 


NspDiagram *nsp_gridblock_get_diagram(void *B1)
{
  ((NspGridBlock *) B1)->obj->ref_count++;
  return ((NspGridBlock *) B1)->obj->diagram;
}
