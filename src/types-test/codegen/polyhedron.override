/* -*- Mode: C -*- */
%%
headers
#include "nsp/polyhedron.h"
#include <nsp/figure.h> 
#include "../graphics/Plo3dObj.h"
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
extern void fillpolylines3D(BCG *Xgc,double *vectsx, double *vectsy, double *vectsz, int *fillvect,int n, int p); 
extern  int nsp_obj3d_orientation(int x[], int y[], int n);
extern void nsp_figure_force_redraw( NspFigure *F);
extern void apply_transforms(BCG *Xgc,double Coord[],const double *M, VisionPos pos[],const double lim[], int ncoord);
#ifdef  WITH_GTKGLEXT 
extern Gengine GL_gengine;
#endif 

static void nsp_draw_polyhedron(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_polyhedron(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_polyhedron(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_polyhedron(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_polyhedron(BCG *Xgc,NspGraphic *o,double *bounds);
static void nsp_polyhedron_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim);
static int nsp_polyhedron_n_faces(BCG *Xgc,NspGraphic *Obj);
static int nsp_check_polyhedron(NspPolyhedron *P);

static void draw_polyhedron_ogl(BCG *Xgc,void *Ob);
static void draw_polyhedron_face(BCG *Xgc,NspGraphic *Ob, int j);

%%
init 

Init portion 

%%
override_type Polyhedron
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_polyhedron;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_polyhedron ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_polyhedron  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_polyhedron  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_polyhedron  ;
  ((NspTypeGraphic *) type->surtype)->full_copy = (full_copy_func *) nsp_polyhedron_full_copy ;
  /* next method are defined in NspGraphic and need not be chnaged here for Polyhedron */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 
  ((NspTypeGraphic *) type->surtype)->zmean = nsp_polyhedron_zmean;
  ((NspTypeGraphic *) type->surtype)->n_faces = nsp_polyhedron_n_faces;

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override_int_create_final 
  /* verbatim in create/load/copy interface  */
  if ( nsp_check_polyhedron(H)== FAIL) return %(ret)s; 

%%
override_destroy_prelim
  /* verbatim in destroy */
  nsp_matrix_destroy(H->obj->Mcoord_l);

%%
override polyhedron_attach kwargs
int _wrap_polyhedron_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  store_graphic_object(Xgc, pl);
  return 0;
}

%%
override-attr Pts 

/* overriden to check dimensions when changing values.
 */

static NspObject *_wrap_polyhedron_get_obj_Pts(void *self,char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE; 
  ret = ((NspMatrix*) ((NspPolyhedron *) self)->obj->Pts);
  return (NspObject *) ret;
}

static int _wrap_polyhedron_set_obj_Pts(void *self,NspObject *val)
{
  NspMatrix *M= (NspMatrix *) val ; 
  NspPolyhedron *poly = self ;
  if ( M->rc_type != 'r' || M->n != 2 )
    {
      Scierror("Error: polyhedron field Pts should be real an mx2 sized\n");
      return FAIL;
    }
  /* before replacing the field we check that dimensions are correct */
  if ( poly->obj->Pts != NULL )
    nsp_matrix_destroy(poly->obj->Pts);
  poly->obj->Pts = (NspMatrix *) val ;
  return OK;
}

%%
override nsp_extractelts_polyhedron kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_polyhedron(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_polyhedron kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_polyhedron(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* function called when draw is needed 
 * data can be NULL and when non null 
 * it gives the face to draw for the polyhedron 
 */

static void nsp_draw_polyhedron(BCG *Xgc,NspGraphic *Obj, void *data)
{
  int face; 
  if ( Obj->obj->hidden == TRUE ) return ;
  nsp_check_polyhedron((NspPolyhedron *) Obj);
#ifdef  WITH_GTKGLEXT 
  if ( Xgc->graphic_engine == &GL_gengine ) 
    {
      /* if we are using OpenGl we make a full draw of 
       * object and return 
       */
      draw_polyhedron_ogl(Xgc,Obj);
      nsp_ogl_set_2dview(Xgc); 
      return; 
    }
#endif 
  if ( data != NULL) 
    {
      face = *((int *) data);
      draw_polyhedron_face(Xgc,Obj,face);
    }
  else 
    {
      int i;
      /* draw all the faces: this is not really used  
       * since the face order is computed and sequenced in upper object.
       */
      for ( i= 0 ; i < ((NspPolyhedron*) Obj)->obj->Mface->n ; i++) 
	draw_polyhedron_face(Xgc,Obj,i);
    }
}


static void nsp_translate_polyhedron(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_polyhedron(BCG *Xgc,NspGraphic *Obj,double *R)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_polyhedron(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute the bounds of the polyhedron: 
 * note that for 3dobjets this is of length 6 
 */

extern void nsp_gr_bounds_min_max(int n,double *A,int incr,double *Amin, double *Amax) ;

static void nsp_getbounds_polyhedron(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  int i;
  /* this should be stored in a cache and recomputed when necessary 
   *
   */
  nsp_polyhedron *Q= ((NspPolyhedron *) Obj)->obj;
  nsp_check_polyhedron((NspPolyhedron *) Obj);
  if ( Q->Mcoord->mn == 0) 
    {
      bounds[0]= bounds[1] = bounds[2]= bounds[3]= bounds[4]=bounds[5]= 0;
      return;
    }
  for ( i = 0 ; i < Q->Mcoord->m ; i++) 
    nsp_gr_bounds_min_max(Q->Mcoord->n,Q->Mcoord->R+i,3,&bounds[2*i],&bounds[2*i+1]);
  return;
}

void nsp_gr_bounds_min_max(int n,double *A,int incr,double *Amin, double *Amax) 
{
  int i,i1;
  double amin= A[0], amax=A[0];
  /* look for the first non Nan component */
  i = 0; i1 = 1;
  while ( i1 <= n && ISNAN(A[i]) ) { i += incr; i1++; }
  if ( i1 <= n )
    {
      /* init with the first non Nan component then do the usual loop */
      amin = amax = A[i];
      i1++; i+=incr;
      for (  ; i1 <= n ; i += incr, i1++ )
	{
	  if ( A[i] < amin )
	    {
	      amin = A[i];
	    }
	  else if ( A[i] > amax )
	    {
	      amax = A[i];
	    }
	}
    }
  *Amax = amax; *Amin = amin;
  return;
}

/* checks that polyhedron is OK:
 * converts matrices data to int 
 * allocated extra matrices 
 */

int nsp_check_polyhedron( NspPolyhedron *P)
{
  nsp_polyhedron *Q = P->obj;
  int Q_nb_faces = Q->Mface->n;
  int Q_nb_coords = Q->Mcoord->n;

  if ( Q->Mcoord->m != 3 ) 
    {
      Scierror("Error: bad coord for polyhedron, first dimension should be 3\n");
      return FAIL;
    }
  if ( Q->Mface->m < 3 ) 
    {
      Scierror("Error: bad face for polyhedron, first dimension should be >= 3\n");
      return FAIL;
    }
  if ( Q->Mcolor->mn !=  Q_nb_faces   && Q->Mcolor->mn != 1 ) 
    {
      Scierror("Error: bad color size for polyhedron, expecting 1 or %d\n", Q_nb_faces);
      return FAIL;
    }
  
  if ( Q->Mback_color->mn  !=  Q_nb_faces  && Q->Mback_color->mn != 1 ) 
    {
      Scierror("Error: bad back_color size for polyhedron, expecting 1 or %d\n", Q_nb_faces);
      return FAIL;
    }

  Q->Mface = Mat2int(Q->Mface);
  Q->Mback_color = Mat2int(Q->Mback_color);
  Q->Mcolor = Mat2int(Q->Mcolor);

  /* create extra data for qpos declared int* 
   * Q->pos id only usefull for non opengl driver 
   */
  if ( Q->pos == NULL) Q->pos = malloc( Q_nb_coords * sizeof(int));
  Q->pos_length = Q_nb_coords;

  /* create extra data for Mcoord_l declared void* */
  if ( Q->Mcoord_l == NULL) 
    {
      Q->Mcoord_l = nsp_matrix_create("local",'r',Q->Mcoord->m, Q->Mcoord->n);
    }
  return OK;
}


/* draw one face of a polyhedron 
 * Author: Bruno Pincon <Bruno.Pincon@iecn.u-nancy.fr>
 */

static void draw_polyhedron_face(BCG *Xgc,NspGraphic *Ob, int j)
{
  nsp_polyhedron *Q = ((NspPolyhedron *) Ob)->obj;
  int i, np=1, m;
  int x[6], y[6];   /* a changer */
  int numpt, *current_vertex, color;

  /* int Q_nb_coords = Q->Mcoord->n; */
  double * Q_coord = ((NspMatrix *) Q->Mcoord_l)->R;
  int Q_nb_vertices_per_face = Q->Mface->m;
  /* int Q_nb_faces = Q->Mface->n; */
  int * Q_face = Q->Mface->I;
  int Q_nb_colors = Q->Mcolor->mn;
  int * Q_color =  Q->Mcolor->I;
  int Q_nb_back_colors = Q->Mback_color->mn ;
  int * Q_back_color =  Q->Mback_color->I;
  
  int foreground_color = 1; /* XX should be shared */

  m = Q_nb_vertices_per_face;
  current_vertex = &(Q_face[m*j]);
  for (i = 0 ; i < m ; i++)
    {
      numpt = current_vertex[i]-1;
      x[i] = XScale(Q_coord[3*numpt]);
      y[i] = YScale(Q_coord[3*numpt+1]);
    }
  
  if ( nsp_obj3d_orientation(x, y, m) == -1 )  /* le repère de la caméra est indirect ! */
    if ( Q_nb_colors == 1 )
      color = Q_color[0];
    else
      color = Q_color[j];
  else       /* orientation < 0 =>  back color is used */
    if ( Q_nb_back_colors == 1 )
      color = Q_back_color[0];
    else
      color = Q_back_color[j];
	    
  if ( ! Q->mesh )  /* le contour du polygone ne doit pas apparaitre */
    color = -color; 

  /* color = 0;  permet de voir uniquement le maillage */
  /* 
   *  x, y : polygone(s) coordinates, nr : number of sides
   *  np : number of polygone(s) =1 here
   */
  Xgc->graphic_engine->xset_pattern(Xgc,foreground_color);
  Xgc->graphic_engine->fillpolylines(Xgc, x, y, &color, np, m);
}

static void draw_polyhedron_ogl(BCG *Xgc,void *Ob)
{
#ifdef  WITH_GTKGLEXT 
  nsp_polyhedron *Q = ((NspPolyhedron *) Ob)->obj;
  int i,j, m;
  double x[6], y[6], z[6];   /* a changer */
  int numpt, *current_vertex, color;

  /* int Q_nb_coords = Q->Mcoord->n;  */
  double * Q_coord = Q->Mcoord->R;
  int Q_nb_vertices_per_face = Q->Mface->m;
  int Q_nb_faces = Q->Mface->n;
  int * Q_face = Q->Mface->I;
  int Q_nb_colors = Q->Mcolor->mn;
  int * Q_color =  Q->Mcolor->I;
  /*   int Q_nb_back_colors = Q->Mback_color->mn ; */
  /* int * Q_back_color =  Q->Mback_color->I;*/
  
  int foreground_color = 1; /* should be shared */
  
  m = Q_nb_vertices_per_face;

  for ( j = 0 ; j < Q_nb_faces ; j++ )
    {
      current_vertex = &(Q_face[m*j]);
      for (i = 0 ; i < m ; i++)
	{
	  numpt = current_vertex[i]-1;
	  x[i] = Q_coord[3*numpt];
	  y[i] = Q_coord[3*numpt+1];
	  z[i] = Q_coord[3*numpt+2];
	}
      
      color = ( Q_nb_colors == 1 ) ? Q_color[0]: Q_color[j];
      /* le contour du polygone ne doit pas apparaitre */
      if ( ! Q->mesh ) 	color = -color; 
      /* color = 0;  permet de voir uniquement le maillage */
      /* draw one face */
      Xgc->graphic_engine->xset_pattern(Xgc,foreground_color);
      fillpolylines3D(Xgc, x, y, z, &color, 1 , m);
    }
#endif
}

/* 
 * this function is to be called after a transformation which have filled 
 * Q->Mcoord_l->R
 * Author: Bruno Pincon <Bruno.Pincon@iecn.u-nancy.fr>
 */

static void zmean_faces_for_Polyhedron(void *Obj, double z[], HFstruct HF[], int *n, int k)
{
  nsp_polyhedron *Q = ((NspPolyhedron *) Obj)->obj;
  int m, i, j, *current_vertex;
  VisionPos pos_face, pos_vertex;
  double coef, zmean;

  /* int Q_nb_coords = Q->Mcoord->n;  */
  double * Q_coord = ((NspMatrix *) Q->Mcoord_l)->R;
  int Q_nb_vertices_per_face = Q->Mface->m;
  int Q_nb_faces = Q->Mface->n;
  int * Q_face = Q->Mface->I;

  nsp_check_polyhedron((NspPolyhedron *) Obj);
  
  m = Q_nb_vertices_per_face; 
  coef = 1.0/m;
  current_vertex = Q_face;
  for ( j = 0 ; j < Q_nb_faces ; j++ )
    {
      zmean = 0.0; pos_face = OUT_XY;
      /* Une face rentre dans le calcul des faces cachées si :
       *     1/ aucun point n'est en position OUT_Z
       *     2/ au moins un point est IN (les autres étant alors soit
       *        IN soit OUT_XY)
       * On pourra par la suite détailler un peu plus car si tous les
       * sommets de la face sont IN aucun clippling n'est à effectuer.
       * Faire ce clipping moi-même ?
       */
      for ( i = 0 ; i < m ; i++ )
	{
	  zmean += Q_coord[3*(*current_vertex-1)+2];
	  pos_vertex = Q->pos[*current_vertex-1];
	  if (pos_vertex == OUT_Z)
	    pos_face = OUT_Z;
	  else if (pos_vertex == VIN && pos_face != OUT_Z)
	    pos_face = VIN;
	  current_vertex++;
	}
      if (pos_face == VIN) 
	{
	  z[*n] = coef*zmean;
	  HF[*n].num_obj = k;
	  HF[*n].num_in_obj = j;
	  (*n)++; 
	}
    }
}


/*
 * requested method for 3d objects.
 */

static void nsp_polyhedron_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim)
{
  nsp_polyhedron *Q= ((NspPolyhedron *) Obj)->obj;
  apply_transforms(Xgc,((NspMatrix *) Q->Mcoord_l)->R,Q->Mcoord->R,Q->pos, lim, Q->Mcoord->n);
  zmean_faces_for_Polyhedron(Obj, z,  HF, n, k);
}

/* requested method for 3d objects.
 *
 */

static int nsp_polyhedron_n_faces(BCG *Xgc,NspGraphic *Obj)
{
  return ((NspPolyhedron *) Obj)->obj->Mface->n;
}
