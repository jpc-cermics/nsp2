/* -*- Mode: C -*- */
%%
headers
#include "nsp/polyhedron.h"
#include <nsp/figure.h> 
extern BCG *nsp_check_graphic_context(void);
extern void store_graphic_object(BCG *Xgc,NspObject *obj);
static void nsp_draw_polyhedron(BCG *Xgc,NspGraphic *Obj);
static void nsp_translate_polyhedron(BCG *Xgc,NspGraphic *o,double *tr);
static void nsp_rotate_polyhedron(BCG *Xgc,NspGraphic *o,double *R);
static void nsp_scale_polyhedron(BCG *Xgc,NspGraphic *o,double *alpha);
static void nsp_getbounds_polyhedron(BCG *Xgc,NspGraphic *o,double *bounds);

extern void nsp_figure_force_redraw( NspFigure *F);

%%
init 

Init portion 

%%
override_type Polyhedron
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_polyhedron;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_polyhedron ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_polyhedron  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_polyhedron  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_polyhedron  ;
  ((NspTypeGraphic *) type->surtype)->full_copy = (full_copy_func *) nsp_polyhedron_full_copy ;
  /* next method are defined in NspGraphic and need not be chnaged here for Polyhedron */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override polyhedron_attach kwargs
int _wrap_polyhedron_attach(Stack stack, int rhs, int opt, int lhs)
{
  NspObject  *pl = NULL;
  BCG *Xgc;
  int_types T[] = {obj, t_end} ;
  if ( GetArgs(stack,rhs,opt,T,&pl) == FAIL) return RET_BUG;
  Xgc=nsp_check_graphic_context();
  store_graphic_object(Xgc, pl);
  return 0;
}

%%
override-attr Pts 

/* overriden to check dimensions when changing values.
 */

static NspObject *_wrap_polyhedron_get_obj_Pts(void *self,char *attr, int *copy)
{
  NspMatrix *ret;
  *copy = TRUE; 
  ret = ((NspMatrix*) ((NspPolyhedron *) self)->obj->Pts);
  return (NspObject *) ret;
}

static int _wrap_polyhedron_set_obj_Pts(void *self,NspObject *val)
{
  NspMatrix *M= (NspMatrix *) val ; 
  NspPolyhedron *poly = self ;
  if ( M->rc_type != 'r' || M->n != 2 )
    {
      Scierror("Error: polyhedron field Pts should be real an mx2 sized\n");
      return FAIL;
    }
  /* before replacing the field we check that dimensions are correct */
  if ( poly->obj->Pts != NULL )
    nsp_matrix_destroy(poly->obj->Pts);
  poly->obj->Pts = (NspMatrix *) val ;
  return OK;
}

%%
override nsp_extractelts_polyhedron kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_polyhedron(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_polyhedron kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_polyhedron(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_polyhedron(BCG *Xgc,NspGraphic *Obj)
{
  int flag[]={1,2,4};
  double bbox[]={0,1,0,1,0,1};
  double teta = 35, alpha=45;
  NspPolyhedron *P =(NspPolyhedron*) Obj ;
  if ( Obj->obj->hidden == TRUE ) return ;
  /* be sure that object are in canonical form */
}

static void nsp_translate_polyhedron(BCG *Xgc,NspGraphic *Obj,double *tr)
{
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_polyhedron(BCG *Xgc,NspGraphic *Obj,double *R)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_polyhedron(BCG *Xgc,NspGraphic *Obj,double *alpha)
{
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of polyhedron 
 *
 */

static void nsp_getbounds_polyhedron(BCG *Xgc,NspGraphic *Obj,double *bounds)
{
  bounds[0]= bounds[1] = bounds[2]= bounds[3]=0;
  return;
}


