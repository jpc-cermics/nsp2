/* -*- Mode: C -*- */
%%
include-start ClassA

typedef struct _hfoo hfoo;
struct _hfoo {
  int a;
  double *val;
};

%%
include-public ClassA

/* inserted at the end of public part of include file
 * of classa.h
 */

%%
include-private ClassA

/* inserted in the private part of include file
 * of classa.h
 */

%%
headers
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h> 

%%
init 

/ * init code  * /

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-int-create-final ClassA
  /* verbatim in create/load/full_copy interface use %(ret)s for returned value */
%%
override-destroy-prelim  ClassA
  /* verbatim in destroy */
%%
override classa_color_change kwargs
static int _wrap_classa_color_change(NspClassA *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {s_int,t_end};
  int color;
  if ( GetArgs(stack,rhs,opt,T,&color) == FAIL) return RET_BUG;
  self->cla_color = color;
  return 0;
}
%%
override ClassA.classa_color_show kwargs
/* a method can be overriden by giving its name or 
 * class.name 
 */
static int _wrap_classa_color_show(NspClassA *self,Stack stack,int rhs,int opt,int lhs)
{
  Sciprintf("color: %d\n",self->cla_color);
  return 0;
}
%%
override setrowscols_classa kwargs 
static int _wrap_setrowscols_classa(Stack stack,int rhs,int opt,int lhs)
{
  return int_set_attribute(stack,rhs,opt,lhs);
}
%%
override clatest kwargs 
/* XXXX : the generated code should be corrected */
static int clatest(NspClassA *A)
{
  nsp_object_print((NspObject *) A,0,NULL,0);
  return TRUE;
}

static int _wrap_clatest(Stack stack, int rhs, int opt, int lhs)
{
  int_types T[] = {obj_check,t_end};
  int ret;
  NspObject *A;
  if ( GetArgs(stack,rhs,opt,T,&nsp_type_classa, &A) == FAIL) return RET_BUG;
  ret = clatest((NspClassA *) A);
  if ( nsp_move_boolean(stack,1,ret)==FAIL) return RET_BUG;
  return 1;
}

%%
override-attr ClassA.cla_lval 

/* here we override get_obj  and set_obj 
 * we want get to be followed by a set to check that 
 * inserted value is correct thus we use copy = TRUE.
 */

static NspObject *_wrap_classa_get_obj_cla_lval(void *self,char *attr, int *copy)
{
  NspList *ret;
  *copy = TRUE; 
  ret = ((NspList*) ((NspClassA *) self)->cla_lval);
  return (NspObject *) ret;
}

/* in this function we can check that val is correct before 
 * setting the field with val. return FAIL if val is incorrect.
 */

static int _wrap_classa_set_obj_cla_lval(void *self,NspObject *val)
{
  if (((NspClassA *) self)->cla_lval != NULL ) 
    nsp_list_destroy(((NspClassA *) self)->cla_lval);
  ((NspClassA *) self)->cla_lval = (NspList *) val;
  return OK;
}


