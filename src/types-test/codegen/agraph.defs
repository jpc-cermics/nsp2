;; -*- scheme -*-
; object definitions ...

(include "agraph-types.defs")

(define-method nnodes
  (of-object "Agraph")
  (c-name "nsp_agnnodes")
  (return-type "int")
)

(define-method nedges
  (of-object "Agraph")
  (c-name "nsp_agnedges")
  (return-type "int")
)

(define-method parent
  (of-object "Agraph")
  (c-name "nsp_agparent")
  (return-type "NspAgraph*")
  )

(define-method root
  (of-object "Agraph")
  (c-name "nsp_agroot")
  (return-type "NspAgraph*")
)

(define-method nameof 
  (of-object "Agraph")
  (c-name "nsp_agnameof_g")
  (return-type "char*")
)

;; add a set of nodes to a graph 
;; G.add_nodes[stringmat]

(define-method add_nodes
  (of-object "Agraph")
  (c-name "nsp_agaddnodes")
  (return-type "boolean")
  (parameters
   '("NspSMatrix*" "nodes")
  )
)

;; add a set of edges to a graph 
;; G.add_edges[stringmat]

(define-method add_edges
  (of-object "Agraph")
  (c-name "nsp_agaddedges")
  (return-type "boolean")
  (parameters
   '("NspSMatrix*" "nodes")
  )
)

;; G.agset[attr=value,attr=value,....]
;; set attribute value for a graph adding attr 
;; to the list of attributes if it was not present 

(define-method agset
  (of-object "Agraph")
  (c-name "nsp_gv_agset_g")
  (parameters
    '("char*" "attr")
    '("char*" "value")
    )
)

;; returns the value of an attribute 
;; XXXX should be changed to detect non existant attributes 

(define-method agget
  (of-object "Agraph")
  (c-name "nsp_gv_agget")
  (parameters
    '("char*" "attr")
    )
  (return-type "char*")
)

;; add a layout. 

(define-method layout 
  (of-object "Agraph")
  (c-name "nsp_gv_layout")
  ;;(return-type "boolean")
  (parameters
   '("string" "type")
  )
)

;; render the graph 

(define-method render 
  (of-object "Agraph")
  (c-name "nsp_gv_render")
  ;; (return-type "boolean")
  (parameters
   '("string" "type")
   '("string" "fname")
  )
)

;; set graph attributes 

(define-method graphattr 
  (of-object "Agraph")
  (c-name "nsp_gv_gattr")
  ;; (return-type "boolean")
  (parameters
   '("string" "attr")
   '("string" "value")
  )
)

;; get all the attribute names of a graph 

(define-method graphattrs
  (of-object "Agraph")
  (c-name "nsp_gv_graphattrs")
  (return-type "NspSMatrix*")
)

;; set node attributes 

(define-method nodeattr 
  (of-object "Agraph")
  (c-name "nsp_gv_nattr")
  ;; (return-type "boolean")
  (parameters
   '("string" "attr")
   '("string" "value")
  )
)

;; get all the attribute names 

(define-method nodeattrs
  (of-object "Agraph")
  (c-name "nsp_gv_nodeattrs")
  (return-type "NspSMatrix*")
)

;; set edges attributes 

(define-method edgeattr 
  (of-object "Agraph")
  (c-name "nsp_gv_eattr")
  :: (return-type "boolean")
  (parameters
   '("string" "attr")
   '("string" "value")
  )
)

;; get all the attribute names 

(define-method edgeattrs
  (of-object "Agraph")
  (c-name "nsp_gv_edgeattrs")
  (return-type "NspSMatrix*")
)

;; read graph from file 

(define-function agread
  (c-name "nsp_agread")
  (return-type "NspAgraph*")
  (parameters
   '("char*" "filename")
  )
)

;; write graph to file 
;; this is a methode for graphs.

(define-method write
  (of-object "Agraph")
  (c-name "nsp_gv_write")
  (return-type "int")
  (parameters
     '("char*" "chan")
  )
)

;; 

(define-method  isundirected
  (of-object "Agraph")
  (c-name "nsp_gv_isundirected")
  (return-type "boolean")
  (parameters
    '("NspAgraph*" "g")
  )
)

;; 

(define-method isdirected
  (of-object "Agraph")
  (c-name "nsp_gv_isdirected")
  (return-type "boolean")
  (parameters
    '("NspAgraph*" "g")
  )
)

;;

(define-method isstrict
  (of-object "Agraph")
  (c-name "nsp_gv_isstrict")
  (return-type "boolean")
  (parameters
   '("NspAgraph*" "g")
   )
  )

;; first node 

(define-method fstnode
  (of-object "Agraph")
  (c-name "nsp_agfstnode")
  (return-type "NspAgnode*")
)

;; next node 

(define-method nxtnode
  (of-object "Agraph")
  (c-name "nsp_agnxtnode")
  (return-type "NspAgnode*")
  (parameters
    '("NspAgnode*" "n")
    )
)

;; last node 

(define-method lstnode
  (of-object "Agraph")
  (c-name "nsp_aglstnode")
  (return-type "NspAgnode*")
)

;; prev node 

(define-method prvnode
  (of-object "Agraph")
  (c-name "nsp_agprvnode")
  (return-type "NspAgnode*")
  (parameters
    '("NspAgnode*" "n")
    )
)

;; find a node from its name 

(define-method findnode
  (of-object "Agraph")
  (c-name "nsp_agfindnode_by_name")
  (return-type "NspAgnode*")
  (parameters
   '("char*" "name")
   )
  )

;; 

(define-method fstedge
  (of-object "Agraph")
  (c-name "nsp_gv_agfstedge")
  (return-type "NspAgedge*")
  (parameters
   '("NspAgnode*" "n")
  )
)

;;

(define-method nxtedge
  (of-object "Agraph")
  (c-name "nsp_gv_agnxtedge")
  (return-type "NspAgedge*")
  (parameters
    '("NspAgedge*" "e")
    '("NspAgnode*" "n")
  )
)

;;

(define-method fstin
  (of-object "Agraph")
  (c-name "nsp_gv_agfstin")
  (return-type "NspAgedge*")
  (parameters
    '("NspAgnode*" "n")
  )
)

;;

(define-method nxtin
  (of-object "Agraph")
  (c-name "nsp_gv_agnxtin")
  (return-type "NspAgedge*")
  (parameters
    '("NspAgedge*" "e")
  )
)

;;

(define-method fstout
  (of-object "Agraph")
  (c-name "nsp_gv_agfstout")
  (return-type "NspAgedge*")
  (parameters
    '("NspAgnode*" "n")
  )
)

;;

(define-method nxtout
  (of-object "Agraph")
  (c-name "nsp_gv_agnxtout")
  (return-type "NspAgedge*")
  (parameters
    '("NspAgedge*" "e")
  )
)

;; find or define a subgraph 

(define-method subg
  (of-object "Agraph")
  (c-name "nsp_agsubg")
  (return-type "NspAgraph*")
  (parameters
   '("char*" "name")
   )
)

;; first subgraph of a graph 

(define-method fstsubg
  (of-object "Agraph")
  (c-name "nsp_agfstsubg")
  (return-type "NspAgraph*")
)

;; iterator on subgraph 

(define-method nxtsubg
  (of-object "Agraph")
  (c-name "nsp_agnxtsubg")
  (return-type "NspAgraph*")
)


(define-method delsubg
  (of-object "Agraph")
  (c-name "nsp_agdelsubg")
  (parameters
    '("NspAgraph*" "sub")
    )
  )

;;------------
;; Node Object 
;; -----------

(define-method nameof 
  (of-object "Agnode")
  (c-name "nsp_agnameof_n")
  (return-type "char*")
)

(define-method agraphof
  (of-object "Agnode")
  (c-name "nsp_agraphof")
  (return-type "NspAgraph*")
)

(define-method agget
  (of-object "Agnode")
  (c-name "nsp_gv_agget")
  (parameters
    '("char*" "attr")
    )
  (return-type "char*")
)

(define-method agset
  (of-object "Agnode")
  (c-name "nsp_gv_agset_n")
  (parameters
    '("char*" "attr")
    '("char*" "value")
    )
)

;;------------
;; Edges 
;; -----------

(define-method nameof 
  (of-object "Agedge")
  (c-name "nsp_agnameof_e")
  (return-type "char*")
)

(define-method head 
  (of-object "Agedge")
  (c-name "nsp_aghead")
  (return-type "NspAgnode*")
)

(define-method tail 
  (of-object "Agedge")
  (c-name "nsp_agtail")
  (return-type "NspAgnode*")
)


(define-method agget
  (of-object "Agedge")
  (c-name "nsp_gv_agget")
  (parameters
    '("char*" "attr")
    )
  (return-type "char*")
)

(define-method agset
  (of-object "Agedge")
  (c-name "nsp_gv_agset_e")
  (parameters
    '("char*" "attr")
    '("char*" "value")
    )
)

;;------------------------
;; usefull ? 
;;------------------------

;;	 { (char *)"agdegree", _wrap_agdegree, METH_VARARGS, NULL},

(define-function agdegree
  (c-name "nsp_agdegree")
  (return-type "int")
  (parameters
    '("NspAgnode*" "n")
    '("int" "in")
    '("int" "out")
  )
)

;;	 { (char *)"agdelnode", _wrap_agdelnode, METH_VARARGS, NULL},

(define-function agdelnode
  (c-name "nsp_agdelnode")
  (return-type "int")
  (parameters
    '("NspAgnode*" "arg_n")
  )
)

;;	 { (char *)"agdeledge", _wrap_agdeledge, METH_VARARGS, NULL},

(define-function agdeledge
  (c-name "nsp_agdeledge")
  (return-type "int")
  (parameters
    '("NspAgedge*" "arg_e")
  )
)

(define-function agsubedge
  (c-name "nsp_agsubedge")
  (return-type "NspAgedge*")
  (parameters
    '("NspAgraph*" "g")
    '("NspAgedge*" "e")
    '("int" "createflag")
  )
)

;; (define-function agattrsym
;;   (c-name "nsp_agattrsym")
;;   (return-type "NspAgsym*")
;;   (parameters
;;     '("void*" "obj")
;;     '("char*" "name")
;;   )
;; )


(define-function agnxtattr
  (c-name "nsp_agnxtattr")
  (return-type "NspAgsym*")
  (parameters
    '("NspAgraph*" "g")
    '("int" "kind")
    '("NspAgsym*" "attr")
  )
)

;; { (char *)"agget", _wrap_agget, METH_VARARGS, NULL},

;; (define-function agget
;;   (c-name "nsp_agget")
;;   (return-type "char*")
;;   (parameters
;;     '("void*" "obj")
;;     '("char*" "name")
;;   )
;; )
;;	 { (char *)"agxget", _wrap_agxget, METH_VARARGS, NULL},

;; (define-function agxget
;;   (c-name "nsp_agxget")
;;   (return-type "char*")
;;   (parameters
;;     '("void*" "obj")
;;     '("NspAgsym*" "sym")
;;   )
;; )

;; { (char *)"agset", _wrap_agset, METH_VARARGS, NULL},

;; (define-function agset
;;   (c-name "nsp_agset")
;;   (return-type "int")
;;   (parameters
;;     '("void*" "obj")
;;     '("char*" "name")
;;     '("char*" "value")
;;   )
;; )
;;	 { (char *)"agxset", _wrap_agxset, METH_VARARGS, NULL},

;; (define-function agxset
;;   (c-name "nsp_agxset")
;;   (return-type "int")
;;   (parameters
;;     '("void*" "obj")
;;     '("NspAgsym*" "sym")
;;     '("char*" "value")
;;   )
;; )

;;X	 { (char *)"agsafeset", _wrap_agsafeset, METH_VARARGS, NULL},
;;X	 { (char *)"agattrname", _wrap_agattrname, METH_VARARGS, NULL},
;;X	 { (char *)"agattrdefval", _wrap_agattrdefval, METH_VARARGS, NULL},
;;X	 { (char *)"agsafeset_label", _wrap_agsafeset_label, METH_VARARGS, NULL}
;;X	 { (char *)"agattr_label", _wrap_agattr_label, METH_VARARGS, NULL},

