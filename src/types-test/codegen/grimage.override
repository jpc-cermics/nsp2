/* -*- Mode: C -*- */
%%
include-start GrImage
/* inserted at the start of include file */
#include <nsp/figure.h>


%%
include-public GrImage

/* inserted at the end of public part of include file */

%%
include-private GrImage

/* inserted in the private part of include file */
static void nsp_draw_grimage(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_grimage(NspGraphic *o,const double *tr);
static void nsp_rotate_grimage(NspGraphic *o,double *R);
static void nsp_scale_grimage(NspGraphic *o,double *alpha);
static int nsp_getbounds_grimage(NspGraphic *o,double *bounds);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 

%%
init 

Init portion 

%%
override-type GrImage
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grimage;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grimage ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grimage  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grimage  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grimage  ;
  /* next method are defined in NspGraphic and need not be changed here for GrImage */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type


%%
override nsp_extractelts_grimage kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grimage(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grimage kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grimage(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_grimage(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  double val[4];
  int ccolor=-1,cthick=-1;
  NspGrImage *P = (NspGrImage *) Obj;
  
  if ( Obj->obj->show == FALSE ) return ;

  /* check if the block is inside drawing rectangle
   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  ccolor = Xgc->graphic_engine->xget_color(Xgc); 
  val[0]= P->obj->x;
  val[1]= P->obj->y;
  val[2]= P->obj->w;
  val[3]= P->obj->h;
  
  if ( P->obj->border == TRUE &&  P->obj->color != -2 ) 
    {
      /* draw the rectangle */ 
      if ( P->obj->color != -1 ) 
	Xgc->graphic_engine->xset_color(Xgc,P->obj->color);
      if ( P->obj->thickness != -1 ) 
	{
	  cthick = Xgc->graphic_engine->xget_thickness(Xgc); 
	  Xgc->graphic_engine->xset_thickness(Xgc,P->obj->thickness);
	}
      Xgc->graphic_engine->scale->drawrectangle(Xgc,val);
      /* reset to default values */
      if ( P->obj->color != -1 ) 
	Xgc->graphic_engine->xset_color(Xgc,ccolor);
      if ( P->obj->thickness != -1 ) 
	Xgc->graphic_engine->xset_thickness(Xgc,cthick);
    }

  /* now we draw the image */
  if ( P->obj->image == NULL ) 
    {
      GError *error = NULL;
      GdkPixbuf *ret;
      ret = gdk_pixbuf_new_from_file(P->obj->fname,&error);
      if ( error != NULL ) {
	Sciprintf("gdk_pixbuf_new_from_file: gtk error\n");
	return;
      }
      P->obj->image = ret;
    }
  if ( P->obj->image != NULL )
    {
      int idest_x,idest_y,iw,ih;
      length_scale_f2i(Xgc->scales,&P->obj->w,&P->obj->h,&iw,&ih,1);
      scale_f2i(Xgc->scales,&P->obj->x,&P->obj->y,&idest_x,&idest_y,1);
      length_scale_f2i(Xgc->scales,&P->obj->w,&P->obj->h,&iw,&ih,1);
      Xgc->graphic_engine->draw_pixbuf(Xgc,P->obj->image,0,0,idest_x,idest_y, iw, ih);
    }
}


static void nsp_translate_grimage(NspGraphic *Obj,const double *tr)
{
  NspGrImage *P = (NspGrImage *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_grimage(NspGraphic *Obj,double *R)
{
  NspGrImage *P = (NspGrImage *) Obj;
  double x1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  x1 = R[0]*(P->obj->x) -R[1]*(P->obj->y);
  P->obj->y = R[1]*(P->obj->x) +R[0]*(P->obj->y);
  P->obj->x = x1;
  /* Il faut aussi changer l'angle */
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_grimage(NspGraphic *Obj,double *alpha)
{
  NspGrImage *P = (NspGrImage *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of grimage 
 *
 */

static int nsp_getbounds_grimage(NspGraphic *Obj,double *bounds)
{
  NspGrImage *P = (NspGrImage *) Obj;
  bounds[0]=P->obj->x;/* xmin */
  bounds[1]=P->obj->y-P->obj->h;/* ymin */
  bounds[2]=P->obj->x+P->obj->w;/* xmax */
  bounds[3]=P->obj->y;/* ymax */
  return TRUE;
}

