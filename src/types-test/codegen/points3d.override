/* -*- Mode: C -*- */
%%
include-start  Points3d
/* inserted at the start of include file */
#include <nsp/figure.h>

%%
include-public  Points3d

#include "../graphics-new/Plo3dObj.h"
/* inserted at the end of public part of include file */
extern void nsp_gr_bounds_min_max(int n,double *A,int incr,double *Amin, double *Amax) ;
extern BCG *nsp_check_graphic_context(void);
extern void apply_transforms(BCG *Xgc,double Coord[],const double *M, VisionPos pos[],const double lim[], int ncoord);
extern int nsp_points3d_add_pts(NspGraphic *P,int k);

%%
include-private  Points3d
static void nsp_draw_points3d(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_points3d(NspGraphic *o,const double *tr);
static void nsp_rotate_points3d(NspGraphic *o,double *R);
static void nsp_scale_points3d(NspGraphic *o,double *alpha);
static int nsp_getbounds_points3d(NspGraphic *o,double *bounds);

static void nsp_points3d_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim);
static int nsp_points3d_n_faces(BCG *Xgc,NspGraphic *Obj);
static int nsp_check_points3d(NspPoints3d *P);

#ifdef WITH_OPENGL
static void draw_points3d_ogl(BCG *Xgc,void *Ob);
#endif
static void draw_points3d_face(BCG *Xgc,NspGraphic *Ob, int j);

/* inserted in the private part of include file */

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h>
#include <nsp/figure.h>
#include <nsp/polyhedron.h>
#include <nsp/spolyhedron.h>
#include <nsp/grcommon.h>

#ifdef  WITH_OPENGL
extern Gengine GL_gengine;
#endif


%%
init

Init portion

%%
override-type Points3d
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_points3d;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_points3d ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_points3d  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_points3d  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_points3d  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Points3d */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */
  ((NspTypeGraphic *) type->surtype)->zmean = nsp_points3d_zmean;
  ((NspTypeGraphic *) type->surtype)->n_faces = nsp_points3d_n_faces;

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-int-create-final  Points3d
  /* verbatim in create/load/copy interface  */
  if ( nsp_check_points3d(H)== FAIL) return %(ret)s;

%%
override-destroy-prelim Points3d
  /* verbatim in destroy */
  nsp_matrix_destroy(H->obj->Mcoord_l);


%%
override nsp_extractelts_points3d kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_points3d(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_points3d kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_points3d(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_points3d(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  int face;
  if ( Obj->obj->show == FALSE ) return ;

  /*
  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }
  */

  if ( data != NULL &&  *((int *) data) < 0 )
    {
      nsp_check_points3d((NspPoints3d *) Obj);
      return;
    }

#ifdef  WITH_OPENGL
  if ( Xgc->graphic_engine == &GL_gengine )
    {
      /* if we are using OpenGl we make a full draw of
       * object and return
       */
      draw_points3d_ogl(Xgc,Obj);
      nsp_ogl_set_2dview(Xgc);
      return;
    }
#endif
  if ( data != NULL)
    {
      face = *((int *) data);
      draw_points3d_face(Xgc,Obj,face);
    }
  else
    {
      int i;
      /* draw all the faces: this is not really used
       * since the face order is computed and sequenced in upper object.
       */
      nsp_points3d *L = ((NspPoints3d *) Obj)->obj;
      int npts = (L->max >=0 ) ? L->max : L->Mcoord->m;
      for ( i= 0 ; i < npts-1; i++)
	draw_points3d_face(Xgc,Obj,i);
    }
}

static void nsp_translate_points3d(NspGraphic *Obj,const double *tr)
{
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_points3d(NspGraphic *Obj,double *R)
{
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_points3d(NspGraphic *Obj,double *alpha)
{
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of points3d
 *
 */


static int nsp_getbounds_points3d(NspGraphic *Obj,double *bounds)
{
  int i,max;
  /* this should be stored in a cache and recomputed when necessary
   *
   */
  nsp_points3d *Q= ((NspPoints3d *) Obj)->obj;
  nsp_check_points3d((NspPoints3d *) Obj);
  /* if qmax != -1 we ignore points after Q->max*/
  max = (Q->max >= 0 ) ? Q->max : Q->Mcoord->m;
  if ( max == 0) return FALSE;
  for ( i = 0 ; i < Q->Mcoord->n ; i++)
    nsp_gr_bounds_min_max(max,Q->Mcoord->R+i*Q->Mcoord->m,1,
			  &bounds[2*i],&bounds[2*i+1]);
  return TRUE;
}

int nsp_check_points3d( NspPoints3d *Pt)
{
  nsp_points3d *P = Pt->obj;

  if ( P->Mcoord->n != 3 )
    {
      Scierror("Error: bad coord for points3d, second dimension should be 3\n");
      return FAIL;
    }

  /* create extra data for qpos declared int*
   * Q->pos id only usefull for non opengl driver
   */
  if ( P->pos == NULL) P->pos = malloc(P->Mcoord->m * sizeof(VisionPos));
  P->pos_length =P->Mcoord->m;

  /* create extra data for Mcoord_l declared void* */
  if ( P->Mcoord_l == NULL)
    {
      P->Mcoord_l = nsp_matrix_create("local",'r',P->Mcoord->m, P->Mcoord->n);
    }
  return OK;
}


static void draw_points3d_face(BCG *Xgc,NspGraphic *Ob, int j)
{
  int mark[2],current_mark[2],color=1;
  nsp_points3d *V = ((NspPoints3d *) Ob)->obj;
  double * V_coord = ((NspMatrix *) V->Mcoord_l)->R;
  double x, y;
  x = XScale(Xgc->scales,V_coord[j]);
  y = YScale(Xgc->scales,V_coord[j+V->Mcoord->m]);
  Xgc->graphic_engine->xget_mark(Xgc,current_mark);
  mark[0]= ( V->mark_type < 0 ) ? current_mark[0] : V->mark_type;
  mark[1]= ( V->mark_size < 0 ) ? current_mark[1] : V->mark_size;
  Xgc->graphic_engine->xset_mark(Xgc,mark[0],mark[1]);
  if ( V->color != -1 )
    {
      color = Xgc->graphic_engine->xget_color(Xgc);
      Xgc->graphic_engine->xset_color(Xgc,  V->color );
    }
  Xgc->graphic_engine->drawpolymark(Xgc,&x,&y,1);
  Xgc->graphic_engine->xset_mark(Xgc,current_mark[0],current_mark[1]);
  if ( V->color != -1 )
    {
      Xgc->graphic_engine->xset_color(Xgc,color);
    }
}

#ifdef  WITH_OPENGL
void drawpolymark3D(BCG *Xgc, float *vertex,int n);
#endif

#ifdef  WITH_OPENGL
static void draw_points3d_ogl(BCG *Xgc,void *Ob)
{
  int mark[2],current_mark[2],color=0;
  nsp_points3d *V = ((NspPoints3d *) Ob)->obj;
  int j;
  int npts = (V->max >=0 ) ? V->max : V->Mcoord->m;
  double * V_coord = ((NspMatrix *) V->Mcoord)->R;

  Xgc->graphic_engine->xget_mark(Xgc,current_mark);
  if ( V->color != -1 )
    {
      color = Xgc->graphic_engine->xget_color(Xgc);
      Xgc->graphic_engine->xset_color(Xgc,  V->color );
    }
  mark[0]= ( V->mark_type < 0 ) ? current_mark[0] : V->mark_type;
  mark[1]= ( V->mark_size < 0 ) ? current_mark[1] : V->mark_size;
  Xgc->graphic_engine->xset_mark(Xgc,mark[0],mark[1]);
  for ( j = 0 ; j < npts ; j++)
    {
#if 0
      int x,y;
      double Tp[3];
#endif
      float Vp[3];
      Vp[0] = V_coord[j];
      Vp[1] = V_coord[j+V->Mcoord->m];
      Vp[2] = V_coord[j+2*V->Mcoord->m];
#if 0
      apply_transforms_new1(Xgc,Tp,Vp,V->pos,lim,1);
      Tp[0] = XScale(Xgc->scales,Tp[0]);
      Tp[1] = YScale(Xgc->scales,Tp[1]);
      nsp_ogl_set_2dview(Xgc);
      x = Tp[0];
      y = Tp[1];
      Xgc->graphic_engine->drawpolymark(Xgc,&x,&y,1);
      nsp_ogl_set_3dview(Xgc);
#else
      drawpolymark3D(Xgc,Vp,1);
#endif
    }
  Xgc->graphic_engine->xset_mark(Xgc,current_mark[0],current_mark[1]);
  if ( V->color != -1 )
    {
      Xgc->graphic_engine->xset_color(Xgc,color);
    }
}
#endif

static void zmean_faces_for_Points3d(void *Obj, double z[], HFstruct HF[], int *n, int k)
{
  int j;
  nsp_points3d *V = ((NspPoints3d *) Obj)->obj;
  double *V_coord = ((NspMatrix *) V->Mcoord_l)->R;
  int npts = (V->max >=0 ) ? V->max : V->Mcoord->m;
  for ( j = 0 ; j < npts ; j++)
    if (V->pos[j] == VIN)
      {
	z[*n] = V_coord[j+2*V->Mcoord->m];
	HF[*n].num_obj = k;
	HF[*n].num_in_obj = j;
	(*n)++;
      }
}

/*
 * requested method for 3d objects.
 */

static void nsp_points3d_zmean(BCG *Xgc,NspGraphic *Obj, double *z, void *HF, int *n, int k, double *lim)
{
  nsp_points3d *Q= ((NspPoints3d *) Obj)->obj;
  int npts = (Q->max >=0 ) ? Q->max : Q->Mcoord->m;
  apply_transforms_new(Xgc,((NspMatrix *) Q->Mcoord_l)->R,Q->Mcoord->R,Q->pos, lim, Q->Mcoord->m,npts);
  zmean_faces_for_Points3d(Obj, z,  HF, n, k);
}

/* requested method for 3d objects.
 *
 */

static int nsp_points3d_n_faces(BCG *Xgc,NspGraphic *Obj)
{
  return ((NspPoints3d *) Obj)->obj->Mcoord->m;
}


/* increases the number of points of the polyline
 * Note that its possible to draw a polyline without
 * including all points by locally changing L->Mcoord->m
 */

extern int nsp_points3d_add_pts(NspGraphic *P,int k)
{
  nsp_points3d *L =((NspPoints3d *) P)->obj;
  if ( k <=0) return OK;

  if ( nsp_matrix_add_rows(L->Mcoord,k,0.0) == FAIL )
    {
      Scierror("Failed to allocate points in a polyline3d\n");
      return FAIL;
    }
  if ( nsp_matrix_add_rows(L->Mcoord_l,k,0.0) == FAIL )
    {
      Scierror("Failed to allocate points in a polyline3d\n");
      return FAIL;
    }

  /* create extra data for qpos declared int*
   * Q->pos id only usefull for non opengl driver
   */
  if ( L->pos == NULL)
    L->pos = malloc( L->Mcoord->m * sizeof(VisionPos));
  else
    {
      void *old=L->pos;
      L->pos = malloc(L->Mcoord->m * sizeof(VisionPos));
      if ( L->pos == NULL)
	{
	  Scierror("Failed to allocate points in a polyline3d\n");
	  return FAIL;
	}
      FREE(old);
    }

  return OK;
}
