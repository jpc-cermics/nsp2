/* -*- Mode: C -*- */
%%
include-public  Grstring

/* inserted at the end of public part of include file */

%%
include-private  Grstring

/* inserted in the private part of include file */
static void nsp_draw_grstring(BCG *Xgc,NspGraphic *Obj, void *data);
static void nsp_translate_grstring(NspGraphic *o,const double *tr);
static void nsp_rotate_grstring(NspGraphic *o,double *R);
static void nsp_scale_grstring(NspGraphic *o,double *alpha);
static int nsp_getbounds_grstring(NspGraphic *o,double *bounds);

%%
headers
#include <nsp/figuredata.h> 
#include <nsp/figure.h> 

%%
init 

Init portion 

%%
override-type Grstring
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grstring;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grstring ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grstring  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grstring  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grstring  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Grstring */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override nsp_extractelts_grstring kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grstring(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grstring kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grstring(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_grstring(BCG *Xgc,NspGraphic *Obj, void *data)
{
  int i,flagx=0;
  double rect[4],wc,x,y,yi;
  NspGrstring *P = (NspGrstring *) Obj;
  NspSMatrix *S = P->obj->text;
  if ( ((NspGraphic *) P)->obj->hidden == TRUE ) return;
  /*     to keep the size of the largest line */
  wc = 0.;
  x= P->obj->x;
  y= P->obj->y;
  /* S->n should be equal to 1 here 
   * This is to be done at creation
   */
  if ( S->n == 0 ) return;

  if ( P->obj->position == 10) /* !!*/ 
    {
      double w=P->obj->w, h = P->obj->h;
      nsp_string str;
      if ( S->mn != 1) 
	{
	  if (( str =nsp_smatrix_elts_concat(S,"\n",1," ",1))== NULL) return ;
	}
      else
	{
	  str = S->S[0];
	}
      Xgc->graphic_engine->scale->xstringb(Xgc,str,&P->obj->fill,&x,&y,&w,&h);
      if ( S->mn != 1 ) FREE(str);
    }
  else
    {
      if ( S->m == 1 )
	{
	  /* one rotated string */
	  Xgc->graphic_engine->scale->displaystring(Xgc,S->S[0],x,y,0,P->obj->angle);
	}
      else 
	{
	  for (i = S->m -1 ; i >= 0; --i) 
	    {
	      Xgc->graphic_engine->scale->displaystring(Xgc,S->S[i],x,y,0,P->obj->angle);
	      Xgc->graphic_engine->scale->boundingbox(Xgc,S->S[i],x,y,rect);
	      wc = Max(wc,rect[2]);
	      if (i != 0 ) 
		y += rect[3] * 1.2;
	      else 
		y += rect[3];
	    }
	  if (flagx == 1) {
	    double rect[]={x,y,wc, y - yi};
	    Xgc->graphic_engine->scale->drawrectangle(Xgc,rect);
	  }
	}
    }
}

static void nsp_translate_grstring(NspGraphic *Obj,const double *tr)
{
  NspGrstring *P = (NspGrstring *) Obj;
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_figure_force_redraw(Obj->obj->Fig);

}

static void nsp_rotate_grstring(NspGraphic *Obj,double *R)
{
  NspGrstring *P = (NspGrstring *) Obj;
  double x1;
  x1 = R[0]*(P->obj->x) -R[1]*(P->obj->y);
  P->obj->y = R[1]*(P->obj->x) +R[0]*(P->obj->y);
  P->obj->x = x1;
  /* Il faut aussi changer l'angle */
  nsp_figure_force_redraw(Obj->obj->Fig);
}

static void nsp_scale_grstring(NspGraphic *Obj,double *alpha)
{
  NspGrstring *P = (NspGrstring *) Obj;
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_figure_force_redraw(Obj->obj->Fig);
}

/* compute in bounds the enclosing rectangle of grstring 
 *
 */

static int nsp_getbounds_grstring(NspGraphic *Obj,double *bounds)
{
  return FALSE;
  /* NspGrstring *P = (NspGrstring *) Obj; */
  bounds[0]= bounds[1] = bounds[2]= bounds[3]=0;
  /*   bounds[0]=*x;/\* xmin *\/ */
  /*   bounds[1]=*y;/\* ymin *\/ */
  /*   bounds[2]=*x;/\* xmax *\/ */
  /*   bounds[3]=*y;/\* ymax *\/ */
}

