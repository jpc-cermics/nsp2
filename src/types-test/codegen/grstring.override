/* -*- Mode: C -*- */
%%
include-start Grstring
/* inserted at the start of include file */
#include <nsp/figure.h>

%%
include-public  Grstring

/* inserted at the end of public part of include file */

%%
include-private  Grstring

/* inserted in the private part of include file */
static void nsp_draw_grstring(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_grstring(NspGraphic *o,const double *tr);
static void nsp_rotate_grstring(NspGraphic *o,double *R);
static void nsp_scale_grstring(NspGraphic *o,double *alpha);
static int nsp_getbounds_grstring(NspGraphic *o,double *bounds);

%%
headers
#include <gdk/gdk.h>
#include <nsp/objects.h>
#include <nsp/graphics-new/Graphics.h>
#include <nsp/figuredata.h>
#include <nsp/figure.h>
#include <nsp/axes.h>

%%
init

Init portion

%%
override-type Grstring
  /* inserted verbatim in the type definition */
  type->gtk_methods = TRUE;
  /* here we override the method or its father class i.e Graphic */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grstring;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grstring ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grstring  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grstring  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grstring  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Grstring */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override nsp_extractelts_grstring kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grstring(Stack stack, int rhs, int opt, int lhs)
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grstring kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grstring(Stack stack, int rhs, int opt, int lhs)
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */
static void nsp_draw_grstring_in_box(BCG *Xgc,NspGrstring *P, const char *str);

static void nsp_draw_grstring(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  int current_color=-1;
  int fontid[2],box;
  double xd1, yd1;
  nsp_string str;
  NspGrstring *P = (NspGrstring *) Obj;
  NspSMatrix *S = P->obj->text;
  double x=P->obj->x,y=P->obj->y;

  if ( Obj->obj->show == FALSE ) return ;

  /* check if the block is inside drawing rectangle
   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  /* S->n should be equal to 1 or 0 here
   * This is to be done at creation
   */
  if ( S->n == 0 ) return;
  if ( S->mn != 1)
    {
      if (( str =nsp_smatrix_elts_concat(S,"\n",1," ",1))== NULL) return ;
    }
  else
    {
      str = S->S[0];
    }
  box = 0; /* ( P->obj->box_color != -2 ); *//* we draw a box */

  current_color = Xgc->graphic_engine->xget_color(Xgc);
  if ( P->obj->color >= 0) Xgc->graphic_engine->xset_color(Xgc,P->obj->color);

  switch ( P->obj->fill )
    {
    case GR_fill_box:
      /* draw the string inside a box:
       * the font size is adapted so as to fill the box.
       */
      nsp_draw_grstring_in_box(Xgc,P,str);
      break;
    case GR_in_box :
      /* draw a string centered in a box */
      xd1 = XDouble2Pixel_d(Xgc->scales,x + P->obj->w/2.0);
      yd1 = YDouble2Pixel_d(Xgc->scales,y + P->obj->h/2.0);
      if ( P->obj->size != -1 )
	{
	  Xgc->graphic_engine->xget_font(Xgc,fontid, FALSE);
	  Xgc->graphic_engine->xset_font(Xgc,fontid[0], Max(P->obj->size,1),TRUE);
	}
      Xgc->graphic_engine->displaystring(Xgc,str,xd1,yd1,box,P->obj->angle,
					 GR_STR_XCENTER,GR_STR_YCENTER);
      if ( P->obj->size != -1 )
	Xgc->graphic_engine->xset_font(Xgc,fontid[0],fontid[1],FALSE);
      break;
    case GR_no_box :
      /* display a string */
      xd1 = XDouble2Pixel_d(Xgc->scales,x + P->obj->w/2.0);
      yd1 = YDouble2Pixel_d(Xgc->scales,y + P->obj->h/2.0);
      if ( P->obj->size != -1 )
	{
	  Xgc->graphic_engine->xget_font(Xgc,fontid, FALSE);
	  Xgc->graphic_engine->xset_font(Xgc,fontid[0], Max(P->obj->size,1),TRUE);
	}
      Xgc->graphic_engine->displaystring(Xgc,str,xd1,yd1,box,P->obj->angle,
					 P->obj->posx, P->obj->posy);
      if ( P->obj->size != -1 )
	Xgc->graphic_engine->xset_font(Xgc,fontid[0],fontid[1],FALSE);
      break;
    }

  if ( S->mn != 1 ) FREE(str);
  if ( P->obj->color >= 0) Xgc->graphic_engine->xset_color(Xgc,current_color);
}

static void nsp_draw_grstring_in_box(BCG *Xgc,NspGrstring *P, const char *str)
{
  int box = 0 ; /* ( P->obj->box_color != -2 );*/ /* we draw a box */
  double xd1,yd1;
  int iw,ih,size_in= 1, size_out=100,size=-1, count=0;
  int fontid[2],check= TRUE;
  double logrect[4];
  length_scale_f2i(Xgc->scales,&P->obj->w,&P->obj->h,&iw,&ih,1);
  Xgc->graphic_engine->xget_font(Xgc,fontid, FALSE);
  /* try to detect if current value is OK. */
  size = (P->obj->size == -1) ? fontid[1] : P->obj->size;
  Xgc->graphic_engine->xset_font(Xgc,fontid[0],size,TRUE);
  Xgc->graphic_engine->boundingbox(Xgc,str,0,0,logrect);
  if ( logrect[2] > iw || logrect[3] > ih )
    {
      size_out = size;
    }
  else
    {
      size_in = size;
      /* is size_out enough ?
       * we first try size + 1
       */
      Xgc->graphic_engine->xset_font(Xgc,fontid[0],size+1,TRUE);
      Xgc->graphic_engine->boundingbox(Xgc,str,0,0,logrect);
      if ( logrect[2] > iw || logrect[3] > ih )
	{
	  size_out = size+1;
	  check = FALSE;
	}
      /* loop to increase upper bound */
      while (1)
	{
	  Xgc->graphic_engine->xset_font(Xgc,fontid[0],size_out,TRUE);
	  Xgc->graphic_engine->boundingbox(Xgc,str,0,0,logrect);
	  if ( !( logrect[2] > iw || logrect[3] > ih) )
	    {
	      size_out *= 2;
	    }
	  else
	    break;
	}
    }
  size= (size_in + size_out)/2;
  /* dichotomic search */
  while ( check  )
    {
      /* Sciprintf("Search with [%d,%d] \n",size_in,size_out); */
      Xgc->graphic_engine->xset_font(Xgc,fontid[0],size,TRUE);
      Xgc->graphic_engine->boundingbox(Xgc,str,0,0,logrect);
      count++;
      if ( logrect[2] > iw || logrect[3] > ih )
	{
	  size_out = size;
	}
      else
	{
	  size_in = size;
	}

      size = (size_in + size_out)/2;
      if ( size_out - size_in <= 1 ) break;
    }
  /* Sciprintf("We quit with %d\n",size); */
  P->obj->size = size ;
  Xgc->graphic_engine->xset_font(Xgc,fontid[0],size,TRUE);
  xd1 = XDouble2Pixel_d(Xgc->scales,P->obj->x + P->obj->w/2.0);
  yd1 = YDouble2Pixel_d(Xgc->scales,P->obj->y + P->obj->h/2.0);
  Xgc->graphic_engine->displaystring(Xgc,str,xd1,yd1,box, P->obj->angle,
				     GR_STR_XCENTER,GR_STR_YCENTER);
  Xgc->graphic_engine->xset_font(Xgc,fontid[0],fontid[1], FALSE);
}


static void nsp_translate_grstring(NspGraphic *Obj,const double *tr)
{
  NspGrstring *P = (NspGrstring *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_grstring(NspGraphic *Obj,double *R)
{
  NspGrstring *P = (NspGrstring *) Obj;
  double x1,y1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  /* rotate (x,y) */
  switch ( P->obj->fill )
    {
    case GR_fill_box:
    case GR_in_box:
      /* rotate the center */
      x1 = R[0]*(P->obj->x+ P->obj->w/2) -R[1]*(P->obj->y + P->obj->h/2);
      y1 = R[1]*(P->obj->x+ P->obj->w/2) +R[0]*(P->obj->y + P->obj->h/2);
      P->obj->x = x1 - P->obj->w/2;
      P->obj->y = y1 - P->obj->h/2;
      P->obj->angle += - atan2(R[1],R[0])*180/M_PI;
      break;
    case GR_no_box :
      /* rotate (x,y) */
      x1 = R[0]*(P->obj->x) -R[1]*(P->obj->y);
      P->obj->y = R[1]*(P->obj->x) +R[0]*(P->obj->y);
      P->obj->x = x1;
      /* change the angle */
      P->obj->angle += - atan2(R[1],R[0])*180/M_PI;
      break;
    }
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_grstring(NspGraphic *Obj,double *alpha)
{
  NspGrstring *P = (NspGrstring *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in @bounds the enclosing rectangle of grstring
 * Note that it only works when the grstring is inside a
 * figure.
 */

static int nsp_getbounds_grstring(NspGraphic *Obj,double *bounds)
{
  nsp_string str = NULL;
  NspGrstring *P = (NspGrstring *) Obj;
  NspSMatrix *S = P->obj->text;
  int fontid[2];
  double rect1[4];
  double width, height;
  nsp_axes *axe = Obj->obj->Axe;
  nsp_figure *F = Obj->obj->Fig;
  BCG *Xgc;
  if ( S->mn != 1)
    {
      if (( str =nsp_smatrix_elts_concat(S,"\n",1," ",1))== NULL) goto false;
    }
  else
    {
      str = S->S[0];
    }

  switch ( P->obj->fill )
    {
    case GR_fill_box:
      bounds[0]= P->obj->x ;
      bounds[2]= P->obj->x + P->obj->w;
      bounds[1]= P->obj->y;
      bounds[3]= P->obj->y+  P->obj->h;;
      break;
    case GR_in_box :
      /* here we need a Figure */
      if ( F == NULL || (Xgc = F->Xgc) == NULL) goto false;
      /* centered in a box  */
      if ( P->obj->size != -1 )
	{
	  Xgc->graphic_engine->xget_font(Xgc,fontid, FALSE);
	  Xgc->graphic_engine->xset_font(Xgc,fontid[0], Max(P->obj->size,1),TRUE);
	}
      Xgc->graphic_engine->boundingbox(Xgc,str,0,0,rect1);
      if ( P->obj->size != -1 )
	Xgc->graphic_engine->xset_font(Xgc,fontid[0],fontid[1],FALSE);
      if ( S->mn != 1 ) FREE(str);
      length_scale_pixels_to_double(&axe->scale,&width,&height,rect1+2,rect1+3,1);
      /* Sciprintf("Taille de la boite [%f,%f] fontid=%d\n",width,height,P->obj->size); */
      bounds[0]= P->obj->x + P->obj->w/2 -width/2;
      bounds[2]= P->obj->x + P->obj->w/2 +width/2;
      bounds[1]= P->obj->y + P->obj->h/2 -height/2;
      bounds[3]= P->obj->y + P->obj->h/2 + height/2;
      break;
    case GR_no_box :
      /* no box case */
      if ( F == NULL || (Xgc = F->Xgc) == NULL) goto false;
      if ( P->obj->size != -1 )
	{
	  Xgc->graphic_engine->xget_font(Xgc,fontid, FALSE);
	  Xgc->graphic_engine->xset_font(Xgc,fontid[0], Max(P->obj->size,1),TRUE);
	}
      Xgc->graphic_engine->boundingbox(Xgc,str,0,0,rect1);
      if ( P->obj->size != -1 )
	Xgc->graphic_engine->xset_font(Xgc,fontid[0],fontid[1],FALSE);
      if ( S->mn != 1 ) FREE(str);
      length_scale_pixels_to_double(&axe->scale,&width,&height,rect1+2,rect1+3,1);
      switch( P->obj->posx )
	{
	case GR_STR_XLEFT: bounds[0]= P->obj->x; bounds[2]= P->obj->x+width; break;
	case GR_STR_XCENTER: bounds[0]= P->obj->x -width/2; bounds[2]= P->obj->x+width/2; break;
	case GR_STR_XRIGHT: bounds[0]= P->obj->x - width; bounds[2]= P->obj->x; break;
	}
      switch( P->obj->posy )
	{
	case GR_STR_YBOTTOM:bounds[1]= P->obj->y; bounds[3]= P->obj->y + height; break;
	case GR_STR_YCENTER:bounds[1]= P->obj->y -height/2; bounds[3]= P->obj->y + height/2; break;
	case GR_STR_YBASELINE:
	  /* TO BE IMPROVED we give something bigger */
	  bounds[1]= P->obj->y -height ; bounds[3]= P->obj->y + height; break;
	case GR_STR_YUP:   bounds[1]= P->obj->y-height ; bounds[3]= P->obj->y; break;
	}
      break;
    }

  if (P->obj->angle!=0.)
    {
      /* rotate the bounds */
      double diff[2],  bb[8], center[2]={0,0};
      double cosa = cos(-P->obj->angle*M_PI/180);
      double sina = sin(-P->obj->angle*M_PI/180);

      switch ( P->obj->fill )
	{
	case GR_fill_box:
	case GR_in_box:
	  center[0]=bounds[0]+(bounds[2]-bounds[0])/2;
	  center[1]=bounds[1]+(bounds[3]-bounds[1])/2;
	  break;
	case GR_no_box:
	  switch( P->obj->posx )
	    {
	    case GR_STR_XLEFT: center[0] = bounds[0]; break;
	    case GR_STR_XCENTER: center[0]  = bounds[0] + width/2; break;
	    case GR_STR_XRIGHT: center[0]  = bounds[0] + width; break;
	    }
	  switch( P->obj->posy )
	    {
	    case GR_STR_YBOTTOM: center[1]  =bounds[1] ; break;
	    case GR_STR_YCENTER:  center[1]  = bounds[1] + height/2; break;
	    case GR_STR_YBASELINE: center[1] =bounds[1] ; break; /* wrong */
	    case GR_STR_YUP:  center[1]  = bounds[1] +height; break;
	    }
	  break;
	}
      /* rotate/translate the points */
      diff[0]=bounds[0]-center[0];
      diff[1]=bounds[1]-center[1];
      bb[0]=diff[0]*cosa-diff[1]*sina+center[0];
      bb[1]=diff[0]*sina+diff[1]*cosa+center[1];

      diff[0]=bounds[0]-center[0];
      diff[1]=bounds[3]-center[1];
      bb[2]=diff[0]*cosa-diff[1]*sina+center[0];
      bb[3]=diff[0]*sina+diff[1]*cosa+center[1];

      diff[0]=bounds[2]-center[0];
      diff[1]=bounds[3]-center[1];
      bb[4]=diff[0]*cosa-diff[1]*sina+center[0];
      bb[5]=diff[0]*sina+diff[1]*cosa+center[1];

      diff[0]=bounds[2]-center[0];
      diff[1]=bounds[1]-center[1];
      bb[6]=diff[0]*cosa-diff[1]*sina+center[0];
      bb[7]=diff[0]*sina+diff[1]*cosa+center[1];

      /* compute bounds */
      bounds[0]=Min(bb[0],bb[2]);
      bounds[0]=Min(bounds[0],bb[4]);
      bounds[0]=Min(bounds[0],bb[6]);

      bounds[2]=Max(bb[0],bb[2]);
      bounds[2]=Max(bounds[2],bb[4]);
      bounds[2]=Max(bounds[2],bb[6]);

      bounds[1]=Min(bb[1],bb[3]);
      bounds[1]=Min(bounds[1],bb[5]);
      bounds[1]=Min(bounds[1],bb[7]);

      bounds[3]=Max(bb[1],bb[3]);
      bounds[3]=Max(bounds[3],bb[5]);
      bounds[3]=Max(bounds[3],bb[7]);
    }

  if ( FALSE && F != NULL && (Xgc = F->Xgc) != NULL)
    {
      /* draw the bounds, if requested  */
      double xm[4],ym[4];
      double x[4],y[4];
      x[0]=bounds[0];
      y[0]=bounds[1];
      x[1]=bounds[2];
      y[1]=bounds[1];
      x[2]=bounds[2];
      y[2]=bounds[3];
      x[3]=bounds[0];
      y[3]=bounds[3];
      scale_double_to_pixels(Xgc->scales,x,y,xm,ym,4);
      Xgc->graphic_engine->drawpolyline(Xgc,xm,ym,4,TRUE);
    }
  
  if ( S->mn != 1) nsp_string_destroy(&str) ;
  return TRUE;
  false:
    if ( S->mn != 1) nsp_string_destroy(&str) ;
  return FALSE;
}
