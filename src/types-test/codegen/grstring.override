/* -*- Mode: C -*- */
%%
include-public  Grstring

/* inserted at the end of public part of include file */

%%
include-private  Grstring

/* inserted in the private part of include file */
static void nsp_draw_grstring(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data);
static void nsp_translate_grstring(NspGraphic *o,const double *tr);
static void nsp_rotate_grstring(NspGraphic *o,double *R);
static void nsp_scale_grstring(NspGraphic *o,double *alpha);
static int nsp_getbounds_grstring(NspGraphic *o,double *bounds);

%%
headers
#include <gdk/gdk.h>
#include <nsp/figuredata.h> 
#include <nsp/figure.h>
#include <nsp/axes.h>

%%
init 

Init portion 

%%
override-type Grstring
  /* inserted verbatim in the type definition 
   * here we override the method og its father class i.e Graphic
   */
  ((NspTypeGraphic *) type->surtype)->draw = nsp_draw_grstring;
  ((NspTypeGraphic *) type->surtype)->translate =nsp_translate_grstring ;
  ((NspTypeGraphic *) type->surtype)->rotate =nsp_rotate_grstring  ;
  ((NspTypeGraphic *) type->surtype)->scale =nsp_scale_grstring  ;
  ((NspTypeGraphic *) type->surtype)->bounds =nsp_getbounds_grstring  ;
  /* next method are defined in NspGraphic and need not be chnaged here for Grstring */
  /* ((NspTypeGraphic *) type->surtype)->link_figure = nsp_graphic_link_figure; */ 
  /* ((NspTypeGraphic *) type->surtype)->unlink_figure = nsp_graphic_unlink_figure; */ 

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override nsp_extractelts_grstring kwargs

extern function int_nspgraphic_extract;

int _wrap_nsp_extractelts_grstring(Stack stack, int rhs, int opt, int lhs) 
{
  return int_nspgraphic_extract(stack,rhs,opt,lhs);
}

%%
override nsp_setrowscols_grstring kwargs

extern function int_graphic_set_attribute;

int _wrap_nsp_setrowscols_grstring(Stack stack, int rhs, int opt, int lhs) 
{
  return int_graphic_set_attribute(stack,rhs,opt,lhs);
}


%%
last

/* inserted verbatim at the end */

static void nsp_draw_grstring(BCG *Xgc,NspGraphic *Obj, const GdkRectangle *rect,void *data)
{
  double wc,x,y;
  NspGrstring *P = (NspGrstring *) Obj;
  NspSMatrix *S = P->obj->text;

  if ( Obj->obj->show == FALSE ) return ;

  /* check if the block is inside drawing rectangle
   */

  if ( ! nsp_graphic_intersect_rectangle(Obj, rect))
    {
      return ;
    }

  /*     to keep the size of the largest line */
  wc = 0.;
  x= P->obj->x;
  y= P->obj->y;
  /* S->n should be equal to 1 or 0 here 
   * This is to be done at creation
   */
  if ( S->n == 0 ) return;
  
  if ( P->obj->w  != 0.0 ) /* !!*/ 
    {
      /* using xstringb with fill.
       *
       */
      double w=P->obj->w, h = P->obj->h;
      nsp_string str;
      if ( S->mn != 1) 
	{
	  if (( str =nsp_smatrix_elts_concat(S,"\n",1," ",1))== NULL) return ;
	}
      else
	{
	  str = S->S[0]; 
	}
      Xgc->graphic_engine->scale->xstringb(Xgc,str,&P->obj->fill,&x,&y,&w,&h);
      if ( S->mn != 1 ) FREE(str);
    }
  else
    {
      double xd1 = XDouble2Pixel_d(Xgc->scales,x);
      double yd1 = YDouble2Pixel_d(Xgc->scales,y);
      nsp_string str;
      if ( S->mn != 1) 
	{
	  if (( str =nsp_smatrix_elts_concat(S,"\n",1," ",1))== NULL) return ;
	}
      else
	{
	  str = S->S[0]; 
	}
      Xgc->graphic_engine->displaystring(Xgc,str,xd1,yd1,0,P->obj->angle,
					 P->obj->posx, P->obj->posy);
      if ( S->mn != 1 ) FREE(str);
    }
}


static void nsp_translate_grstring(NspGraphic *Obj,const double *tr)
{
  NspGrstring *P = (NspGrstring *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x += tr[0];
  P->obj->y += tr[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_rotate_grstring(NspGraphic *Obj,double *R)
{
  NspGrstring *P = (NspGrstring *) Obj;
  double x1;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  x1 = R[0]*(P->obj->x) -R[1]*(P->obj->y);
  P->obj->y = R[1]*(P->obj->x) +R[0]*(P->obj->y);
  P->obj->x = x1;
  /* Il faut aussi changer l'angle */
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

static void nsp_scale_grstring(NspGraphic *Obj,double *alpha)
{
  NspGrstring *P = (NspGrstring *) Obj;
  nsp_graphic_invalidate((NspGraphic *) Obj);
  P->obj->x *= alpha[0];
  P->obj->y *= alpha[1];
  nsp_graphic_invalidate((NspGraphic *) Obj);
}

/* compute in bounds the enclosing rectangle of grstring 
 *
 */

static int nsp_getbounds_grstring(NspGraphic *Obj,double *bounds)
{
  nsp_string str;
  NspGrstring *P = (NspGrstring *) Obj;
  int rect1[4];
  double width, height;
  nsp_axes *axe = Obj->obj->Axe;
  nsp_figure *F = Obj->obj->Fig;
  BCG *Xgc = F->Xgc;
  NspSMatrix *S = P->obj->text;

  if ( Xgc == NULL) return FALSE;

  if ( S->mn != 1) 
    {
      if (( str =nsp_smatrix_elts_concat(S,"\n",1," ",1))== NULL) return FALSE;
    }
  else
    {
      str = S->S[0]; 
    }
  Xgc->graphic_engine->boundingbox(Xgc,str,0,0,rect1);
  if ( S->mn != 1 ) FREE(str);
  length_scale_i2f(&axe->scale,&width,&height,rect1+2,rect1+3,1);
  switch( P->obj->posx ) 
    {
    case GR_STR_XLEFT: bounds[0]= P->obj->x; bounds[2]= P->obj->x+width; break;
    case GR_STR_XCENTER: bounds[0]= P->obj->x -width/2; bounds[2]= P->obj->x+width/2; break;
    case GR_STR_XRIGHT: bounds[0]= P->obj->x - width; bounds[2]= P->obj->x; break;
    }
  switch( P->obj->posy ) 
    {
    case GR_STR_YBOTTOM:bounds[1]= P->obj->y; bounds[3]= P->obj->y + height; break;
    case GR_STR_YCENTER:bounds[1]= P->obj->y -height/2; bounds[3]= P->obj->y + height/2; break;
    case GR_STR_YBASELINE: 
      /* TO BE IMPROVED we give something bigger */
      bounds[1]= P->obj->y -height ; bounds[3]= P->obj->y + height; break;
    case GR_STR_YUP:   bounds[1]= P->obj->y-height ; bounds[3]= P->obj->y; break;
    }
  return TRUE;
}

