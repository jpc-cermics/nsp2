/* -*- Mode: C -*- */
%%
include-start Stochdec

%%
include-public Stochdec
/* inserted at the end of public part of include file
 */
#include <nsp/valuefn.h>
#include <nsp/gridvaluefn.h>
#include <nsp/cutsvaluefn.h>

extern int nsp_gvf_check_nx(NspMatrix *nx);
extern NspMatrix *nsp_gvf_create_steps(NspMatrix *nx,NspMatrix *xmin,NspMatrix *xmax);
extern NspMatrix *nsp_gvf_create_values(NspMatrix *nx);
extern int nsp_gvf_ind_to_point(NspGridValueFn *Gvf,double pt[], int i);
extern int nsp_gvf_point_to_ind(NspGridValueFn *Gvf,const double pt[]) ;
extern double nsp_gvf_get_i_value(NspGridValueFn *Gvf, int i);
extern void nsp_gvf_set_i_value(NspGridValueFn *Gvf, int i,const double val);
extern double nsp_gvf_get_pt_value(NspGridValueFn *Gvf,const double pt[]) ;
extern void nsp_gvf_set_pt_value(NspGridValueFn *Gvf,const double pt[],const double val) ;
extern NspMatrix *nsp_gvf_get_nx(NspGridValueFn *Gvf);
extern NspMatrix *nsp_gvf_get_imax(NspGridValueFn *Gvf);
extern NspGridValueFn *nsp_gvf_create(const char *name, NspMatrix *nx,NspMatrix *xmin,NspMatrix *xmax, int use_values);


extern int nsp_cvf_add_slopes(NspCutsValueFn *Cvf,NspMatrix *height,NspMatrix *slopes);
extern double nsp_cvf_get_value(NspCutsValueFn *Cvf,const double pt[]) ;
extern int nsp_cvf_add_slope(NspCutsValueFn *Cvf,double height,double slope[]);
extern int nsp_ind_to_point(NspMatrix *pt, int i, NspMatrix *min,NspMatrix *nx, NspMatrix *step, int t);
extern NspMatrix *nsp_cvf_get_slopes(NspCutsValueFn *self);
extern NspMatrix *nsp_cvf_get_heights(NspCutsValueFn *self);

%%
include-private Stochdec
/* inserted in the private part of include file
 * of ldfaure.h
 */

%%
headers
/* headers */

%%
init 
/ * init code  * /

%%
modulename atk
/* %%  import gobject.GObject as GObject */

%%
ignore-glob
  *_get_type

%%
override-intcreate XStochdec

/* override the default int_create */

%%
override-destroy-prelim  Stochdec
   /* verbatim in destroy */

%%
override nsp_gridfn

int _wrap_nsp_gridfn(Stack stack, int rhs, int opt, int lhs) 
{
  int use_values = TRUE;
  NspMatrix *xmin, *xmax,*nx;
  NspGridValueFn *H;
  int_types T[] = {realmat,realmat,realmat,new_opts, t_end};

  nsp_option opts[] ={{ "values",s_bool,NULLOBJ,-1},
		      { NULL,t_end,NULLOBJ,-1}};
  
  if ( GetArgs(stack,rhs,opt,T,&nx, &xmin, &xmax,&opts, &use_values) == FAIL) return RET_BUG;
  CheckDimProp(NspFname(stack),1,3, nx->mn != xmin->mn);
  CheckDimProp(NspFname(stack),2,3, xmin->mn != xmax->mn);
  if ((H=nsp_gvf_create(NVOID,nx,xmin,xmax, use_values)) == NULL)
    return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
}

%%
override GridValueFn.nsp_gvf_ind_to_point

/* method overriden  
 * take care that indices are starting at 0 and we want 1 at nsp level
 */

static int _wrap_nsp_gvf_ind_to_point(NspGridValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspMatrix *Ind, *ret;
  NspValueFn *Vf = (NspValueFn *) self;
  int_types T[] = {mat,t_end};
  if ( GetArgs(stack,rhs,opt,T,&Ind) == FAIL) return RET_BUG;
  if ((ret = nsp_matrix_create(NVOID,'r', Vf->xdim,Ind->mn)) == NULLMAT) return RET_BUG;
  for (i=0; i < Ind->mn; i++)
    {      
      if ( nsp_gvf_ind_to_point(self,ret->R+ ret->m*i, -1 + (int) Ind->R[i]) == FAIL)  return RET_BUG;
    }
  MoveObj(stack,1,NSP_OBJECT(ret));
  return 1;
}

%%
override GridValueFn.nsp_gvf_point_to_ind

/* method overriden  
 * take care that indices are starting at 0 
 */

static int _wrap_nsp_gvf_point_to_ind(NspGridValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  NspValueFn *Vf = (NspValueFn *) self;
  int_types T[] = {realmat,t_end};
  NspMatrix *pts,*Ret;
  int i;
  if ( GetArgs(stack,rhs,opt,T,&pts) == FAIL) return RET_BUG;
  if ( pts->m != Vf->xdim) 
    {
      Scierror("Error: first argument should be a %dxn matrix\n",Vf->xdim);
      return RET_BUG;
    }
  if ((Ret = nsp_matrix_create(NVOID,'r', 1 , pts->n)) == NULLMAT) return RET_BUG;
  for ( i = 0 ; i < pts->n ; i++)
    {
      Ret->R[i] = 1+ nsp_gvf_point_to_ind(self, pts->R+ i*pts->m);
    }
  MoveObj(stack,1, NSP_OBJECT(Ret));
  return 1;
}

%%
override GridValueFn.nsp_gvf_set_pt_value

/* method overriden  
 * take care that indices are starting at 0 
 */
static int _wrap_nsp_gvf_set_pt_value(NspGridValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspValueFn *Vf = (NspValueFn *) self;
  int_types T[] = {realmat, realmat,t_end};
  NspMatrix *pts, *val;
  if ( GetArgs(stack,rhs,opt,T,&pts, &val) == FAIL) return RET_BUG;
  if ( pts->m != Vf->xdim) 
    {
      Scierror("Error: first argument should be a %dxn matrix\n",Vf->xdim);
      return RET_BUG;
    }
  if ( pts->n != val->mn) 
    {
      Scierror("Error: the number of columns of first argument (%d) is not equal to the size of second argument (%d)\n",pts->n,val->mn);
      return RET_BUG;
    }
  /* pt << 1 */
  for ( i= 0 ; i < pts->n ; i++ )
    nsp_gvf_set_pt_value(self, pts->R + i*pts->m, val->R[i]);
  return 0;
}

%%
override GridValueFn.nsp_gvf_set_i_value

static int _wrap_nsp_gvf_set_i_value(NspGridValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspMatrix *ind, * val;
  int_types T[] = { realmat, realmat,t_end};
  if ( GetArgs(stack,rhs,opt,T,&ind, &val) == FAIL) return RET_BUG;
  CheckDimProp(NspFname(stack),1,2, ind->mn != val->mn);
  for ( i = 0 ; i < ind->mn; i++)
    nsp_gvf_set_i_value(self, ((int) ind->R[i]) - 1, val->R[i]);
  return 0;
}
%%
override GridValueFn.nsp_gvf_get_pt_value

static int _wrap_nsp_gvf_get_pt_value(NspGridValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  NspValueFn *Vf = (NspValueFn *) self;
  int_types T[] = {realmat,t_end};
  NspMatrix *pts, *ret;
  if ( GetArgs(stack,rhs,opt,T,&pts) == FAIL) return RET_BUG;
  if ( pts->m != Vf->xdim) 
    {
      Scierror("Error: first argument should be a %dxn matrix\n",Vf->xdim);
      return RET_BUG;
    }
  if ((ret = nsp_matrix_create(NVOID,'r', 1, pts->n)) == NULLMAT) return RET_BUG;
  for ( i = 0 ; i < ret->mn ; i++)
    {
      ret->R[i] = nsp_gvf_get_pt_value(self, pts->R + pts->m*i);
    }
  MoveObj(stack,1, NSP_OBJECT(ret));
  return 1;
}

%%
override GridValueFn.nsp_gvf_get_i_value

static int _wrap_nsp_gvf_get_i_value(NspGridValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  int_types T[] = {realmat,t_end};
  NspMatrix *ind, *ret;
  if ( GetArgs(stack,rhs,opt,T,&ind) == FAIL) return RET_BUG;
  if ((ret = nsp_matrix_create(NVOID,'r', 1, ind->mn)) == NULLMAT) return RET_BUG;
  for ( i = 0 ; i < ret->mn ; i++)
    {
      ret->R[i] = nsp_gvf_get_i_value(self, ((int) ind->R[i]) -1);
    }
  MoveObj(stack,1, NSP_OBJECT(ret));
  return 1;
}
%%
override nsp_cutsfn

int _wrap_nsp_cutsfn(Stack stack, int rhs, int opt, int lhs) 
{
  NspMatrix *heights=NULL, *slopes = NULL;
  NspMatrix *heights_c=NULL, *slopes_c = NULL;
  NspCutsValueFn *H;
  NspValueFn *F;
  int_types T[] = {realmat,realmat,t_end};
  if ( GetArgs(stack,rhs,opt,T,&heights, &slopes) == FAIL) return RET_BUG;
  CheckDimProp(NspFname(stack),1,2, heights->mn != slopes->n);
  if ((slopes_c = (NspMatrix *) nsp_object_copy_and_name("slopes",NSP_OBJECT(slopes))) == NULLMAT) 
    return RET_BUG;
  if ((heights_c = (NspMatrix *) nsp_object_copy_and_name("heights",NSP_OBJECT(heights))) == NULLMAT) 
    return RET_BUG;
  /* want to be sure that type gridvaluefn is initialized */
  nsp_type_cutsvaluefn = new_type_cutsvaluefn(T_BASE);
  H = nsp_cutsvaluefn_create(NVOID, heights_c, slopes_c ,(NspTypeBase *) nsp_type_cutsvaluefn);
  if ( H == NULL) return RET_BUG;
  F= (NspValueFn *)H;
  /* nsp_matrix_destroy(F->xmin);  F->xmin = xmin_c; */
  /* nsp_matrix_destroy(F->xmax);  F->xmax = xmax_c; */
  F->xdim = heights->mn;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
}

%%
override CutsValueFn.nsp_cvf_add_slopes

/* method overriden */

static int _wrap_nsp_cvf_add_slopes(NspCutsValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  NspMatrix *heights,*slopes;
  /* NspValueFn *Vf = (NspValueFn *) self; */
  int_types T[] = {realmat,realmat,t_end};
  CheckLhs(0,0);
  if ( GetArgs(stack,rhs,opt,T,&heights,&slopes) == FAIL) return RET_BUG;
  CheckDimProp(NspFname(stack),1,2, heights->mn != slopes->n);
  if ( slopes->m != self->slopes->m )
    {
      Scierror("Error: given slopes are incompatible with objects expecting %d rows\n",self->slopes->m);
      return RET_BUG;
    }
  if ( nsp_cvf_add_slopes(self,heights, slopes ) == FAIL) 
    return RET_BUG;
  return 0;
}

%%
override CutsValueFn.nsp_cvf_get_value

static int _wrap_nsp_cvf_get_value(NspCutsValueFn *self,Stack stack,int rhs,int opt,int lhs)
{
  int i;
  /* NspValueFn *Vf = (NspValueFn *) self; */
  int_types T[] = {realmat,t_end};
  NspMatrix *pts, *ret;
  if ( GetArgs(stack,rhs,opt,T,&pts) == FAIL) return RET_BUG;
  if ( pts->m != self->slopes->m ) 
    {
      Scierror("Error: first argument should be a %dxn matrix\n",self->slopes->m );
      return RET_BUG;
    }
  if ((ret = nsp_matrix_create(NVOID,'r', 1, pts->n)) == NULLMAT) return RET_BUG;
  for ( i = 0 ; i < ret->mn ; i++)
    {
      ret->R[i] = nsp_cvf_get_value(self, pts->R+ pts->m*i);
    }
  MoveObj(stack,1, NSP_OBJECT(ret));
  return 1;
}

%%
last

/***************************************
 * a set of functions for GridValueFn 
 ***************************************/

int nsp_gvf_check_nx(NspMatrix *nx)
{
  int i;
  for( i = 0 ; i < nx->mn ; i++)
    {
      if ((int) nx->R[i] <= 1 ) return FAIL;
    }
  return OK;
}

NspMatrix *nsp_gvf_create_steps(NspMatrix *nx,NspMatrix *xmin,NspMatrix *xmax) 
{
  int i;
  NspMatrix *Pas = NULL;
  if ((Pas = nsp_matrix_create("steps",'r',nx->mn,1)) == NULLMAT) return NULLMAT;
  for( i = 0 ; i < nx->mn ; i++)
    {
      Pas->R[i] = (xmax->R[i]-xmin->R[i]) / (nx->R[i]-1);
    }
  return Pas;
}

NspMatrix *nsp_gvf_create_values(NspMatrix *nx)
{
  int i, prod=1;
  NspMatrix *V = NULL;
  for( i = 0 ; i < nx->mn ; i++)
    {
      prod *= (int) nx->R[i];
    }
  V = nsp_matrix_create("values",'r',prod,1);
  memset(V->R,0,V->mn*sizeof(double));
  return V;
}


int nsp_gvf_ind_to_point(NspGridValueFn *Gvf,double pt[], int i)
{
  NspValueFn *Vf = (NspValueFn *) Gvf;
  int k, ind;
  /* Case where x is out of bounds */
  if(i < 0) return FAIL;
  for ( k=0 ; k < Vf->xdim; k++)
    {
      int inx = (int) Gvf->n->R[k];
      ind = i % inx ; /*  i - (i/nx)*nx; remainder */
      pt[k] = Vf->xmin->R[k] + Gvf->step->R[k]*ind;
      i = (i-ind)/inx;
    }
  return OK;
}

int nsp_ind_to_point(NspMatrix *pt, int i, NspMatrix *min,NspMatrix *nx, NspMatrix *step, int t)
{
  int k, ind;
  /* Case where x is out of bounds */
  if(i < 0) return FAIL;
  for ( k=0 ; k < pt->mn; k++)
    {
      int inx = (int) nx->R[k];
      ind = i % inx ; /*  i - (i/nx)*nx; remainder */
      pt->R[k] = min->R[k] + step->R[k]*ind;
      i = (i-ind)/inx;
    }
  return OK;
}

int nsp_gvf_point_to_ind(NspGridValueFn *Gvf,const double pt[]) 
{
  const double eps1 = 1.e-4, eps2= 1.e-10;
  NspValueFn *Vf = (NspValueFn *) Gvf;
  int k, ind = 0, cumprod = 1, ik = 0;
  for( k = 0; k < Vf->xdim; k++)
    {
      if( pt[k] < Vf->xmin->R[k] -eps1 || pt[k] > Vf->xmax->R[k]+ eps1)
	{
	  return -1;
	}
      else if (Vf->xmax->R[k] - Vf->xmin->R[k] < eps2 )
	{
	  ik = 0;
	}
      else
	{
	  ik = (int) floor((pt[k]-Vf->xmin->R[k])/Gvf->step->R[k]+0.5);
	}
      ind += cumprod * ik;
      cumprod *= (int) Gvf->n->R[k];
    }
  return ind;
}

/* return Nan if outside */

double nsp_gvf_get_i_value(NspGridValueFn *Gvf, int i)
{
  i = Max(Min(i,Gvf->values->mn-1),0);
  return Gvf->values->R[i];
}

void nsp_gvf_set_i_value(NspGridValueFn *Gvf, int i,const double val)
{
  i = Max(Min(i,Gvf->values->mn-1),0);
  Gvf->values->R[i]= val;
}

double nsp_gvf_get_pt_value(NspGridValueFn *Gvf,const double pt[]) 
{
  int ind = nsp_gvf_point_to_ind(Gvf,pt);
  int i = Max(Min(ind,Gvf->values->mn-1),0);
  return Gvf->values->R[i];
}

void nsp_gvf_set_pt_value(NspGridValueFn *Gvf,const double pt[],const double val) 
{
  int ind = nsp_gvf_point_to_ind(Gvf,pt);
  int i = Max(Min(ind,Gvf->values->mn-1),0);
  Gvf->values->R[i]= val;
}

/***************************************
 * a set of functions for CutsValueFn 
 ***************************************/

double nsp_cvf_get_value(NspCutsValueFn *Cvf,const double pt[]) 
{
  int i, j;
  double res = -HUGE_VAL, val;
  for( i=0 ; i < Cvf->heights->mn ; i++)
    {
      
      val = Cvf->heights->R[i];
      for( j = 0; j < Cvf->slopes->m ; j++)
	{
	  val += Cvf->slopes->R[j + Cvf->slopes->m*i ] * pt[j];
	}
      res = Max(res, val);
    }
  return res;
}

int nsp_cvf_add_slope(NspCutsValueFn *Cvf,double height,double slope[])
{
  int i, offset;
  if ( nsp_matrix_add_columns(Cvf->heights,1,height) == FAIL) 
    return(FAIL);
  if ( nsp_matrix_add_columns(Cvf->slopes,1,0.0) == FAIL) 
    return(FAIL);
  offset = Cvf->slopes->m*(Cvf->slopes->n-1);
  for( i=0 ; i < Cvf->heights->mn ; i++)
    {
      Cvf->slopes->R[i + offset ]= slope[i];
    }
  return OK;
}

/* we assume that size are checked elsewhere */

int nsp_cvf_add_slopes(NspCutsValueFn *Cvf,NspMatrix *height,NspMatrix *slopes)
{
  int i,j, n = Cvf->heights->mn;

  if ( Cvf->slopes->m != slopes->m ) return FAIL;
  if ( height->mn != slopes->n ) return FAIL;
  
  if ( nsp_matrix_add_columns(Cvf->heights,height->mn,0.0) == FAIL) 
    return(FAIL);
  for ( i = 0 ; i < height->mn; i++) 
    Cvf->heights->R[n+i] = height->R[i];

  n = Cvf->slopes->n;
  if ( nsp_matrix_add_columns(Cvf->slopes,slopes->n,0.0) == FAIL) 
    return(FAIL);
  for( j=0 ; j < slopes->n ; j++)
    {
      int offset1 = Cvf->slopes->m*(j+n);
      int offset2 = slopes->m*j;
      memcpy(Cvf->slopes->R + offset1, slopes->R +offset2, Cvf->slopes->m*sizeof(double));
    }
  return OK;
}

NspMatrix *nsp_cvf_get_slopes(NspCutsValueFn *self)
{
  return  (NspMatrix *) nsp_object_copy(NSP_OBJECT(self->slopes));
}

NspMatrix *nsp_cvf_get_heights(NspCutsValueFn *self)
{
  return   (NspMatrix *) nsp_object_copy(NSP_OBJECT(self->heights));
}

NspMatrix *nsp_gvf_get_nx(NspGridValueFn *Gvf)
{
  return (NspMatrix *) nsp_object_copy(NSP_OBJECT(Gvf->n));
}

/* if use_values is FALSE the values field is not allocated and the 
 * the GridValueFn is only used to perform points to/from integer operations
 */

NspGridValueFn *nsp_gvf_create(const char *name,NspMatrix *nx,NspMatrix *xmin,NspMatrix *xmax, int use_values)
{
  NspGridValueFn *H;
  NspValueFn *F;
  NspMatrix *step=NULL, *values = NULL, *nx_c=NULL, *xmin_c=NULL,*xmax_c=NULL;
  if (nsp_gvf_check_nx(nx) == FAIL) 
    {
      Scierror("Error: first argument should contain values greater than 1\n");
      return NULL;
    }
  if ( (step=nsp_gvf_create_steps(nx,xmin,xmax))== NULL) 
    {
      Scierror("Error: unable to create steps\n");
      return NULL;
    }
  if (  use_values )
    {
      values = nsp_gvf_create_values(nx);
      if ( values == NULL )
	{
	  Scierror("Error: unable to allocate space for values \n");
	  return NULL;
	}
    }
  else
    {
      values = nsp_matrix_create("values",'r',1,1);
      if ( values == NULL )
	{
	  Scierror("Error: unable to allocate space for values \n");
	  return NULL;
	}
      values->R[0]=0.0;
    }
  if ((nx_c = (NspMatrix *) nsp_object_copy_and_name("nx",NSP_OBJECT(nx))) == NULLMAT) 
    return NULL;
  if ((xmin_c = (NspMatrix *) nsp_object_copy_and_name("xmin",NSP_OBJECT(xmin))) == NULLMAT) 
    return NULL;
  if ((xmax_c = (NspMatrix *) nsp_object_copy_and_name("xmax",NSP_OBJECT(xmax))) == NULLMAT) 
    return NULL;
  /* want to be sure that type gridvaluefn is initialized */
  nsp_type_gridvaluefn = new_type_gridvaluefn(T_BASE);
  H = nsp_gridvaluefn_create(name , nx_c, step, values,(NspTypeBase *) nsp_type_gridvaluefn);
  if ( H == NULL) return NULL;
  F= (NspValueFn *)H;
  nsp_matrix_destroy(F->xmin);  F->xmin = xmin_c;
  nsp_matrix_destroy(F->xmax);  F->xmax = xmax_c;
  F->xdim = nx->mn;
  return H;
}

