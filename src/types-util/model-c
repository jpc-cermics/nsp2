/* -*- Mode: C -*- */
/*-------------------------------------------------------------------
 * This Software is ( Copyright ENPC 1998-2004 )                          
 * Jean-Philippe Chancelier Enpc/Cermics 
 *-------------------------------------------------------------------*/

#include "nsp/object.h"
#define  @TYPENAME@_Private 
#include "@TYPEDOWNCASE@.h"
#include "nsp/interf.h"

/* 
 * Nsp@TYPENAME@ inherits from Nsp@PARENT@
 */

int nsp_type_@TYPEDOWNCASE@_id=0;
NspType@TYPENAME@ *nsp_type_@TYPEDOWNCASE@=NULL;

/*
 * Type object for @TYPENAME@ 
 * all the instance of NspType@TYPENAME@ share the same id. 
 * nsp_type_@TYPEDOWNCASE@: is an instance of NspType@TYPENAME@ 
 *    used for objects of Nsp@TYPENAME@ type (i.e built with new_@TYPEDOWNCASE@) 
 * other instances are used for derived classes 
 */

NspType@TYPENAME@ *new_type_@TYPEDOWNCASE@(type_mode mode)
{
  NspType@TYPENAME@ *type= NULL;
  NspTypeObject *top;
  if (  nsp_type_@TYPEDOWNCASE@ != 0 && mode == T_BASE ) 
    {
      /* initialization performed and T_BASE requested */
      return nsp_type_@TYPEDOWNCASE@;
    }
  
  if ((type =  malloc(sizeof(NspType@TYPENAME@))) == NULL) return NULL;
  type->interface = NULL;
  type->surtype = (NspTypeBase *) new_type_@PARENTDOWNCASE@(T_DERIVED);
  if ( type->surtype == NULL) return NULL;
  type->attrs = @TYPEDOWNCASE@_attrs ; 
  type->get_attrs = (attrs_func *) int_get_attribute; 
  type->set_attrs = (attrs_func *) int_set_attribute; 
  type->methods = @TYPEDOWNCASE@_get_methods; 
  type->new = (new_func *) new_@TYPEDOWNCASE@;

  top = NSP_TYPE_OBJECT(type->surtype);
  while ( top->surtype != NULL ) top= NSP_TYPE_OBJECT(top->surtype);
  
  /* object methods redefined for @TYPEDOWNCASE@ */ 
  
  top->pr = (print_func *) nsp_@TYPEDOWNCASE@_print;                    
  top->dealloc = (dealloc_func *) nsp_@TYPEDOWNCASE@_destroy;
  top->copy  =  (copy_func *) nsp_@TYPEDOWNCASE@_copy;                   
  top->size  = (size_func *) nsp_@TYPEDOWNCASE@_size;                  
  top->s_type =  (s_type_func *) nsp_@TYPEDOWNCASE@_type_as_string;    
  top->sh_type = (sh_type_func *) nsp_@TYPEDOWNCASE@_type_short_string;
  top->info = (info_func *) nsp_@TYPEDOWNCASE@_info ;                    
  /* top->is_true = (is_true_func  *) @TYPENAME@IsTrue; */
  /* top->loop =(loop_func *) @TYPEDOWNCASE@_loop;*/
  top->path_extract = (path_func *)  object_path_extract ; 
  top->get_from_obj = (get_from_obj_func *) nsp_@TYPEDOWNCASE@_object;
  top->eq  = (eq_func *) nsp_@TYPEDOWNCASE@_eq;
  top->neq  = (eq_func *) nsp_@TYPEDOWNCASE@_neq;
  top->save  = (save_func *) nsp_@TYPEDOWNCASE@_xdr_save;
  top->load  = (load_func *) nsp_@TYPEDOWNCASE@_xdr_load;
  top->create = (create_func*) int_@TYPESHORT@_create;

  /* specific methods for @TYPEDOWNCASE@ */
      
  type->init = (init_func *) init_@TYPEDOWNCASE@;
      
  /* 
   * @TYPENAME@ interfaces can be added here 
   * type->interface = (NspTypeBase *) new_type_b();
   * type->interface->interface = (NspTypeBase *) new_type_C()
   * ....
   */
  
  if ( nsp_type_@TYPEDOWNCASE@_id == 0 ) 
    {
      /* 
       * the first time we get here we initialize the type id and
       * an instance of NspType@TYPENAME@ called nsp_type_@TYPEDOWNCASE@
       */
      type->id =  nsp_type_@TYPEDOWNCASE@_id = nsp_new_type_id();
      nsp_type_@TYPEDOWNCASE@ = type;
      if ( nsp_register_type(nsp_type_@TYPEDOWNCASE@) == FALSE) return NULL;
      return ( mode == T_BASE ) ? type : new_type_@TYPEDOWNCASE@(mode);
    }
  else 
    {
      type->id = nsp_type_@TYPEDOWNCASE@_id;
      return type;
    }
}

/*
 * initialize @TYPENAME@ instances 
 * locally and by calling initializer on parent class 
 */

static int init_@TYPEDOWNCASE@(Nsp@TYPENAME@ *o,NspType@TYPENAME@ *type)
{
  /* to be done always */ 
  if ( type->surtype->init(&o->father,type->surtype) == FAIL) return FAIL;
  o->type = type; 
  NSP_OBJECT(o)->basetype = (NspTypeBase *)type;
  /* FIXME : specific */
  o->@TYPEDOWNCASE@_val = nsp_matrix_create("val",'r',0,0);
  if ( o->@TYPEDOWNCASE@_val == NULLMAT) return FAIL;
  return OK;
}

/*
 * new instance of @TYPENAME@ 
 */

Nsp@TYPENAME@ *new_@TYPEDOWNCASE@() 
{
  Nsp@TYPENAME@ *loc; 
  /* type must exists */
  nsp_type_@TYPEDOWNCASE@ = new_type_@TYPEDOWNCASE@(T_BASE);
  if ( (loc = malloc(sizeof(Nsp@TYPENAME@)))== @NULL@) return loc;
  /* initialize object */
  if ( init_@TYPEDOWNCASE@(loc,nsp_type_@TYPEDOWNCASE@) == FAIL) return @NULL@;
  return loc;
}

/*----------------------------------------------
 * Object method redefined for @TYPENAME@ 
 *-----------------------------------------------*/

/*
 * size 
 */

static int nsp_@TYPEDOWNCASE@_size(Nsp@TYPENAME@ *Mat, int flag)
{
  return 0;
}

/*
 * type as string 
 */

static char @TYPEDOWNCASE@_type_name[]="@TYPEASSTRING@";
static char @TYPEDOWNCASE@_short_type_name[]="@TYPESHORT@";

static char *nsp_@TYPEDOWNCASE@_type_as_string(void)
{
  return(@TYPEDOWNCASE@_type_name);
}

static char *nsp_@TYPEDOWNCASE@_type_short_string(NspObject *v)
{
  return(@TYPEDOWNCASE@_short_type_name);
}

static int nsp_@TYPEDOWNCASE@_full_comp(Nsp@TYPENAME@ * A,Nsp@TYPENAME@ * B,char *op,int *err)
{
  Scierror("@TYPEDOWNCASE@_full_comp: to be implemented \n");
  return FALSE;
}

/*
 * A == B 
 */

static int nsp_@TYPEDOWNCASE@_eq(Nsp@TYPENAME@ *A, NspObject *B)
{
  int err,rep;
  if ( check_cast(B,nsp_type_@TYPEDOWNCASE@_id) == FALSE) return FALSE ;
  rep = nsp_@TYPEDOWNCASE@_full_comp(A,(Nsp@TYPENAME@ *) B,"==",&err);
  if ( err == 1) return FALSE ; 
  return rep;
}

/*
 * A != B 
 */

static int nsp_@TYPEDOWNCASE@_neq(Nsp@TYPENAME@ *A, NspObject *B)
{
  int err=0,rep;
  if ( check_cast(B,nsp_type_@TYPEDOWNCASE@_id) == FALSE) return TRUE;
  rep = nsp_@TYPEDOWNCASE@_full_comp(A,(Nsp@TYPENAME@ *) B,"<>",&err);
  if ( err == 1) return TRUE ; 
  return rep;
}

/*
 * save 
 */

static int nsp_@TYPEDOWNCASE@_xdr_save(XDR  *xdrs, Nsp@TYPENAME@ *M)
{
  if (nsp_xdr_save_i(xdrs,M->type->id) == FAIL) return FAIL;
  if (nsp_xdr_save_string(xdrs, NSP_OBJECT(M)->name) == FAIL) return FAIL;
  Scierror("@TYPEDOWNCASE@_xdr_save: to be implemented \n");
  return OK;
}

/*
 * load 
 */

static Nsp@TYPENAME@  *nsp_@TYPEDOWNCASE@_xdr_load(XDR *xdrs)
{
  Nsp@TYPENAME@ *M = NULL;
  static char name[NAME_MAXL];
  if (nsp_xdr_load_string(xdrs,name,NAME_MAXL) == FAIL) return @NULL@;
  Scierror("@TYPEDOWNCASE@_xdr_load: to be implemented \n");
  return M;
}

/*
 * delete 
 */

void nsp_@TYPEDOWNCASE@_destroy(Nsp@TYPENAME@ *H)
{
  nsp_object_destroy_name(NSP_OBJECT(H));
  FREE(H);
}

/*
 * info 
 */

int nsp_@TYPEDOWNCASE@_info(Nsp@TYPENAME@ *H, int indent,const char *name, int rec_level)
{
  int i;
  if ( H == @NULL@) 
    {
      Sciprintf("Null Pointer @TYPENAME@ \n");
      return;
    }
  for ( i=0 ; i < indent ; i++) Sciprintf(" ");
  Sciprintf("[@TYPEASSTRING@ %s, col=%d th=%d]\n", NSP_OBJECT(H)->name,
	    H->@TYPEDOWNCASE@_color,H->@TYPEDOWNCASE@_thickness);
}

/*
 * print 
 */

int nsp_@TYPEDOWNCASE@_print(Nsp@TYPENAME@ *H, int indent,const char *name, int rec_level)
{
  nsp_@TYPEDOWNCASE@_info(H,indent,NULL,0);
  return TRUE;
}

/*-----------------------------------------------------
 * a set of functions used when writing interfaces 
 * for @TYPENAME@ objects 
 * Note that some of these functions could become MACROS XXXXX 
 *-----------------------------------------------------*/

Nsp@TYPENAME@   *nsp_@TYPEDOWNCASE@_object(NspObject *O)
{
  /* Follow pointer */
  HOBJ_GET_OBJECT(O,NULL);
  /* Check type */
  if ( check_cast(O,nsp_type_@TYPEDOWNCASE@_id) == TRUE) return ((Nsp@TYPENAME@ *) O);
  else 
    Scierror("Error:\tArgument should be a %s\n",type_get_name(nsp_type_@TYPEDOWNCASE@));
  return(NULL);
}

int Is@TYPENAME@Obj(Stack stack, int i)
{
  return nsp_object_type(NthObj(i) , nsp_type_@TYPEDOWNCASE@_id);
}

int Is@TYPENAME@(NspObject *O)
{
  return nsp_object_type(O,nsp_type_@TYPEDOWNCASE@_id);
}

Nsp@TYPENAME@  *Get@TYPENAME@Copy(Stack stack, int i)
{
  if (  Get@TYPENAME@(stack,i) == NULL ) return NULL;
  return MaybeObjCopy(&NthObj(i));
}

Nsp@TYPENAME@  *Get@TYPENAME@(Stack stack, int i)
{
  Nsp@TYPENAME@ *M;
  if (( M = nsp_@TYPEDOWNCASE@_object(NthObj(i))) == @NULL@)
     ArgMessage(stack,i);
  return M;
}

/*-----------------------------------------------------
 * constructor 
 * if type is non NULL it is a subtype which can be used to 
 * create a Nsp@TYPENAME@ instance 
 *-----------------------------------------------------*/

Nsp@TYPENAME@ *nsp_@TYPEDOWNCASE@_create(char *name,int color,int thickness,NspTypeBase *type)
{
  Nsp@TYPENAME@ *H  = (type == NULL) ? new_@TYPEDOWNCASE@() : type->new();
  if ( H ==  @NULL@)
    {
      Sciprintf("No more memory\n");
      return @NULL@;
    }
  if ( nsp_object_set_initial_name(NSP_OBJECT(H),name) == NULLSTRING) return(@NULL@);
  NSP_OBJECT(H)->ret_pos = -1 ;
  H->@TYPEDOWNCASE@_color = color;
  H->@TYPEDOWNCASE@_thickness = thickness;
  return H;
}

/*
 * copy 
 */

Nsp@TYPENAME@ *nsp_@TYPEDOWNCASE@_copy(Nsp@TYPENAME@ *H)
{
  return nsp_@TYPEDOWNCASE@_create(NVOID,H->@TYPEDOWNCASE@_color,H->@TYPEDOWNCASE@_thickness,NULL);
}

/*-------------------------------------------------------------------
 * wrappers for the @TYPENAME@
 * i.e functions at Nsp level 
 *-------------------------------------------------------------------*/

static int int_@TYPESHORT@_create(Stack stack, int rhs, int opt, int lhs)
{
  Nsp@TYPENAME@ *H;
  int color=-1,thickness=-1;
  /* first argument is a unused its a NspType */
  CheckRhs(1,100);
  /* we first create a default object */
  if(( H = nsp_@TYPEDOWNCASE@_create(NVOID,color,thickness,NULL)) == @NULL@) return RET_BUG;
  /* then we use optional arguments to fill attributes */
  if ( int_create_with_attributes((NspObject  *) H,stack,rhs,opt,lhs) == RET_BUG)  return RET_BUG;
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
} 

/*------------------------------------------------------
 * attributes  (set/get methods) 
 *------------------------------------------------------*/

static NspObject * int_@TYPESHORT@_get_color(void *Hv,char *attr)
{
  return nsp_create_object_from_double(NVOID,((Nsp@TYPENAME@ *) Hv)->@TYPEDOWNCASE@_color);
}

static int int_@TYPESHORT@_set_color(void *Hv,const char *attr, NspObject *O)
{
  int color; 
  if (  IntScalar(O,&color) == FAIL) return FAIL;
  ((Nsp@TYPENAME@ *)Hv)->@TYPEDOWNCASE@_color = color;
  return OK ;
}

static NspObject * int_@TYPESHORT@_get_thickness(void *Hv, char *attr)
{
  return nsp_create_object_from_double(NVOID,((Nsp@TYPENAME@ *) Hv)->@TYPEDOWNCASE@_thickness);
}

static int int_@TYPESHORT@_set_thickness(void *Hv,const char *attr, NspObject *O)
{
  int thickness; 
  if (  IntScalar(O,&thickness) == FAIL) return FAIL;
  ((Nsp@TYPENAME@ *) Hv)->@TYPEDOWNCASE@_thickness = thickness;
  return OK ;
}

static NspObject * int_@TYPESHORT@_get_val(void *Hv,char *attr)
{
  return (NspObject *) ((Nsp@TYPENAME@ *)Hv)->@TYPEDOWNCASE@_val;
}

static NspObject *int_@TYPESHORT@_get_object_val(void *Hv,char *str)
{
  return (NspObject *)  ((Nsp@TYPENAME@ *)Hv)->@TYPEDOWNCASE@_val;
}

static int int_@TYPESHORT@_set_val(void *Hv,const char *attr, NspObject *O)
{
  NspMatrix *m;
  if ((m = (NspMatrix *) nsp_object_copy_and_name(attr,O)) == NULLMAT) return RET_BUG;
  ((Nsp@TYPENAME@ *)Hv)->@TYPEDOWNCASE@_val = m;
  return OK ;
}

static AttrTab @TYPEDOWNCASE@_attrs[] = {
  { "@TYPESHORT@_color", 	int_@TYPESHORT@_get_color , 	int_@TYPESHORT@_set_color , 	NULL },
  { "@TYPESHORT@_thickness",int_@TYPESHORT@_get_thickness, 	int_@TYPESHORT@_set_thickness,	NULL },
  { "@TYPESHORT@_val", 	int_@TYPESHORT@_get_val, 	int_@TYPESHORT@_set_val, 	int_@TYPESHORT@_get_object_val },
  { (char *) 0, NULL}
};


/*------------------------------------------------------
 * methods 
 *------------------------------------------------------*/

static int int_@TYPESHORT@_@TYPEDOWNCASE@_color_change(void *a,Stack stack,int rhs,int opt,int lhs)
{
  int color; 
  CheckRhs(1,1);
  CheckLhs(1,1);
  if (GetScalarInt(stack,1,&color) == FAIL) return RET_BUG;
  ((Nsp@TYPENAME@ *) a)->@TYPEDOWNCASE@_color = color;
  return 0;
}

static int int_@TYPESHORT@_@TYPEDOWNCASE@_color_show(void *a,Stack stack,int rhs,int opt,int lhs)
{
  CheckRhs(0,0);
  CheckLhs(1,1);
  Sciprintf("color of %s is %d\n",NSP_OBJECT(a)->name,((Nsp@TYPENAME@ *) a)->@TYPEDOWNCASE@_color);
  return 0;
}

static NspMethods @TYPEDOWNCASE@_methods[] = {
  { "@TYPEDOWNCASE@_color_change", int_@TYPESHORT@_@TYPEDOWNCASE@_color_change},
  { "@TYPEDOWNCASE@_color_show",   int_@TYPESHORT@_@TYPEDOWNCASE@_color_show},
  { (char *) 0, NULL}
};

static NspMethods *@TYPEDOWNCASE@_get_methods(void) { return @TYPEDOWNCASE@_methods;};


/*-------------------------------------------
 * function 
 *-------------------------------------------*/

int int_@TYPESHORT@_test(Stack stack, int rhs, int opt, int lhs)
{
  /* test */
  CheckRhs(1,1);
  CheckLhs(1,1);
  Nsp@TYPENAME@ *a;
  if (( a= Get@TYPENAME@(stack,1))== @NULL@) return RET_BUG;
  nsp_object_print((NspObject *) a,0,NULL,0);
  return 0;
}

/*----------------------------------------------------
 * Interface 
 * i.e a set of function which are accessible at nsp level
 *----------------------------------------------------*/

static OpTab @TYPENAME@_func[]={
  {"setrowscols_@TYPESHORT@",int_set_attribute},/* a(xxx)= b */
  {"test_@TYPESHORT@",int_@TYPESHORT@_test},
  {(char *) 0, NULL}
};

/* call ith function in the @TYPENAME@ interface */

int @TYPENAME@_Interf(int i, Stack stack, int rhs, int opt, int lhs)
{
  return (*(@TYPENAME@_func[i].fonc))(stack,rhs,opt,lhs);
}

/* used to walk through the interface table 
    (for adding or removing functions) */

void @TYPENAME@_Interf_Info(int i, char **fname, function (**f))
{
  *fname = @TYPENAME@_func[i].name;
  *f = @TYPENAME@_func[i].fonc;
}

