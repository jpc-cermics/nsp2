/* -*- Mode: C -*- */

%%
headers
#include <nsp/gtk/gobject.h> 
#include <nsp/gtk/gobject-util.h>

#include <girepository.h>

%%
modulename atk
%%
import gobject.GObject as GObject
%%
ignore-glob
  *_get_type

%%
override GIRepository.g_irepository_enumerate_versions

static int _wrap_g_irepository_enumerate_versions
(NspGIRepository *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {string,t_end};
  char *namespace;
  GList *ret, *tmp;
  NspList *nsp_list;
  if ( GetArgs(stack,rhs,opt,T,&namespace) == FAIL) return RET_BUG;
  ret = g_irepository_enumerate_versions(G_IREPOSITORY(self->obj), namespace);
  NSP_LIST_FROM_GLIST(ret,nsp_new_string_obj("lel",tmp->data,-1),g_list_free);
}

%%
override GIRepository.g_irepository_find_by_name 

static int _wrap_g_irepository_find_by_name 
(NspGIRepository *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {string,string,t_end};
  char *namespace, *name;
  GIBaseInfo *info;
  if ( GetArgs(stack,rhs,opt,T,&namespace,&name) == FAIL) return RET_BUG;
  info = g_irepository_find_by_name (G_IREPOSITORY(self->obj), namespace, name);
  if (info == NULL) 
    {
      Sciprintf("Cannot fing %s\n",name);
    }
  /* 
  py_info = _pygi_info_new (info);
  g_base_info_unref (info);
  return py_info; */
  return 0;
}

%%
override GIRepository.g_irepository_get_loaded_namespaces

static int _wrap_g_irepository_get_loaded_namespaces 
(NspGIRepository *self,Stack stack,int rhs,int opt,int lhs)
{
  char **namespaces;
  /* GIBaseInfo *info; */
  CheckRhs(0,0);
  namespaces = g_irepository_get_loaded_namespaces (G_IREPOSITORY(self->obj));
  NspSMatrix*Res= nsp_smatrix_create_from_table(namespaces);
  MoveObj(stack,1,NSP_OBJECT(Res));
  return 1;
}

%%
override GIRepository.g_irepository_get_version 

static int _wrap_g_irepository_get_version 
(NspGIRepository *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {string,t_end};
  char *namespace;
  if ( GetArgs(stack,rhs,opt,T,&namespace) == FAIL) return RET_BUG;
  ret = g_irepository_get_version(G_IREPOSITORY(self->obj), namespace);
  if ( nsp_move_string(stack,1,(ret) ? ret: "",-1)== FAIL) return RET_BUG; 
  return 1;
}

%%
override g_irepository_require

static int _wrap_g_irepository_require 
(NspGIRepository *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {string,string,t_end};
  char *namespace, *version;
  GIRepositoryLoadFlags flags = 0;
  GError *error= NULL;
  if ( GetArgs(stack,rhs,opt,T,&namespace,&version) == FAIL) return RET_BUG;
  /* optional argument lazy 
   * if true flags |= G_IREPOSITORY_LOAD_FLAG_LAZY; 
   */
  g_irepository_require (G_IREPOSITORY(self->obj), namespace, version, flags, &error);
  if (error != NULL) { 
    Scierror("Error: %s\n",error->message);
    g_error_free (error);
    return RET_BUG;
  }
  return 0;
}

%%
override GIRepository.g_irepository_get_n_infos

void nsp_gi_info_new (GIBaseInfo *info);

static int _wrap_g_irepository_get_n_infos 
(NspGIRepository *self,Stack stack,int rhs,int opt,int lhs)
{
  gssize n_infos; 
  /* NspObject *infos;  */
  gssize i;
  int_types T[] = {string,t_end};
  char *namespace;
  if ( GetArgs(stack,rhs,opt,T,&namespace) == FAIL) return RET_BUG;
  n_infos = g_irepository_get_n_infos (G_IREPOSITORY(self->obj), namespace);
  if (n_infos < 0) 
    {
      Scierror("Error: Namespace %s is not loaded",namespace);
      return RET_BUG;
    }
  Sciprintf("Found %d infos\n",n_infos);
  for (i = 0; i < n_infos; i++) 
    {
      GIBaseInfo *info;
      info = g_irepository_get_info(G_IREPOSITORY(self->obj), namespace, i);
      if (info != NULL)
	{
	  GIBaseInfo *container;
	  Sciprintf("object %d is %s\n",i, g_base_info_get_name (info));
	  container = g_base_info_get_container (info);
	  if ( container != NULL)
	    Sciprintf("  container is %s\n", g_base_info_get_name (container));
	  else 
	    Sciprintf("  no container for %s\n", g_base_info_get_name (info));
	  nsp_gi_info_new (info);
	}
    }
  return 0;
}

/*
 * g_base_info_get_namespace (self->info);
 * GIBaseInfo *info = g_base_info_get_container (self->info);
 * g_base_info_get_namespace(self->info);
 */

%%
last 

void nsp_gi_info_new (GIBaseInfo *info)
{
  GIInfoType info_type;
  info_type = g_base_info_get_type (info);
  switch (info_type)
    {
    case GI_INFO_TYPE_INVALID:
      Scierror("Invalid info type\n");
      break;
    case GI_INFO_TYPE_FUNCTION:
      Sciprintf("  type = &PyGIFunctionInfo_Type;\n");
      break;
    case GI_INFO_TYPE_CALLBACK:
      Sciprintf("  type = &PyGICallbackInfo_Type;\n");
      break;
    case GI_INFO_TYPE_STRUCT:
      Sciprintf("  type = &PyGIStructInfo_Type;\n");
      break;
    case GI_INFO_TYPE_BOXED:
      Sciprintf("  type = &PyGIBoxedInfo_Type;\n");
      break;
    case GI_INFO_TYPE_ENUM:
    case GI_INFO_TYPE_FLAGS:
      Sciprintf("  type = &PyGIEnumInfo_Type;\n");
      break;
    case GI_INFO_TYPE_OBJECT:
      Sciprintf("  type = &PyGIObjectInfo_Type;\n");
      break;
    case GI_INFO_TYPE_INTERFACE:
      Sciprintf("  type = &PyGIInterfaceInfo_Type;\n");
      break;
    case GI_INFO_TYPE_CONSTANT:
      Sciprintf("  type = &PyGIConstantInfo_Type;\n");
      break;
    case GI_INFO_TYPE_UNION:
      Sciprintf("  type = &PyGIUnionInfo_Type;\n");
      break;
    case GI_INFO_TYPE_VALUE:
      Sciprintf("  type = &PyGIValueInfo_Type;\n");
      break;
    case GI_INFO_TYPE_SIGNAL:
      Sciprintf("  type = &PyGISignalInfo_Type;\n");
      break;
    case GI_INFO_TYPE_VFUNC:
      Sciprintf("  type = &PyGIVFuncInfo_Type;\n");
      break;
    case GI_INFO_TYPE_PROPERTY:
      Sciprintf("  type = &PyGIPropertyInfo_Type;\n");
      break;
    case GI_INFO_TYPE_FIELD:
      Sciprintf("  type = &PyGIFieldInfo_Type;\n");
      break;
    case GI_INFO_TYPE_ARG:
      Sciprintf("  type = &PyGIArgInfo_Type;\n");
      break;
    case GI_INFO_TYPE_TYPE:
      Sciprintf("  type = &PyGITypeInfo_Type;\n");
      break;
    case GI_INFO_TYPE_UNRESOLVED:
      Sciprintf("  type = &PyGIUnresolvedInfo_Type;\n");
      break;
    default:
      g_assert_not_reached();
      break;
    }
}


/* static NspObject * */
/* _wrap_g_irepository_get_typelib_path (NspGIRepository *self, */
/*                                       NspObject       *args, */
/*                                       NspObject       *kwargs) */
/* { */
/*     static char *kwlist[] = { "namespace", NULL }; */
/*     const char *namespace_; */
/*     const gchar *typelib_path; */

/*     if (!NspArg_ParseTupleAndKeywords (args, kwargs, */
/*                                       "s:Repository.get_typelib_path", kwlist, &namespace_)) { */
/*         return NULL; */
/*     } */

/*     typelib_path = g_irepository_get_typelib_path (self->repository, namespace_); */
/*     if (typelib_path == NULL) { */
/*         NspErr_Format (NspExc_RuntimeError, "Namespace '%s' not loaded", namespace_); */
/*         return NULL; */
/*     } */

/*     return PYGLIB_NspBytes_FromString (typelib_path); */
/* } */

