
#line 271 "gtk.override"
static NspObject *
_wrap_gtk_style__get_fg(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->fg);
}
#line 12100 "gtk.c"
#line 279 "gtk.override"
static NspObject *
_wrap_gtk_style__get_bg(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->bg);
}
#line 12108 "gtk.c"
#line 287 "gtk.override"
static NspObject *
_wrap_gtk_style__get_light(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->light);
}
#line 12116 "gtk.c"
#line 295 "gtk.override"
static NspObject *
_wrap_gtk_style__get_dark(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->dark);
}
#line 12124 "gtk.c"
#line 303 "gtk.override"
static NspObject *
_wrap_gtk_style__get_mid(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->mid);
}
#line 12132 "gtk.c"
#line 311 "gtk.override"
static NspObject *
_wrap_gtk_style__get_text(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->text);
}
#line 12140 "gtk.c"
#line 319 "gtk.override"
static NspObject *
_wrap_gtk_style__get_base(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->base);
}
#line 12148 "gtk.c"
#line 327 "gtk.override"
static NspObject *
_wrap_gtk_style__get_text_aa(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_COLOUR_ARRAY, style->text_aa);
}
#line 12156 "gtk.c"
#line 335 "gtk.override"
static NspObject *
_wrap_gtk_style__get_white(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return (NspObject *)gboxed_create(NVOID,GDK_TYPE_COLOR, &style->white, TRUE, TRUE,(NspTypeBase *) nsp_type_gdkcolor);
}
static int
_wrap_gtk_style__set_white(NspGObject *self, char *attr, NspObject *value)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  if (!nspg_boxed_check(value, GDK_TYPE_COLOR)) {
    Scierror("can only assign a GdkColor");
    return RET_BUG;
  }
  style->white = *nspg_boxed_get(value, GdkColor);
  return 0;
}
#line 12175 "gtk.c"
#line 354 "gtk.override"
static NspObject *
_wrap_gtk_style__get_black(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return (NspObject *) gboxed_create(NVOID,GDK_TYPE_COLOR, &style->black, TRUE, TRUE,(NspTypeBase *) nsp_type_gdkcolor);
}
static int
_wrap_gtk_style__set_black(NspGObject *self, char *attr, NspObject *value)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  if (!nspg_boxed_check(value, GDK_TYPE_COLOR)) {
    Scierror( "can only assign a GdkColor");
    return RET_BUG;
  }
  style->black = *nspg_boxed_get(value, GdkColor);
  return 0;
}
#line 12194 "gtk.c"
static NspObject *_wrap_gtk_style__get_font_desc(NspObject *self,char *attr)
{
  PangoFontDescription *ret;

  ret = (PangoFontDescription*) GTK_STYLE(NSP_GOBJECT_GET(self))->font_desc;
  /* nspg_boxed_new handles NULL checking */
  return (NspObject *) gboxed_create(NVOID,PANGO_TYPE_FONT_DESCRIPTION, ret, TRUE, TRUE,(NspTypeBase *) nsp_type_pangofontdescription);
}

static NspObject *_wrap_gtk_style__get_xthickness(NspObject *self,char *attr)
{
  int ret;

  ret = (gint) GTK_STYLE(NSP_GOBJECT_GET(self))->xthickness;
  return nsp_new_double_obj((double) ret);
}

static NspObject *_wrap_gtk_style__get_ythickness(NspObject *self,char *attr)
{
  int ret;

  ret = (gint) GTK_STYLE(NSP_GOBJECT_GET(self))->ythickness;
  return nsp_new_double_obj((double) ret);
}

#line 373 "gtk.override"
static NspObject *
_wrap_gtk_style__get_fg_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->fg_gc);
}
#line 12227 "gtk.c"
#line 381 "gtk.override"
static NspObject *
_wrap_gtk_style__get_bg_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->bg_gc);
}
#line 12235 "gtk.c"
#line 389 "gtk.override"
static NspObject *
_wrap_gtk_style__get_light_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->light_gc);
}
#line 12243 "gtk.c"
#line 397 "gtk.override"
static NspObject *
_wrap_gtk_style__get_dark_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->dark_gc);
}
#line 12251 "gtk.c"
#line 405 "gtk.override"
static NspObject *
_wrap_gtk_style__get_mid_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->mid_gc);
}
#line 12259 "gtk.c"
#line 413 "gtk.override"
static NspObject *
_wrap_gtk_style__get_text_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->text_gc);
}
#line 12267 "gtk.c"
#line 421 "gtk.override"
static NspObject *
_wrap_gtk_style__get_base_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->base_gc);
}
#line 12275 "gtk.c"
#line 429 "gtk.override"
static NspObject *
_wrap_gtk_style__get_text_aa_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_GC_ARRAY, style->text_aa_gc);
}
#line 12283 "gtk.c"
#line 437 "gtk.override"
static NspObject *
_wrap_gtk_style__get_white_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return (NspObject *) gobject_create(NVOID,(GObject *)style->white_gc,(NspTypeBase *) nsp_type_gdkgc );
}
static int
_wrap_gtk_style__set_white_gc(NspGObject *self, char *attr, NspObject *value)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  if (!nspgobject_check((NspGObject *) value,(NspTypeBase *) nsp_type_gdkgc)) {
    Scierror( "can only assign a GdkGC");
    return RET_BUG;
  }
  style->white_gc = GDK_GC(nspgobject_get(value));
  return 0;
}
#line 12302 "gtk.c"
#line 456 "gtk.override"
static NspObject *
_wrap_gtk_style__get_black_gc(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return (NspObject *) gobject_create(NVOID,(GObject *)style->black_gc,(NspTypeBase *) nsp_type_gdkgc );
}
static int
_wrap_gtk_style__set_black_gc(NspGObject *self, char *attr, NspObject *value)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  if (!nspgobject_check((NspGObject *) value,(NspTypeBase *) nsp_type_gdkgc)) {
    Scierror( "can only assign a GdkGC");
    return RET_BUG;
  }
  style->black_gc = GDK_GC(nspgobject_get(value));
  return 0;
}
#line 12321 "gtk.c"
#line 475 "gtk.override"
static NspObject *
_wrap_gtk_style__get_bg_pixmap(NspGObject *self, char *attr)
{
  GtkStyle *style = GTK_STYLE(self->obj);
  return _nspgtk_style_helper_new(style, STYLE_PIXMAP_ARRAY, style->bg_pixmap);
}


