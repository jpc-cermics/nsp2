# 17 "src/parsing/override_lexer.mll"
 

(* Prelude part: this is pure Caml. *)

(* open Override_ast;; *)

open Override_parser;;
open Lexing;;

(** {6 Lexing errors} *)

type error =
  | Illegal_character of char
  | Unterminated_comment
  | Unterminated_string
  | Test_error
;;

(** The various errors when lexing. *)

exception Lexer_error of error * Lexing.position * Lexing.position;;

let error (reason, start_p, curr_p) =
  raise (Lexer_error (reason, start_p, curr_p))
;;

(** {6 Explaining lexing errors} *)

let report_error ppf = function
  | Illegal_character c ->
      Format.fprintf ppf "Illegal character %C" c
  | Unterminated_comment ->
      Format.fprintf ppf "Unterminated comment"
  | Unterminated_string ->
      Format.fprintf ppf "Unterminated string"
  | Test_error -> Format.fprintf ppf "Test location\n"
;;

let report_lexical_error ppf = function
  | Lexer_error (r, sp, ep) ->
    let loc = Override_location.mk_loc sp ep in
    Format.fprintf ppf
      "%a@.Lexical error: %a@."
      Override_location.print loc
      report_error r
  | exn -> raise exn
;;

let debug = false;;

(* Push the character `c' back in the `lexbuf'.  Since ocamllex does not
 * implement this functionality, I made it myself.  I used the `dump_lex'
 * function above to track the internal state of the lexer and see how it
 * was used and implemented push_back accordingly.  But since I'm not sure
 * this reverse engineering process was 100% right, I left some assertions
 * and the code of dump_lex above.
 * This code will b0rk everything up if you push_back something different
 * then what has been lexed by the last semantic action of ocamllex.  You
 * were warned.
 * from revcpp Quentin Hocquet   <mefyl@lrde.epita.fr>
 * Benoit Sigoure    <tsuna@lrde.epita.fr>
 *)

let push_back lexbuf c =
  if debug then prerr_endline (Printf.sprintf "push back a character =[%s]" (String.make 1 c));
  let fail msg =
    print_string msg
  in
    if lexbuf.lex_curr_pos = 0 then
      (* The buffer was flushed so we need to really push back `c' in the
         buffer.  *)
      (lexbuf.lex_buffer <- (String.make 1 c) ^ lexbuf.lex_buffer;
       lexbuf.lex_buffer_len <- lexbuf.lex_buffer_len + 1);

    (* Now `c' is in the buffer, simply change the current positions.  *)
    (* Perform some sanity checks:
       1. The buffer_len can't be 0 since our `c' must still be in it.
       2. start_pos, curr_pos and last_pos must not be 0 since we're going
          to decrement them.
       3. Ditto for start_p.pos_cnum and curr_p.pos_cnum.
    *)
    if lexbuf.lex_buffer_len = 0
    then fail ("Assertion failed: lex_curr_pos = "
                ^ string_of_int lexbuf.lex_curr_pos
                ^ " and lex_buffer_len = 0");
    if lexbuf.lex_curr_pos <= 0
    then fail ("Assertion failed: lex_curr_pos <= 0");
    if lexbuf.lex_curr_p.pos_cnum <= 0
    then fail ("Assertion failed: lex_curr_p.pos_cnum <= 0");
    lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 1;
    lexbuf.lex_last_pos <- lexbuf.lex_last_pos - 1;
    lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with
      pos_cnum = lexbuf.lex_curr_p.pos_cnum - 1 }
;;
(* Push the string `s' back in the `lexbuf'.  The comments of push_back
 *  above also apply here.  You were warned.
 *)

let push_back_strings lexbuf = function
  [] -> ()
  | elt::elts -> String.iter (push_back lexbuf) elt;
      List.iter (function arg -> String.iter (push_back lexbuf) arg) elts
;;

(** {6 Keeping the internal buffer locations up to date} *)

let update_loc lexbuf fname line absolute chars =
  let pos = lexbuf.lex_curr_p in
  let new_fname =
    match fname with
    | None -> pos.pos_fname
    | Some s -> s in
  lexbuf.lex_curr_p <- {
    pos with
    pos_fname = new_fname;
    pos_lnum = if absolute then line else pos.pos_lnum + line;
    pos_bol = pos.pos_cnum - chars;
  }
;;

(** Add one to the current line counter of the file being lexed. *)

let incr_line_num lexbuf =
  update_loc lexbuf None 1 false 0
;;

(** Add number of newlines contained in string to the current line
    counter of the file being lexed. *)

let count_newlines s = 
  let c = ref 0 in
  for i = 0 to (String.length s) - 1 do
    if s.[i] == '\n' then
      c := !c +1
  done;
  !c
;;

let incr_lines lexbuf str =
  let count = (count_newlines str) in
  update_loc lexbuf None count false 0
;;

(* debug *)

let show_location str lexbuf =
  let loc = Override_location.mk_loc  lexbuf.lex_start_p lexbuf.lex_curr_p in
  Format.fprintf Format.std_formatter "%a@.Test Lexical error: %s %a@."
    Override_location.print loc str report_error Test_error

(* To buffer string literals *)

let initial_string_buffer = Bytes.create 128000;;
let string_buff = ref initial_string_buffer;;
let string_index = ref 0;;

let reset_string_buffer () =
  string_buff := initial_string_buffer;
  string_index := 0
;;

let store_string_char c =
  if !string_index >= String.length (!string_buff) then begin
    if true then  prerr_endline 
      (Printf.sprintf "Buffer size increased");
    let new_buff = Bytes.create (String.length (!string_buff) * 2) in
      String.blit (!string_buff) 0 new_buff 0 (String.length (!string_buff));
      string_buff := new_buff
  end;
  Bytes.unsafe_set (!string_buff) (!string_index) c;
  incr string_index
;;

let store_string s = 
  if debug then  prerr_endline 
      (Printf.sprintf "store a string [%s]\n" s);
  String.iter store_string_char s
;;

let get_stored_string () =
  let s = String.sub (!string_buff) 0 (!string_index) in
  string_buff := initial_string_buffer;
  s
;;

let print_lexemes = function
  | [] -> ()
  | elt::elts -> prerr_endline (Printf.sprintf  "%s" elt);
      List.iter (function arg -> prerr_endline (Printf.sprintf  "%s" arg)) elts
;;

let split_string str = 
  let str = str (* String.trim str *) in 
  let bb = Buffer.create 1024 in 
  String.iter 
    (fun x -> 
      match x with 
      | '\n' 
      | ' ' -> 
	  let n = Buffer.length bb in 
	  if n = 0 then 
	    Buffer.add_char bb ' '
	  else
	    let c = Buffer.nth bb (n-1) in 
	    if c <> ' ' then 
	      Buffer.add_char bb ' ';
      | c -> Buffer.add_char bb c
    ) str;
  let str = Buffer.contents bb in 
  let str = 
    if str.[0] = ' ' then 
      (String.sub str 1 ((String.length str) -1))
    else 
      str in 
  if str.[(String.length str) -1] = ' ' then 
    (String.sub str 0 ((String.length str) -1))								       
  else
    str 
;;


# 224 "src/parsing/override_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\250\255\001\000\002\000\002\000\252\255\000\000\004\000\
    \009\000\006\000\011\000\118\000\253\255\013\000\015\000\232\000\
    \057\001\254\255\016\000\017\000\138\001\221\001\255\255\019\000\
    \022\000\003\000\005\000\035\000\079\002\021\000\120\000\157\002\
    \010\000\009\000\255\255\014\000\018\000\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\006\000\006\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\001\000\255\255\001\000\000\000\
    \255\255\002\000\255\255\004\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\026\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\014\000\000\000\014\000\014\000\014\000\
    \019\000\000\000\019\000\019\000\019\000\024\000\000\000\024\000\
    \024\000\255\255\026\000\255\255\255\255\255\255\255\255\255\255\
    \035\000\255\255\000\000\036\000\036\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\007\000\008\000\007\000\010\000\010\000\006\000\
    \010\000\009\000\008\000\007\000\010\000\010\000\006\000\012\000\
    \009\000\012\000\017\000\017\000\013\000\022\000\018\000\030\000\
    \022\000\000\000\008\000\023\000\010\000\003\000\025\000\004\000\
    \027\000\008\000\025\000\010\000\010\000\010\000\037\000\033\000\
    \009\000\011\000\000\000\033\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\010\000\000\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\000\000\
    \000\000\000\000\000\000\011\000\000\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\015\000\
    \012\000\030\000\030\000\013\000\000\000\029\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\000\000\000\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\000\000\000\000\000\000\000\000\011\000\000\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\015\000\012\000\000\000\000\000\013\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\005\000\000\000\005\000\255\255\000\000\000\000\
    \015\000\005\000\034\000\005\000\000\000\255\255\034\000\255\255\
    \255\255\255\255\034\000\255\255\000\000\016\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\017\000\000\000\000\000\018\000\016\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\000\000\000\000\016\000\020\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\017\000\000\000\000\000\018\000\
    \016\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\000\000\000\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\022\000\
    \255\255\021\000\023\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
    \000\000\000\000\021\000\000\000\000\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\255\255\000\000\000\000\021\000\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \030\000\030\000\000\000\000\000\029\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\000\000\000\000\000\000\000\000\031\000\000\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\000\000\000\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\006\000\004\000\004\000\007\000\007\000\004\000\
    \009\000\007\000\008\000\008\000\010\000\010\000\008\000\013\000\
    \010\000\014\000\018\000\019\000\014\000\023\000\019\000\029\000\
    \024\000\255\255\004\000\024\000\007\000\000\000\002\000\003\000\
    \025\000\008\000\026\000\010\000\027\000\027\000\033\000\032\000\
    \027\000\007\000\255\255\035\000\255\255\255\255\255\255\036\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\255\255\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\255\255\
    \255\255\255\255\255\255\007\000\255\255\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\011\000\
    \011\000\030\000\030\000\011\000\255\255\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \030\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\011\000\255\255\255\255\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\255\255\255\255\255\255\255\255\011\000\255\255\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\015\000\015\000\255\255\255\255\015\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\002\000\004\000\255\255\007\000\026\000\255\255\255\255\
    \015\000\008\000\032\000\010\000\255\255\013\000\035\000\014\000\
    \018\000\019\000\036\000\023\000\255\255\015\000\024\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\255\255\255\255\255\255\255\255\
    \255\255\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\016\000\255\255\255\255\016\000\015\000\
    \255\255\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\255\255\255\255\255\255\016\000\016\000\
    \255\255\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\020\000\255\255\255\255\020\000\
    \016\000\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\255\255\255\255\255\255\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\255\255\255\255\021\000\
    \015\000\020\000\021\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\255\255\255\255\255\255\
    \255\255\255\255\021\000\255\255\255\255\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \255\255\016\000\255\255\255\255\021\000\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \028\000\028\000\255\255\255\255\028\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\028\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\020\000\255\255\255\255\255\255\255\255\255\255\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\255\255\255\255\255\255\255\255\028\000\255\255\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\031\000\255\255\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\021\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \255\255\255\255\255\255\255\255\031\000\255\255\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
    \002\000\000\000\000\000\114\000\043\000\003\000\004\000\229\000\
    \054\001\073\000\006\000\008\000\135\001\218\001\114\000\009\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\024\000\000\000\024\000\024\000\024\000\
    \059\000\000\000\084\000\084\000\084\000\098\000\000\000\127\000\
    \127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\008\000\008\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\000\000\000\000\000\000\000\000\015\000\
    \000\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\027\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
    \000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\000\000\000\000\000\000\
    \000\000\034\000\000\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\000\000\027\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \000\000\000\000\000\000\000\000\050\000\000\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \000\000\000\000\000\000\064\000\000\000\000\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\000\000\000\000\000\000\000\000\064\000\000\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\000\000\000\000\000\000\089\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\000\000\000\000\000\000\000\000\089\000\000\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\000\000\000\000\000\000\000\000\000\000\105\000\
    \000\000\000\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\000\000\000\000\000\000\
    \000\000\105\000\000\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\006\000\008\000\013\000\014\000\255\255\
    \018\000\014\000\019\000\023\000\024\000\019\000\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\255\255\255\255\255\255\255\255\007\000\
    \255\255\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\011\000\011\000\255\255\255\255\011\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\011\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000\
    \255\255\255\255\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\
    \255\255\011\000\255\255\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\255\255\015\000\015\000\
    \255\255\255\255\015\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\013\000\014\000\015\000\018\000\255\255\
    \019\000\023\000\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\015\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \016\000\255\255\255\255\016\000\015\000\255\255\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \255\255\255\255\255\255\016\000\255\255\255\255\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \255\255\255\255\011\000\255\255\255\255\255\255\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\020\000\255\255\255\255\020\000\016\000\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\020\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\021\000\015\000\020\000\021\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\255\255\021\000\
    \255\255\255\255\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\255\255\016\000\255\255\
    \255\255\021\000\255\255\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\021\000";
  Lexing.lex_code =
   "\255\008\255\007\255\006\255\255\007\255\006\255\008\255\255\012\
    \255\011\255\010\255\009\255\255\012\255\255\014\255\013\255\012\
    \255\255\012\255\010\255\009\255\011\255\255\002\012\000\008\001\
    \011\255\017\255\016\255\015\255\012\255\255\017\255\012\255\255\
    \012\255\016\255\015\255\017\255\255\002\014\003\016\000\007\001\
    \010\004\017\255\012\255\017\255\255\019\255\018\255\017\255\012\
    \255\255\019\255\017\255\012\255\255\019\255\018\255\012\255\017\
    \255\255\005\019\004\018\002\013\003\015\000\006\001\009\255\019\
    \255\012\255\017\255\255";
}

let rec token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 20 (-1); __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 266 "src/parsing/override_lexer.mll"
                                       s1
# 702 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 266 "src/parsing/override_lexer.mll"
                                                              s2
# 707 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(3)
and
# 266 "src/parsing/override_lexer.mll"
                                                                                s3
# 712 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(3) + 1) lexbuf.Lexing.lex_mem.(4)
and
# 266 "src/parsing/override_lexer.mll"
                                                                                                       s4
# 717 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(5) in
# 267 "src/parsing/override_lexer.mll"
    (
     incr_line_num lexbuf;
     incr_line_num lexbuf;
     if debug then 
       prerr_endline 
	 (Printf.sprintf "--> start-section1 ->[%s (%s dot %s)]" s1 s2 s3);
     reset_string_buffer ();
     code lexbuf;
     let str = get_stored_string() in
     if debug then prerr_endline (Printf.sprintf "<-- code2=[%s]" str);
     incr_lines lexbuf str;
     if s1 = "ignore" || s1 = "ignore-glob" || s1 = "import" then 
       (RULE2(s1, split_string (s2 ^ "." ^ s3 ^ s4 ^ " " ^ str)))
     else
       (RULE4(s1,s2,s3,str));
   )
# 736 "src/parsing/override_lexer.ml"

  | 1 ->
let
# 284 "src/parsing/override_lexer.mll"
                                       s1
# 742 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 284 "src/parsing/override_lexer.mll"
                                                             s2
# 747 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(3)
and
# 284 "src/parsing/override_lexer.mll"
                                                                                   rest
# 752 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(3) lexbuf.Lexing.lex_mem.(4) in
# 285 "src/parsing/override_lexer.mll"
    (
     incr_line_num lexbuf;
     incr_line_num lexbuf;
     if debug then 
       prerr_endline 
	 (Printf.sprintf "--> start-section2 ->[%s (%s) [%s]]" s1 s2 rest);
     reset_string_buffer ();
     code lexbuf;
     let str = get_stored_string() in
     if debug then prerr_endline (Printf.sprintf "<-- code3=[%s]" str);
     incr_lines lexbuf str;
     if s1 = "ignore" || s1 = "ignore-glob" || s1 = "import" then 
       (
	RULE2(s1, split_string (s2 ^ rest ^ " " ^ str))
       )
     else
       (
	RULE3(s1,s2,str)
       );
      )
# 775 "src/parsing/override_lexer.ml"

  | 2 ->
let
# 306 "src/parsing/override_lexer.mll"
                                       s
# 781 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 306 "src/parsing/override_lexer.mll"
                                                             s2
# 786 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_mem.(2) in
# 307 "src/parsing/override_lexer.mll"
    (
     incr_line_num lexbuf;
     incr_line_num lexbuf;
     if debug then 
       prerr_endline 
	 (Printf.sprintf "--> start-section3 ->[%s empty]" s);
     reset_string_buffer ();
     code lexbuf;
     let str = get_stored_string() in
     incr_lines lexbuf str;
     let str = 
       if s = "ignore" || s = "ignore-glob" || s = "import" then 
	 (
	  split_string (s2 ^ " " ^ str) 
	 )
       else
	 str in 
     if debug then prerr_endline (Printf.sprintf "<-- code4=[%s]" str);
     RULE2(s,str);
   )
# 809 "src/parsing/override_lexer.ml"

  | 3 ->
# 329 "src/parsing/override_lexer.mll"
    (
     (* this can happen if file is ended by an empty %% 
      * we add this rule to avoid infinite loop on next one 
      *)
     EOF
   )
# 819 "src/parsing/override_lexer.ml"

  | 4 ->
let
# 336 "src/parsing/override_lexer.mll"
                 s
# 825 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 337 "src/parsing/override_lexer.mll"
    (
     push_back lexbuf '%';
     push_back lexbuf '%';
     incr_lines lexbuf s;
     if debug then prerr_endline (Printf.sprintf "<-- start=[%s]" s);
     RULE2("start",s);
   )
# 835 "src/parsing/override_lexer.ml"

  | 5 ->
# 346 "src/parsing/override_lexer.mll"
    (
     EOF
   )
# 842 "src/parsing/override_lexer.ml"

  | 6 ->
# 350 "src/parsing/override_lexer.mll"
    ( 
      prerr_endline (Printf.sprintf "autre");
      error
        (Illegal_character (Lexing.lexeme_char lexbuf 0),
         lexbuf.lex_start_p,
         lexbuf.lex_curr_p) )
# 852 "src/parsing/override_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and items lexbuf =
   __ocaml_lex_items_rec lexbuf 28
and __ocaml_lex_items_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 358 "src/parsing/override_lexer.mll"
             s
# 865 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 359 "src/parsing/override_lexer.mll"
    (
     if debug then 
       prerr_endline 
	 (Printf.sprintf "--> NAME ->[%s]" s );
     NAME(s)
   )
# 874 "src/parsing/override_lexer.ml"

  | 1 ->
# 366 "src/parsing/override_lexer.mll"
    (
     if debug then 
       prerr_endline 
	 (Printf.sprintf "--> blank" );
     token lexbuf
   )
# 884 "src/parsing/override_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_items_rec lexbuf __ocaml_lex_state

and code lexbuf =
   __ocaml_lex_code_rec lexbuf 32
and __ocaml_lex_code_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 380 "src/parsing/override_lexer.mll"
                  s
# 897 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 381 "src/parsing/override_lexer.mll"
      (
        if debug then 
	 prerr_endline 
	    (Printf.sprintf "get code up to end of file");
       store_string s;
     )
# 906 "src/parsing/override_lexer.ml"

  | 1 ->
let
# 388 "src/parsing/override_lexer.mll"
                  s
# 912 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 389 "src/parsing/override_lexer.mll"
      (
       if debug then 
	 prerr_endline 
	   (Printf.sprintf "stop code at start of a potential new section");
       store_string s; 

       if String.length s = 0 || s.[(String.length s) - 1] = '\n' then 
	 (
	  if debug then  prerr_endline 
	      (Printf.sprintf "real end of code found ");
	  push_back lexbuf '%';
	  push_back lexbuf '%';
	 )
       else
	 ( 
	   if debug then prerr_endline 
	       (Printf.sprintf "the two percent were inside the code");
	   store_string_char '%';
	   store_string_char '%';
	   code lexbuf;
	  );
     )
# 937 "src/parsing/override_lexer.ml"

  | 2 ->
let
# 411 "src/parsing/override_lexer.mll"
                     s
# 943 "src/parsing/override_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 412 "src/parsing/override_lexer.mll"
      (
       if debug then 
	 prerr_endline 
	   (Printf.sprintf "stop at %% store string and go on");
       store_string s;
       code lexbuf;
     )
# 953 "src/parsing/override_lexer.ml"

  | 3 ->
# 421 "src/parsing/override_lexer.mll"
      (
       if debug then 
	 prerr_endline 
	   (Printf.sprintf "end of file " );
       )
# 962 "src/parsing/override_lexer.ml"

  | 4 ->
# 427 "src/parsing/override_lexer.mll"
      ( 
	if debug then prerr_endline 
	    (Printf.sprintf "store one character");
	store_string_char(Lexing.lexeme_char lexbuf 0);
        code lexbuf 
      )
# 972 "src/parsing/override_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_code_rec lexbuf __ocaml_lex_state

;;

# 434 "src/parsing/override_lexer.mll"
 

(* zone for extra functions *)

(*
 Local Variables:
  compile-command: "cd ../..; make"
  End:
*)


# 991 "src/parsing/override_lexer.ml"
