;; -*- scheme -*-
;; object definitions ...

;; a structure encapsulated in a Nsp object

(define-structref gvarianttype
  (in-module "Nsp")
  (parent "Object")
  (c-name "GVariantType")
  (gtype-id "gvarianttype")
)

(define-objectref GVariantType
  (in-module "Nsp")
  (parent "Object")
  (c-name "NspGVariantType")
  (fields
   '("GVariantType*" "value" "hidden" "-1" )
  )
  (gtype-id "gvarianttype")
)

(define-structref gvariant
  (in-module "Nsp")
  (parent "Object")
  (c-name "GVariant")
  (gtype-id "gvariant")
)

(define-objectref GVariant
  (in-module "Nsp")
  (parent "Object")
  (c-name "NspGVariant")
  (fields
   '("GVariant*" "value" "hidden" "-1" )
  )
  (gtype-id "gvariant")
)




;; Enumerations and flags ...

;; (define-enum GBookmarkFileError
;;   (in-module "GBookmark")
;;   (c-name "GBookmarkFileError")
;;   (gtype-id "G_TYPE_BOOKMARK_FILE_ERROR")
;;   (values
;;     '("invalid-uri" "G_BOOKMARK_FILE_ERROR_INVALID_URI")
;;     '("invalid-value" "G_BOOKMARK_FILE_ERROR_INVALID_VALUE")
;;     '("app-not-registered" "G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED")
;;     '("uri-not-found" "G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND")
;;     '("read" "G_BOOKMARK_FILE_ERROR_READ")
;;     '("unknown-encoding" "G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING")
;;     '("write" "G_BOOKMARK_FILE_ERROR_WRITE")
;;     '("file-not-found" "G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND")
;;   )
;; )

;; (define-enum GChecksumType
;;   (in-module "GChecksum")
;;   (c-name "GChecksumType")
;;   (gtype-id "G_TYPE_CHECKSUM_TYPE")
;;   (values
;;     '("md5" "G_CHECKSUM_MD5")
;;     '("sha1" "G_CHECKSUM_SHA1")
;;     '("sha256" "G_CHECKSUM_SHA256")
;;     '("sha512" "G_CHECKSUM_SHA512")
;;   )
;; )

;; (define-enum GConvertError
;;   (in-module "GConvert")
;;   (c-name "GConvertError")
;;   (gtype-id "G_TYPE_CONVERT_ERROR")
;;   (values
;;     '("no-conversion" "G_CONVERT_ERROR_NO_CONVERSION")
;;     '("illegal-sequence" "G_CONVERT_ERROR_ILLEGAL_SEQUENCE")
;;     '("failed" "G_CONVERT_ERROR_FAILED")
;;     '("partial-input" "G_CONVERT_ERROR_PARTIAL_INPUT")
;;     '("bad-uri" "G_CONVERT_ERROR_BAD_URI")
;;     '("not-absolute-path" "G_CONVERT_ERROR_NOT_ABSOLUTE_PATH")
;;     '("no-memory" "G_CONVERT_ERROR_NO_MEMORY")
;;   )
;; )

;; (define-enum GDateDMY
;;   (in-module "GDate")
;;   (c-name "GDateDMY")
;;   (gtype-id "G_TYPE_DATE_DMY")
;;   (values
;;     '("day" "G_DATE_DAY")
;;     '("month" "G_DATE_MONTH")
;;     '("year" "G_DATE_YEAR")
;;   )
;; )

;; (define-enum GDateWeekday
;;   (in-module "GDate")
;;   (c-name "GDateWeekday")
;;   (gtype-id "G_TYPE_DATE_WEEKDAY")
;;   (values
;;     '("bad-weekday" "G_DATE_BAD_WEEKDAY")
;;     '("monday" "G_DATE_MONDAY")
;;     '("tuesday" "G_DATE_TUESDAY")
;;     '("wednesday" "G_DATE_WEDNESDAY")
;;     '("thursday" "G_DATE_THURSDAY")
;;     '("friday" "G_DATE_FRIDAY")
;;     '("saturday" "G_DATE_SATURDAY")
;;     '("sunday" "G_DATE_SUNDAY")
;;   )
;; )

;; (define-enum GDateMonth
;;   (in-module "GDate")
;;   (c-name "GDateMonth")
;;   (gtype-id "G_TYPE_DATE_MONTH")
;;   (values
;;     '("bad-month" "G_DATE_BAD_MONTH")
;;     '("january" "G_DATE_JANUARY")
;;     '("february" "G_DATE_FEBRUARY")
;;     '("march" "G_DATE_MARCH")
;;     '("april" "G_DATE_APRIL")
;;     '("may" "G_DATE_MAY")
;;     '("june" "G_DATE_JUNE")
;;     '("july" "G_DATE_JULY")
;;     '("august" "G_DATE_AUGUST")
;;     '("september" "G_DATE_SEPTEMBER")
;;     '("october" "G_DATE_OCTOBER")
;;     '("november" "G_DATE_NOVEMBER")
;;     '("december" "G_DATE_DECEMBER")
;;   )
;; )

;; (define-enum GFileError
;;   (in-module "GFile")
;;   (c-name "GFileError")
;;   (gtype-id "G_TYPE_FILE_ERROR")
;;   (values
;;     '("exist" "G_FILE_ERROR_EXIST")
;;     '("isdir" "G_FILE_ERROR_ISDIR")
;;     '("acces" "G_FILE_ERROR_ACCES")
;;     '("nametoolong" "G_FILE_ERROR_NAMETOOLONG")
;;     '("noent" "G_FILE_ERROR_NOENT")
;;     '("notdir" "G_FILE_ERROR_NOTDIR")
;;     '("nxio" "G_FILE_ERROR_NXIO")
;;     '("nodev" "G_FILE_ERROR_NODEV")
;;     '("rofs" "G_FILE_ERROR_ROFS")
;;     '("txtbsy" "G_FILE_ERROR_TXTBSY")
;;     '("fault" "G_FILE_ERROR_FAULT")
;;     '("loop" "G_FILE_ERROR_LOOP")
;;     '("nospc" "G_FILE_ERROR_NOSPC")
;;     '("nomem" "G_FILE_ERROR_NOMEM")
;;     '("mfile" "G_FILE_ERROR_MFILE")
;;     '("nfile" "G_FILE_ERROR_NFILE")
;;     '("badf" "G_FILE_ERROR_BADF")
;;     '("inval" "G_FILE_ERROR_INVAL")
;;     '("pipe" "G_FILE_ERROR_PIPE")
;;     '("again" "G_FILE_ERROR_AGAIN")
;;     '("intr" "G_FILE_ERROR_INTR")
;;     '("io" "G_FILE_ERROR_IO")
;;     '("perm" "G_FILE_ERROR_PERM")
;;     '("nosys" "G_FILE_ERROR_NOSYS")
;;     '("failed" "G_FILE_ERROR_FAILED")
;;   )
;; )

;; (define-flags GFileTest
;;   (in-module "GFile")
;;   (c-name "GFileTest")
;;   (gtype-id "G_TYPE_FILE_TEST")
;;   (values
;;     '("is-regular" "G_FILE_TEST_IS_REGULAR")
;;     '("is-symlink" "G_FILE_TEST_IS_SYMLINK")
;;     '("is-dir" "G_FILE_TEST_IS_DIR")
;;     '("is-executable" "G_FILE_TEST_IS_EXECUTABLE")
;;     '("exists" "G_FILE_TEST_EXISTS")
;;   )
;; )

;; (define-flags GHookFlagMask
;;   (in-module "GHook")
;;   (c-name "GHookFlagMask")
;;   (gtype-id "G_TYPE_HOOK_FLAG_MASK")
;;   (values
;;     '("active" "G_HOOK_FLAG_ACTIVE")
;;     '("in-call" "G_HOOK_FLAG_IN_CALL")
;;     '("mask" "G_HOOK_FLAG_MASK")
;;   )
;; )

;; (define-enum GIOError
;;   (in-module "GIOErro")
;;   (c-name "GIOError")
;;   (gtype-id "G_TYPE_IO_ERROR")
;;   (values
;;     '("none" "G_IO_ERROR_NONE")
;;     '("again" "G_IO_ERROR_AGAIN")
;;     '("inval" "G_IO_ERROR_INVAL")
;;     '("unknown" "G_IO_ERROR_UNKNOWN")
;;   )
;; )

;; (define-enum GIOChannelError
;;   (in-module "GIOChannel")
;;   (c-name "GIOChannelError")
;;   (gtype-id "G_TYPE_IO_CHANNEL_ERROR")
;;   (values
;;     '("fbig" "G_IO_CHANNEL_ERROR_FBIG")
;;     '("inval" "G_IO_CHANNEL_ERROR_INVAL")
;;     '("io" "G_IO_CHANNEL_ERROR_IO")
;;     '("isdir" "G_IO_CHANNEL_ERROR_ISDIR")
;;     '("nospc" "G_IO_CHANNEL_ERROR_NOSPC")
;;     '("nxio" "G_IO_CHANNEL_ERROR_NXIO")
;;     '("overflow" "G_IO_CHANNEL_ERROR_OVERFLOW")
;;     '("pipe" "G_IO_CHANNEL_ERROR_PIPE")
;;     '("failed" "G_IO_CHANNEL_ERROR_FAILED")
;;   )
;; )

;; (define-enum GIOStatus
;;   (in-module "GIOStatu")
;;   (c-name "GIOStatus")
;;   (gtype-id "G_TYPE_IO_STATUS")
;;   (values
;;     '("error" "G_IO_STATUS_ERROR")
;;     '("normal" "G_IO_STATUS_NORMAL")
;;     '("eof" "G_IO_STATUS_EOF")
;;     '("again" "G_IO_STATUS_AGAIN")
;;   )
;; )

;; (define-enum GSeekType
;;   (in-module "GSeek")
;;   (c-name "GSeekType")
;;   (gtype-id "G_TYPE_SEEK_TYPE")
;;   (values
;;     '("cur" "G_SEEK_CUR")
;;     '("set" "G_SEEK_SET")
;;     '("end" "G_SEEK_END")
;;   )
;; )

;; (define-flags GIOFlags
;;   (in-module "GIOFlag")
;;   (c-name "GIOFlags")
;;   (gtype-id "G_TYPE_IO_FLAGS")
;;   (values
;;     '("append" "G_IO_FLAG_APPEND")
;;     '("nonblock" "G_IO_FLAG_NONBLOCK")
;;     '("is-readable" "G_IO_FLAG_IS_READABLE")
;;     '("is-writable" "G_IO_FLAG_IS_WRITABLE")
;;     '("is-writeable" "G_IO_FLAG_IS_WRITEABLE")
;;     '("is-seekable" "G_IO_FLAG_IS_SEEKABLE")
;;     '("mask" "G_IO_FLAG_MASK")
;;     '("get-mask" "G_IO_FLAG_GET_MASK")
;;     '("set-mask" "G_IO_FLAG_SET_MASK")
;;   )
;; )

;; (define-enum GKeyFileError
;;   (in-module "GKey")
;;   (c-name "GKeyFileError")
;;   (gtype-id "G_TYPE_KEY_FILE_ERROR")
;;   (values
;;     '("unknown-encoding" "G_KEY_FILE_ERROR_UNKNOWN_ENCODING")
;;     '("parse" "G_KEY_FILE_ERROR_PARSE")
;;     '("not-found" "G_KEY_FILE_ERROR_NOT_FOUND")
;;     '("key-not-found" "G_KEY_FILE_ERROR_KEY_NOT_FOUND")
;;     '("group-not-found" "G_KEY_FILE_ERROR_GROUP_NOT_FOUND")
;;     '("invalid-value" "G_KEY_FILE_ERROR_INVALID_VALUE")
;;   )
;; )

;; (define-flags GKeyFileFlags
;;   (in-module "GKey")
;;   (c-name "GKeyFileFlags")
;;   (gtype-id "G_TYPE_KEY_FILE_FLAGS")
;;   (values
;;     '("none" "G_KEY_FILE_NONE")
;;     '("keep-comments" "G_KEY_FILE_KEEP_COMMENTS")
;;     '("keep-translations" "G_KEY_FILE_KEEP_TRANSLATIONS")
;;   )
;; )

(define-flags GIOCondition
  (in-module "GIOConditio")
  (c-name "GIOCondition")
  (gtype-id "G_TYPE_IO_CONDITION")
  (values
    '("in" "G_IO_IN")
    '("out" "G_IO_OUT")
    '("pri" "G_IO_PRI")
    '("err" "G_IO_ERR")
    '("hup" "G_IO_HUP")
    '("nval" "G_IO_NVAL")
  )
)

;; (define-enum GMarkupError
;;   (in-module "GMarkup")
;;   (c-name "GMarkupError")
;;   (gtype-id "G_TYPE_MARKUP_ERROR")
;;   (values
;;     '("bad-utf8" "G_MARKUP_ERROR_BAD_UTF8")
;;     '("empty" "G_MARKUP_ERROR_EMPTY")
;;     '("parse" "G_MARKUP_ERROR_PARSE")
;;     '("unknown-element" "G_MARKUP_ERROR_UNKNOWN_ELEMENT")
;;     '("unknown-attribute" "G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE")
;;     '("invalid-content" "G_MARKUP_ERROR_INVALID_CONTENT")
;;     '("missing-attribute" "G_MARKUP_ERROR_MISSING_ATTRIBUTE")
;;   )
;; )

;; (define-flags GMarkupParseFlags
;;   (in-module "GMarkup")
;;   (c-name "GMarkupParseFlags")
;;   (gtype-id "G_TYPE_MARKUP_PARSE_FLAGS")
;;   (values
;;     '("do-not-use-this-unsupported-flag" "G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG")
;;     '("treat-cdata-as-text" "G_MARKUP_TREAT_CDATA_AS_TEXT")
;;     '("prefix-error-position" "G_MARKUP_PREFIX_ERROR_POSITION")
;;     '("ignore-qualified" "G_MARKUP_IGNORE_QUALIFIED")
;;   )
;; )

;; (define-flags GMarkupCollectType
;;   (in-module "GMarkup")
;;   (c-name "GMarkupCollectType")
;;   (gtype-id "G_TYPE_MARKUP_COLLECT_TYPE")
;;   (values
;;     '("invalid" "G_MARKUP_COLLECT_INVALID")
;;     '("string" "G_MARKUP_COLLECT_STRING")
;;     '("strdup" "G_MARKUP_COLLECT_STRDUP")
;;     '("boolean" "G_MARKUP_COLLECT_BOOLEAN")
;;     '("tristate" "G_MARKUP_COLLECT_TRISTATE")
;;     '("optional" "G_MARKUP_COLLECT_OPTIONAL")
;;   )
;; )

;; (define-flags GLogLevelFlags
;;   (in-module "GLog")
;;   (c-name "GLogLevelFlags")
;;   (gtype-id "G_TYPE_LOG_LEVEL_FLAGS")
;;   (values
;;     '("flag-recursion" "G_LOG_FLAG_RECURSION")
;;     '("flag-fatal" "G_LOG_FLAG_FATAL")
;;     '("level-error" "G_LOG_LEVEL_ERROR")
;;     '("level-critical" "G_LOG_LEVEL_CRITICAL")
;;     '("level-warning" "G_LOG_LEVEL_WARNING")
;;     '("level-message" "G_LOG_LEVEL_MESSAGE")
;;     '("level-info" "G_LOG_LEVEL_INFO")
;;     '("level-debug" "G_LOG_LEVEL_DEBUG")
;;     '("level-mask" "G_LOG_LEVEL_MASK")
;;   )
;; )

;; (define-flags GTraverseFlags
;;   (in-module "GTraverse")
;;   (c-name "GTraverseFlags")
;;   (gtype-id "G_TYPE_TRAVERSE_FLAGS")
;;   (values
;;     '("leaves" "G_TRAVERSE_LEAVES")
;;     '("non-leaves" "G_TRAVERSE_NON_LEAVES")
;;     '("all" "G_TRAVERSE_ALL")
;;     '("mask" "G_TRAVERSE_MASK")
;;     '("leafs" "G_TRAVERSE_LEAFS")
;;     '("non-leafs" "G_TRAVERSE_NON_LEAFS")
;;   )
;; )

;; (define-enum GTraverseType
;;   (in-module "GTraverse")
;;   (c-name "GTraverseType")
;;   (gtype-id "G_TYPE_TRAVERSE_TYPE")
;;   (values
;;     '("in-order" "G_IN_ORDER")
;;     '("pre-order" "G_PRE_ORDER")
;;     '("post-order" "G_POST_ORDER")
;;     '("level-order" "G_LEVEL_ORDER")
;;   )
;; )

;; (define-flags GOptionFlags
;;   (in-module "GOption")
;;   (c-name "GOptionFlags")
;;   (gtype-id "G_TYPE_OPTION_FLAGS")
;;   (values
;;     '("hidden" "G_OPTION_FLAG_HIDDEN")
;;     '("in-main" "G_OPTION_FLAG_IN_MAIN")
;;     '("reverse" "G_OPTION_FLAG_REVERSE")
;;     '("no-arg" "G_OPTION_FLAG_NO_ARG")
;;     '("filename" "G_OPTION_FLAG_FILENAME")
;;     '("optional-arg" "G_OPTION_FLAG_OPTIONAL_ARG")
;;     '("noalias" "G_OPTION_FLAG_NOALIAS")
;;   )
;; )

;; (define-enum GOptionArg
;;   (in-module "GOption")
;;   (c-name "GOptionArg")
;;   (gtype-id "G_TYPE_OPTION_ARG")
;;   (values
;;     '("none" "G_OPTION_ARG_NONE")
;;     '("string" "G_OPTION_ARG_STRING")
;;     '("int" "G_OPTION_ARG_INT")
;;     '("callback" "G_OPTION_ARG_CALLBACK")
;;     '("filename" "G_OPTION_ARG_FILENAME")
;;     '("string-array" "G_OPTION_ARG_STRING_ARRAY")
;;     '("filename-array" "G_OPTION_ARG_FILENAME_ARRAY")
;;     '("double" "G_OPTION_ARG_DOUBLE")
;;     '("int64" "G_OPTION_ARG_INT64")
;;   )
;; )

;; (define-enum GOptionError
;;   (in-module "GOption")
;;   (c-name "GOptionError")
;;   (gtype-id "G_TYPE_OPTION_ERROR")
;;   (values
;;     '("unknown-option" "G_OPTION_ERROR_UNKNOWN_OPTION")
;;     '("bad-value" "G_OPTION_ERROR_BAD_VALUE")
;;     '("failed" "G_OPTION_ERROR_FAILED")
;;   )
;; )

;; (define-enum GRegexError
;;   (in-module "GRegex")
;;   (c-name "GRegexError")
;;   (gtype-id "G_TYPE_REGEX_ERROR")
;;   (values
;;     '("compile" "G_REGEX_ERROR_COMPILE")
;;     '("optimize" "G_REGEX_ERROR_OPTIMIZE")
;;     '("replace" "G_REGEX_ERROR_REPLACE")
;;     '("match" "G_REGEX_ERROR_MATCH")
;;     '("internal" "G_REGEX_ERROR_INTERNAL")
;;     '("stray-backslash" "G_REGEX_ERROR_STRAY_BACKSLASH")
;;     '("missing-control-char" "G_REGEX_ERROR_MISSING_CONTROL_CHAR")
;;     '("unrecognized-escape" "G_REGEX_ERROR_UNRECOGNIZED_ESCAPE")
;;     '("quantifiers-out-of-order" "G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER")
;;     '("quantifier-too-big" "G_REGEX_ERROR_QUANTIFIER_TOO_BIG")
;;     '("unterminated-character-class" "G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS")
;;     '("invalid-escape-in-character-class" "G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS")
;;     '("range-out-of-order" "G_REGEX_ERROR_RANGE_OUT_OF_ORDER")
;;     '("nothing-to-repeat" "G_REGEX_ERROR_NOTHING_TO_REPEAT")
;;     '("unrecognized-character" "G_REGEX_ERROR_UNRECOGNIZED_CHARACTER")
;;     '("posix-named-class-outside-class" "G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS")
;;     '("unmatched-parenthesis" "G_REGEX_ERROR_UNMATCHED_PARENTHESIS")
;;     '("inexistent-subpattern-reference" "G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE")
;;     '("unterminated-comment" "G_REGEX_ERROR_UNTERMINATED_COMMENT")
;;     '("expression-too-large" "G_REGEX_ERROR_EXPRESSION_TOO_LARGE")
;;     '("memory-error" "G_REGEX_ERROR_MEMORY_ERROR")
;;     '("variable-length-lookbehind" "G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND")
;;     '("malformed-condition" "G_REGEX_ERROR_MALFORMED_CONDITION")
;;     '("too-many-conditional-branches" "G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES")
;;     '("assertion-expected" "G_REGEX_ERROR_ASSERTION_EXPECTED")
;;     '("unknown-posix-class-name" "G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME")
;;     '("posix-collating-elements-not-supported" "G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED")
;;     '("hex-code-too-large" "G_REGEX_ERROR_HEX_CODE_TOO_LARGE")
;;     '("invalid-condition" "G_REGEX_ERROR_INVALID_CONDITION")
;;     '("single-byte-match-in-lookbehind" "G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND")
;;     '("infinite-loop" "G_REGEX_ERROR_INFINITE_LOOP")
;;     '("missing-subpattern-name-terminator" "G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR")
;;     '("duplicate-subpattern-name" "G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME")
;;     '("malformed-property" "G_REGEX_ERROR_MALFORMED_PROPERTY")
;;     '("unknown-property" "G_REGEX_ERROR_UNKNOWN_PROPERTY")
;;     '("subpattern-name-too-long" "G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG")
;;     '("too-many-subpatterns" "G_REGEX_ERROR_TOO_MANY_SUBPATTERNS")
;;     '("invalid-octal-value" "G_REGEX_ERROR_INVALID_OCTAL_VALUE")
;;     '("too-many-branches-in-define" "G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE")
;;     '("define-repetion" "G_REGEX_ERROR_DEFINE_REPETION")
;;     '("inconsistent-newline-options" "G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS")
;;     '("missing-back-reference" "G_REGEX_ERROR_MISSING_BACK_REFERENCE")
;;     '("invalid-relative-reference" "G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE")
;;     '("backtracking-control-verb-argument-forbidden" "G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN")
;;     '("unknown-backtracking-control-verb" "G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB")
;;     '("number-too-big" "G_REGEX_ERROR_NUMBER_TOO_BIG")
;;     '("missing-subpattern-name" "G_REGEX_ERROR_MISSING_SUBPATTERN_NAME")
;;     '("missing-digit" "G_REGEX_ERROR_MISSING_DIGIT")
;;     '("invalid-data-character" "G_REGEX_ERROR_INVALID_DATA_CHARACTER")
;;     '("extra-subpattern-name" "G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME")
;;     '("backtracking-control-verb-argument-required" "G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED")
;;     '("invalid-control-char" "G_REGEX_ERROR_INVALID_CONTROL_CHAR")
;;     '("missing-name" "G_REGEX_ERROR_MISSING_NAME")
;;     '("not-supported-in-class" "G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS")
;;     '("too-many-forward-references" "G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES")
;;     '("name-too-long" "G_REGEX_ERROR_NAME_TOO_LONG")
;;     '("character-value-too-large" "G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE")
;;   )
;; )

;; (define-flags GRegexCompileFlags
;;   (in-module "GRegex")
;;   (c-name "GRegexCompileFlags")
;;   (gtype-id "G_TYPE_REGEX_COMPILE_FLAGS")
;;   (values
;;     '("caseless" "G_REGEX_CASELESS")
;;     '("multiline" "G_REGEX_MULTILINE")
;;     '("dotall" "G_REGEX_DOTALL")
;;     '("extended" "G_REGEX_EXTENDED")
;;     '("anchored" "G_REGEX_ANCHORED")
;;     '("dollar-endonly" "G_REGEX_DOLLAR_ENDONLY")
;;     '("ungreedy" "G_REGEX_UNGREEDY")
;;     '("raw" "G_REGEX_RAW")
;;     '("no-auto-capture" "G_REGEX_NO_AUTO_CAPTURE")
;;     '("optimize" "G_REGEX_OPTIMIZE")
;;     '("firstline" "G_REGEX_FIRSTLINE")
;;     '("dupnames" "G_REGEX_DUPNAMES")
;;     '("newline-cr" "G_REGEX_NEWLINE_CR")
;;     '("newline-lf" "G_REGEX_NEWLINE_LF")
;;     '("newline-crlf" "G_REGEX_NEWLINE_CRLF")
;;     '("newline-anycrlf" "G_REGEX_NEWLINE_ANYCRLF")
;;     '("bsr-anycrlf" "G_REGEX_BSR_ANYCRLF")
;;     '("javascript-compat" "G_REGEX_JAVASCRIPT_COMPAT")
;;   )
;; )

;; (define-flags GRegexMatchFlags
;;   (in-module "GRegex")
;;   (c-name "GRegexMatchFlags")
;;   (gtype-id "G_TYPE_REGEX_MATCH_FLAGS")
;;   (values
;;     '("anchored" "G_REGEX_MATCH_ANCHORED")
;;     '("notbol" "G_REGEX_MATCH_NOTBOL")
;;     '("noteol" "G_REGEX_MATCH_NOTEOL")
;;     '("notempty" "G_REGEX_MATCH_NOTEMPTY")
;;     '("partial" "G_REGEX_MATCH_PARTIAL")
;;     '("newline-cr" "G_REGEX_MATCH_NEWLINE_CR")
;;     '("newline-lf" "G_REGEX_MATCH_NEWLINE_LF")
;;     '("newline-crlf" "G_REGEX_MATCH_NEWLINE_CRLF")
;;     '("newline-any" "G_REGEX_MATCH_NEWLINE_ANY")
;;     '("newline-anycrlf" "G_REGEX_MATCH_NEWLINE_ANYCRLF")
;;     '("bsr-anycrlf" "G_REGEX_MATCH_BSR_ANYCRLF")
;;     '("bsr-any" "G_REGEX_MATCH_BSR_ANY")
;;     '("partial-soft" "G_REGEX_MATCH_PARTIAL_SOFT")
;;     '("partial-hard" "G_REGEX_MATCH_PARTIAL_HARD")
;;     '("notempty-atstart" "G_REGEX_MATCH_NOTEMPTY_ATSTART")
;;   )
;; )

;; (define-enum GErrorType
;;   (in-module "GError")
;;   (c-name "GErrorType")
;;   (gtype-id "G_TYPE_ERROR_TYPE")
;;   (values
;;     '("unknown" "G_ERR_UNKNOWN")
;;     '("unexp-eof" "G_ERR_UNEXP_EOF")
;;     '("unexp-eof-in-string" "G_ERR_UNEXP_EOF_IN_STRING")
;;     '("unexp-eof-in-comment" "G_ERR_UNEXP_EOF_IN_COMMENT")
;;     '("non-digit-in-const" "G_ERR_NON_DIGIT_IN_CONST")
;;     '("digit-radix" "G_ERR_DIGIT_RADIX")
;;     '("float-radix" "G_ERR_FLOAT_RADIX")
;;     '("float-malformed" "G_ERR_FLOAT_MALFORMED")
;;   )
;; )

;; (define-enum GShellError
;;   (in-module "GShell")
;;   (c-name "GShellError")
;;   (gtype-id "G_TYPE_SHELL_ERROR")
;;   (values
;;     '("bad-quoting" "G_SHELL_ERROR_BAD_QUOTING")
;;     '("empty-string" "G_SHELL_ERROR_EMPTY_STRING")
;;     '("failed" "G_SHELL_ERROR_FAILED")
;;   )
;; )

;; (define-enum GSliceConfig
;;   (in-module "GSlice")
;;   (c-name "GSliceConfig")
;;   (gtype-id "G_TYPE_SLICE_CONFIG")
;;   (values
;;     '("always-malloc" "G_SLICE_CONFIG_ALWAYS_MALLOC")
;;     '("bypass-magazines" "G_SLICE_CONFIG_BYPASS_MAGAZINES")
;;     '("working-set-msecs" "G_SLICE_CONFIG_WORKING_SET_MSECS")
;;     '("color-increment" "G_SLICE_CONFIG_COLOR_INCREMENT")
;;     '("chunk-sizes" "G_SLICE_CONFIG_CHUNK_SIZES")
;;     '("contention-counter" "G_SLICE_CONFIG_CONTENTION_COUNTER")
;;   )
;; )

;; (define-enum GSpawnError
;;   (in-module "GSpawn")
;;   (c-name "GSpawnError")
;;   (gtype-id "G_TYPE_SPAWN_ERROR")
;;   (values
;;     '("fork" "G_SPAWN_ERROR_FORK")
;;     '("read" "G_SPAWN_ERROR_READ")
;;     '("chdir" "G_SPAWN_ERROR_CHDIR")
;;     '("acces" "G_SPAWN_ERROR_ACCES")
;;     '("perm" "G_SPAWN_ERROR_PERM")
;;     '("too-big" "G_SPAWN_ERROR_TOO_BIG")
;;     '("2big" "G_SPAWN_ERROR_2BIG")
;;     '("noexec" "G_SPAWN_ERROR_NOEXEC")
;;     '("nametoolong" "G_SPAWN_ERROR_NAMETOOLONG")
;;     '("noent" "G_SPAWN_ERROR_NOENT")
;;     '("nomem" "G_SPAWN_ERROR_NOMEM")
;;     '("notdir" "G_SPAWN_ERROR_NOTDIR")
;;     '("loop" "G_SPAWN_ERROR_LOOP")
;;     '("txtbusy" "G_SPAWN_ERROR_TXTBUSY")
;;     '("io" "G_SPAWN_ERROR_IO")
;;     '("nfile" "G_SPAWN_ERROR_NFILE")
;;     '("mfile" "G_SPAWN_ERROR_MFILE")
;;     '("inval" "G_SPAWN_ERROR_INVAL")
;;     '("isdir" "G_SPAWN_ERROR_ISDIR")
;;     '("libbad" "G_SPAWN_ERROR_LIBBAD")
;;     '("failed" "G_SPAWN_ERROR_FAILED")
;;   )
;; )

;; (define-flags GSpawnFlags
;;   (in-module "GSpawn")
;;   (c-name "GSpawnFlags")
;;   (gtype-id "G_TYPE_SPAWN_FLAGS")
;;   (values
;;     '("default" "G_SPAWN_DEFAULT")
;;     '("leave-descriptors-open" "G_SPAWN_LEAVE_DESCRIPTORS_OPEN")
;;     '("do-not-reap-child" "G_SPAWN_DO_NOT_REAP_CHILD")
;;     '("search-path" "G_SPAWN_SEARCH_PATH")
;;     '("stdout-to-dev-null" "G_SPAWN_STDOUT_TO_DEV_NULL")
;;     '("stderr-to-dev-null" "G_SPAWN_STDERR_TO_DEV_NULL")
;;     '("child-inherits-stdin" "G_SPAWN_CHILD_INHERITS_STDIN")
;;     '("file-and-argv-zero" "G_SPAWN_FILE_AND_ARGV_ZERO")
;;     '("search-path-from-envp" "G_SPAWN_SEARCH_PATH_FROM_ENVP")
;;     '("cloexec-pipes" "G_SPAWN_CLOEXEC_PIPES")
;;   )
;; )

;; (define-flags GAsciiType
;;   (in-module "GAscii")
;;   (c-name "GAsciiType")
;;   (gtype-id "G_TYPE_ASCII_TYPE")
;;   (values
;;     '("alnum" "G_ASCII_ALNUM")
;;     '("alpha" "G_ASCII_ALPHA")
;;     '("cntrl" "G_ASCII_CNTRL")
;;     '("digit" "G_ASCII_DIGIT")
;;     '("graph" "G_ASCII_GRAPH")
;;     '("lower" "G_ASCII_LOWER")
;;     '("print" "G_ASCII_PRINT")
;;     '("punct" "G_ASCII_PUNCT")
;;     '("space" "G_ASCII_SPACE")
;;     '("upper" "G_ASCII_UPPER")
;;     '("xdigit" "G_ASCII_XDIGIT")
;;   )
;; )

;; (define-flags GTestTrapFlags
;;   (in-module "GTest")
;;   (c-name "GTestTrapFlags")
;;   (gtype-id "G_TYPE_TEST_TRAP_FLAGS")
;;   (values
;;     '("silence-stdout" "G_TEST_TRAP_SILENCE_STDOUT")
;;     '("silence-stderr" "G_TEST_TRAP_SILENCE_STDERR")
;;     '("inherit-stdin" "G_TEST_TRAP_INHERIT_STDIN")
;;   )
;; )

;; (define-flags GTestSubprocessFlags
;;   (in-module "GTest")
;;   (c-name "GTestSubprocessFlags")
;;   (gtype-id "G_TYPE_TEST_SUBPROCESS_FLAGS")
;;   (values
;;     '("stdin" "G_TEST_SUBPROCESS_INHERIT_STDIN")
;;     '("stdout" "G_TEST_SUBPROCESS_INHERIT_STDOUT")
;;     '("stderr" "G_TEST_SUBPROCESS_INHERIT_STDERR")
;;   )
;; )

;; (define-enum GTestLogType
;;   (in-module "GTest")
;;   (c-name "GTestLogType")
;;   (gtype-id "G_TYPE_TEST_LOG_TYPE")
;;   (values
;;     '("none" "G_TEST_LOG_NONE")
;;     '("error" "G_TEST_LOG_ERROR")
;;     '("start-binary" "G_TEST_LOG_START_BINARY")
;;     '("list-case" "G_TEST_LOG_LIST_CASE")
;;     '("skip-case" "G_TEST_LOG_SKIP_CASE")
;;     '("start-case" "G_TEST_LOG_START_CASE")
;;     '("stop-case" "G_TEST_LOG_STOP_CASE")
;;     '("min-result" "G_TEST_LOG_MIN_RESULT")
;;     '("max-result" "G_TEST_LOG_MAX_RESULT")
;;     '("message" "G_TEST_LOG_MESSAGE")
;;     '("start-suite" "G_TEST_LOG_START_SUITE")
;;     '("stop-suite" "G_TEST_LOG_STOP_SUITE")
;;   )
;; )

;; (define-enum GTestFileType
;;   (in-module "GTest")
;;   (c-name "GTestFileType")
;;   (gtype-id "G_TYPE_TEST_FILE_TYPE")
;;   (values
;;     '("dist" "G_TEST_DIST")
;;     '("built" "G_TEST_BUILT")
;;   )
;; )

;; (define-enum GThreadError
;;   (in-module "GThread")
;;   (c-name "GThreadError")
;;   (gtype-id "G_TYPE_THREAD_ERROR")
;;   (values
;;     '("again" "G_THREAD_ERROR_AGAIN")
;;   )
;; )

;; (define-enum GOnceStatus
;;   (in-module "GOnce")
;;   (c-name "GOnceStatus")
;;   (gtype-id "G_TYPE_ONCE_STATUS")
;;   (values
;;     '("notcalled" "G_ONCE_STATUS_NOTCALLED")
;;     '("progress" "G_ONCE_STATUS_PROGRESS")
;;     '("ready" "G_ONCE_STATUS_READY")
;;   )
;; )

;; (define-enum GTimeType
;;   (in-module "GTime")
;;   (c-name "GTimeType")
;;   (gtype-id "G_TYPE_TIME_TYPE")
;;   (values
;;     '("standard" "G_TIME_TYPE_STANDARD")
;;     '("daylight" "G_TIME_TYPE_DAYLIGHT")
;;     '("universal" "G_TIME_TYPE_UNIVERSAL")
;;   )
;; )

;; (define-enum GUnicodeType
;;   (in-module "GUnicode")
;;   (c-name "GUnicodeType")
;;   (gtype-id "G_TYPE_UNICODE_TYPE")
;;   (values
;;     '("control" "G_UNICODE_CONTROL")
;;     '("format" "G_UNICODE_FORMAT")
;;     '("unassigned" "G_UNICODE_UNASSIGNED")
;;     '("private-use" "G_UNICODE_PRIVATE_USE")
;;     '("surrogate" "G_UNICODE_SURROGATE")
;;     '("lowercase-letter" "G_UNICODE_LOWERCASE_LETTER")
;;     '("modifier-letter" "G_UNICODE_MODIFIER_LETTER")
;;     '("other-letter" "G_UNICODE_OTHER_LETTER")
;;     '("titlecase-letter" "G_UNICODE_TITLECASE_LETTER")
;;     '("uppercase-letter" "G_UNICODE_UPPERCASE_LETTER")
;;     '("spacing-mark" "G_UNICODE_SPACING_MARK")
;;     '("enclosing-mark" "G_UNICODE_ENCLOSING_MARK")
;;     '("non-spacing-mark" "G_UNICODE_NON_SPACING_MARK")
;;     '("decimal-number" "G_UNICODE_DECIMAL_NUMBER")
;;     '("letter-number" "G_UNICODE_LETTER_NUMBER")
;;     '("other-number" "G_UNICODE_OTHER_NUMBER")
;;     '("connect-punctuation" "G_UNICODE_CONNECT_PUNCTUATION")
;;     '("dash-punctuation" "G_UNICODE_DASH_PUNCTUATION")
;;     '("close-punctuation" "G_UNICODE_CLOSE_PUNCTUATION")
;;     '("final-punctuation" "G_UNICODE_FINAL_PUNCTUATION")
;;     '("initial-punctuation" "G_UNICODE_INITIAL_PUNCTUATION")
;;     '("other-punctuation" "G_UNICODE_OTHER_PUNCTUATION")
;;     '("open-punctuation" "G_UNICODE_OPEN_PUNCTUATION")
;;     '("currency-symbol" "G_UNICODE_CURRENCY_SYMBOL")
;;     '("modifier-symbol" "G_UNICODE_MODIFIER_SYMBOL")
;;     '("math-symbol" "G_UNICODE_MATH_SYMBOL")
;;     '("other-symbol" "G_UNICODE_OTHER_SYMBOL")
;;     '("line-separator" "G_UNICODE_LINE_SEPARATOR")
;;     '("paragraph-separator" "G_UNICODE_PARAGRAPH_SEPARATOR")
;;     '("space-separator" "G_UNICODE_SPACE_SEPARATOR")
;;   )
;; )

;; (define-enum GUnicodeBreakType
;;   (in-module "GUnicode")
;;   (c-name "GUnicodeBreakType")
;;   (gtype-id "G_TYPE_UNICODE_BREAK_TYPE")
;;   (values
;;     '("mandatory" "G_UNICODE_BREAK_MANDATORY")
;;     '("carriage-return" "G_UNICODE_BREAK_CARRIAGE_RETURN")
;;     '("line-feed" "G_UNICODE_BREAK_LINE_FEED")
;;     '("combining-mark" "G_UNICODE_BREAK_COMBINING_MARK")
;;     '("surrogate" "G_UNICODE_BREAK_SURROGATE")
;;     '("zero-width-space" "G_UNICODE_BREAK_ZERO_WIDTH_SPACE")
;;     '("inseparable" "G_UNICODE_BREAK_INSEPARABLE")
;;     '("non-breaking-glue" "G_UNICODE_BREAK_NON_BREAKING_GLUE")
;;     '("contingent" "G_UNICODE_BREAK_CONTINGENT")
;;     '("space" "G_UNICODE_BREAK_SPACE")
;;     '("after" "G_UNICODE_BREAK_AFTER")
;;     '("before" "G_UNICODE_BREAK_BEFORE")
;;     '("before-and-after" "G_UNICODE_BREAK_BEFORE_AND_AFTER")
;;     '("hyphen" "G_UNICODE_BREAK_HYPHEN")
;;     '("non-starter" "G_UNICODE_BREAK_NON_STARTER")
;;     '("open-punctuation" "G_UNICODE_BREAK_OPEN_PUNCTUATION")
;;     '("close-punctuation" "G_UNICODE_BREAK_CLOSE_PUNCTUATION")
;;     '("quotation" "G_UNICODE_BREAK_QUOTATION")
;;     '("exclamation" "G_UNICODE_BREAK_EXCLAMATION")
;;     '("ideographic" "G_UNICODE_BREAK_IDEOGRAPHIC")
;;     '("numeric" "G_UNICODE_BREAK_NUMERIC")
;;     '("infix-separator" "G_UNICODE_BREAK_INFIX_SEPARATOR")
;;     '("symbol" "G_UNICODE_BREAK_SYMBOL")
;;     '("alphabetic" "G_UNICODE_BREAK_ALPHABETIC")
;;     '("prefix" "G_UNICODE_BREAK_PREFIX")
;;     '("postfix" "G_UNICODE_BREAK_POSTFIX")
;;     '("complex-context" "G_UNICODE_BREAK_COMPLEX_CONTEXT")
;;     '("ambiguous" "G_UNICODE_BREAK_AMBIGUOUS")
;;     '("unknown" "G_UNICODE_BREAK_UNKNOWN")
;;     '("next-line" "G_UNICODE_BREAK_NEXT_LINE")
;;     '("word-joiner" "G_UNICODE_BREAK_WORD_JOINER")
;;     '("hangul-l-jamo" "G_UNICODE_BREAK_HANGUL_L_JAMO")
;;     '("hangul-v-jamo" "G_UNICODE_BREAK_HANGUL_V_JAMO")
;;     '("hangul-t-jamo" "G_UNICODE_BREAK_HANGUL_T_JAMO")
;;     '("hangul-lv-syllable" "G_UNICODE_BREAK_HANGUL_LV_SYLLABLE")
;;     '("hangul-lvt-syllable" "G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE")
;;     '("close-paranthesis" "G_UNICODE_BREAK_CLOSE_PARANTHESIS")
;;     '("conditional-japanese-starter" "G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER")
;;     '("hebrew-letter" "G_UNICODE_BREAK_HEBREW_LETTER")
;;     '("regional-indicator" "G_UNICODE_BREAK_REGIONAL_INDICATOR")
;;   )
;; )

;; (define-enum GUnicodeScript
;;   (in-module "GUnicode")
;;   (c-name "GUnicodeScript")
;;   (gtype-id "G_TYPE_UNICODE_SCRIPT")
;;   (values
;;     '("invalid-code" "G_UNICODE_SCRIPT_INVALID_CODE")
;;     '("common" "G_UNICODE_SCRIPT_COMMON")
;;     '("inherited" "G_UNICODE_SCRIPT_INHERITED")
;;     '("arabic" "G_UNICODE_SCRIPT_ARABIC")
;;     '("armenian" "G_UNICODE_SCRIPT_ARMENIAN")
;;     '("bengali" "G_UNICODE_SCRIPT_BENGALI")
;;     '("bopomofo" "G_UNICODE_SCRIPT_BOPOMOFO")
;;     '("cherokee" "G_UNICODE_SCRIPT_CHEROKEE")
;;     '("coptic" "G_UNICODE_SCRIPT_COPTIC")
;;     '("cyrillic" "G_UNICODE_SCRIPT_CYRILLIC")
;;     '("deseret" "G_UNICODE_SCRIPT_DESERET")
;;     '("devanagari" "G_UNICODE_SCRIPT_DEVANAGARI")
;;     '("ethiopic" "G_UNICODE_SCRIPT_ETHIOPIC")
;;     '("georgian" "G_UNICODE_SCRIPT_GEORGIAN")
;;     '("gothic" "G_UNICODE_SCRIPT_GOTHIC")
;;     '("greek" "G_UNICODE_SCRIPT_GREEK")
;;     '("gujarati" "G_UNICODE_SCRIPT_GUJARATI")
;;     '("gurmukhi" "G_UNICODE_SCRIPT_GURMUKHI")
;;     '("han" "G_UNICODE_SCRIPT_HAN")
;;     '("hangul" "G_UNICODE_SCRIPT_HANGUL")
;;     '("hebrew" "G_UNICODE_SCRIPT_HEBREW")
;;     '("hiragana" "G_UNICODE_SCRIPT_HIRAGANA")
;;     '("kannada" "G_UNICODE_SCRIPT_KANNADA")
;;     '("katakana" "G_UNICODE_SCRIPT_KATAKANA")
;;     '("khmer" "G_UNICODE_SCRIPT_KHMER")
;;     '("lao" "G_UNICODE_SCRIPT_LAO")
;;     '("latin" "G_UNICODE_SCRIPT_LATIN")
;;     '("malayalam" "G_UNICODE_SCRIPT_MALAYALAM")
;;     '("mongolian" "G_UNICODE_SCRIPT_MONGOLIAN")
;;     '("myanmar" "G_UNICODE_SCRIPT_MYANMAR")
;;     '("ogham" "G_UNICODE_SCRIPT_OGHAM")
;;     '("old-italic" "G_UNICODE_SCRIPT_OLD_ITALIC")
;;     '("oriya" "G_UNICODE_SCRIPT_ORIYA")
;;     '("runic" "G_UNICODE_SCRIPT_RUNIC")
;;     '("sinhala" "G_UNICODE_SCRIPT_SINHALA")
;;     '("syriac" "G_UNICODE_SCRIPT_SYRIAC")
;;     '("tamil" "G_UNICODE_SCRIPT_TAMIL")
;;     '("telugu" "G_UNICODE_SCRIPT_TELUGU")
;;     '("thaana" "G_UNICODE_SCRIPT_THAANA")
;;     '("thai" "G_UNICODE_SCRIPT_THAI")
;;     '("tibetan" "G_UNICODE_SCRIPT_TIBETAN")
;;     '("canadian-aboriginal" "G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL")
;;     '("yi" "G_UNICODE_SCRIPT_YI")
;;     '("tagalog" "G_UNICODE_SCRIPT_TAGALOG")
;;     '("hanunoo" "G_UNICODE_SCRIPT_HANUNOO")
;;     '("buhid" "G_UNICODE_SCRIPT_BUHID")
;;     '("tagbanwa" "G_UNICODE_SCRIPT_TAGBANWA")
;;     '("braille" "G_UNICODE_SCRIPT_BRAILLE")
;;     '("cypriot" "G_UNICODE_SCRIPT_CYPRIOT")
;;     '("limbu" "G_UNICODE_SCRIPT_LIMBU")
;;     '("osmanya" "G_UNICODE_SCRIPT_OSMANYA")
;;     '("shavian" "G_UNICODE_SCRIPT_SHAVIAN")
;;     '("linear-b" "G_UNICODE_SCRIPT_LINEAR_B")
;;     '("tai-le" "G_UNICODE_SCRIPT_TAI_LE")
;;     '("ugaritic" "G_UNICODE_SCRIPT_UGARITIC")
;;     '("new-tai-lue" "G_UNICODE_SCRIPT_NEW_TAI_LUE")
;;     '("buginese" "G_UNICODE_SCRIPT_BUGINESE")
;;     '("glagolitic" "G_UNICODE_SCRIPT_GLAGOLITIC")
;;     '("tifinagh" "G_UNICODE_SCRIPT_TIFINAGH")
;;     '("syloti-nagri" "G_UNICODE_SCRIPT_SYLOTI_NAGRI")
;;     '("old-persian" "G_UNICODE_SCRIPT_OLD_PERSIAN")
;;     '("kharoshthi" "G_UNICODE_SCRIPT_KHAROSHTHI")
;;     '("unknown" "G_UNICODE_SCRIPT_UNKNOWN")
;;     '("balinese" "G_UNICODE_SCRIPT_BALINESE")
;;     '("cuneiform" "G_UNICODE_SCRIPT_CUNEIFORM")
;;     '("phoenician" "G_UNICODE_SCRIPT_PHOENICIAN")
;;     '("phags-pa" "G_UNICODE_SCRIPT_PHAGS_PA")
;;     '("nko" "G_UNICODE_SCRIPT_NKO")
;;     '("kayah-li" "G_UNICODE_SCRIPT_KAYAH_LI")
;;     '("lepcha" "G_UNICODE_SCRIPT_LEPCHA")
;;     '("rejang" "G_UNICODE_SCRIPT_REJANG")
;;     '("sundanese" "G_UNICODE_SCRIPT_SUNDANESE")
;;     '("saurashtra" "G_UNICODE_SCRIPT_SAURASHTRA")
;;     '("cham" "G_UNICODE_SCRIPT_CHAM")
;;     '("ol-chiki" "G_UNICODE_SCRIPT_OL_CHIKI")
;;     '("vai" "G_UNICODE_SCRIPT_VAI")
;;     '("carian" "G_UNICODE_SCRIPT_CARIAN")
;;     '("lycian" "G_UNICODE_SCRIPT_LYCIAN")
;;     '("lydian" "G_UNICODE_SCRIPT_LYDIAN")
;;     '("avestan" "G_UNICODE_SCRIPT_AVESTAN")
;;     '("bamum" "G_UNICODE_SCRIPT_BAMUM")
;;     '("egyptian-hieroglyphs" "G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS")
;;     '("imperial-aramaic" "G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC")
;;     '("inscriptional-pahlavi" "G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI")
;;     '("inscriptional-parthian" "G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN")
;;     '("javanese" "G_UNICODE_SCRIPT_JAVANESE")
;;     '("kaithi" "G_UNICODE_SCRIPT_KAITHI")
;;     '("lisu" "G_UNICODE_SCRIPT_LISU")
;;     '("meetei-mayek" "G_UNICODE_SCRIPT_MEETEI_MAYEK")
;;     '("old-south-arabian" "G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN")
;;     '("old-turkic" "G_UNICODE_SCRIPT_OLD_TURKIC")
;;     '("samaritan" "G_UNICODE_SCRIPT_SAMARITAN")
;;     '("tai-tham" "G_UNICODE_SCRIPT_TAI_THAM")
;;     '("tai-viet" "G_UNICODE_SCRIPT_TAI_VIET")
;;     '("batak" "G_UNICODE_SCRIPT_BATAK")
;;     '("brahmi" "G_UNICODE_SCRIPT_BRAHMI")
;;     '("mandaic" "G_UNICODE_SCRIPT_MANDAIC")
;;     '("chakma" "G_UNICODE_SCRIPT_CHAKMA")
;;     '("meroitic-cursive" "G_UNICODE_SCRIPT_MEROITIC_CURSIVE")
;;     '("meroitic-hieroglyphs" "G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS")
;;     '("miao" "G_UNICODE_SCRIPT_MIAO")
;;     '("sharada" "G_UNICODE_SCRIPT_SHARADA")
;;     '("sora-sompeng" "G_UNICODE_SCRIPT_SORA_SOMPENG")
;;     '("takri" "G_UNICODE_SCRIPT_TAKRI")
;;   )
;; )

;; (define-enum GNormalizeMode
;;   (in-module "GNormalize")
;;   (c-name "GNormalizeMode")
;;   (gtype-id "G_TYPE_NORMALIZE_MODE")
;;   (values
;;     '("default" "G_NORMALIZE_DEFAULT")
;;     '("nfd" "G_NORMALIZE_NFD")
;;     '("default-compose" "G_NORMALIZE_DEFAULT_COMPOSE")
;;     '("nfc" "G_NORMALIZE_NFC")
;;     '("all" "G_NORMALIZE_ALL")
;;     '("nfkd" "G_NORMALIZE_NFKD")
;;     '("all-compose" "G_NORMALIZE_ALL_COMPOSE")
;;     '("nfkc" "G_NORMALIZE_NFKC")
;;   )
;; )

;; (define-enum GUserDirectory
;;   (in-module "GUser")
;;   (c-name "GUserDirectory")
;;   (gtype-id "G_TYPE_USER_DIRECTORY")
;;   (values
;;     '("directory-desktop" "G_USER_DIRECTORY_DESKTOP")
;;     '("directory-documents" "G_USER_DIRECTORY_DOCUMENTS")
;;     '("directory-download" "G_USER_DIRECTORY_DOWNLOAD")
;;     '("directory-music" "G_USER_DIRECTORY_MUSIC")
;;     '("directory-pictures" "G_USER_DIRECTORY_PICTURES")
;;     '("directory-public-share" "G_USER_DIRECTORY_PUBLIC_SHARE")
;;     '("directory-templates" "G_USER_DIRECTORY_TEMPLATES")
;;     '("directory-videos" "G_USER_DIRECTORY_VIDEOS")
;;     '("n-directories" "G_USER_N_DIRECTORIES")
;;   )
;; )

;; (define-flags GFormatSizeFlags
;;   (in-module "GFormat")
;;   (c-name "GFormatSizeFlags")
;;   (gtype-id "G_TYPE_FORMAT_SIZE_FLAGS")
;;   (values
;;     '("default" "G_FORMAT_SIZE_DEFAULT")
;;     '("long-format" "G_FORMAT_SIZE_LONG_FORMAT")
;;     '("iec-units" "G_FORMAT_SIZE_IEC_UNITS")
;;   )
;; )

;; (define-enum GVariantClass
;;   (in-module "GVariant")
;;   (c-name "GVariantClass")
;;   (gtype-id "G_TYPE_VARIANT_CLASS")
;;   (values
;;     '("boolean" "G_VARIANT_CLASS_BOOLEAN")
;;     '("byte" "G_VARIANT_CLASS_BYTE")
;;     '("int16" "G_VARIANT_CLASS_INT16")
;;     '("uint16" "G_VARIANT_CLASS_UINT16")
;;     '("int32" "G_VARIANT_CLASS_INT32")
;;     '("uint32" "G_VARIANT_CLASS_UINT32")
;;     '("int64" "G_VARIANT_CLASS_INT64")
;;     '("uint64" "G_VARIANT_CLASS_UINT64")
;;     '("handle" "G_VARIANT_CLASS_HANDLE")
;;     '("double" "G_VARIANT_CLASS_DOUBLE")
;;     '("string" "G_VARIANT_CLASS_STRING")
;;     '("object-path" "G_VARIANT_CLASS_OBJECT_PATH")
;;     '("signature" "G_VARIANT_CLASS_SIGNATURE")
;;     '("variant" "G_VARIANT_CLASS_VARIANT")
;;     '("maybe" "G_VARIANT_CLASS_MAYBE")
;;     '("array" "G_VARIANT_CLASS_ARRAY")
;;     '("tuple" "G_VARIANT_CLASS_TUPLE")
;;     '("dict-entry" "G_VARIANT_CLASS_DICT_ENTRY")
;;   )
;; )

;; (define-enum GVariantParseError
;;   (in-module "GVariant")
;;   (c-name "GVariantParseError")
;;   (gtype-id "G_TYPE_VARIANT_PARSE_ERROR")
;;   (values
;;     '("failed" "G_VARIANT_PARSE_ERROR_FAILED")
;;     '("basic-type-expected" "G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED")
;;     '("cannot-infer-type" "G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE")
;;     '("definite-type-expected" "G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED")
;;     '("input-not-at-end" "G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END")
;;     '("invalid-character" "G_VARIANT_PARSE_ERROR_INVALID_CHARACTER")
;;     '("invalid-format-string" "G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING")
;;     '("invalid-object-path" "G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH")
;;     '("invalid-signature" "G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE")
;;     '("invalid-type-string" "G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING")
;;     '("no-common-type" "G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE")
;;     '("number-out-of-range" "G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE")
;;     '("number-too-big" "G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG")
;;     '("type-error" "G_VARIANT_PARSE_ERROR_TYPE_ERROR")
;;     '("unexpected-token" "G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN")
;;     '("unknown-keyword" "G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD")
;;     '("unterminated-string-constant" "G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT")
;;     '("value-expected" "G_VARIANT_PARSE_ERROR_VALUE_EXPECTED")
;;   )
;; )

;; added by jpc 

;; (define-enum GVariantTypes
;;   (in-module "GVariant")
;;   (c-name "GVariantType")
;;   (gtype-id "G_VARIANT_TYPES")
;;   (values
;;    '("b"     "G_VARIANT_TYPE_BOOLEAN")
;;    '("y"     "G_VARIANT_TYPE_BYTE")
;;    '("n"     "G_VARIANT_TYPE_INT16")
;;    '("q"     "G_VARIANT_TYPE_UINT16")
;;    '("i"     "G_VARIANT_TYPE_INT32")
;;    '("u"     "G_VARIANT_TYPE_UINT32")
;;    '("x"     "G_VARIANT_TYPE_INT64")
;;    '("t"     "G_VARIANT_TYPE_UINT64")
;;    '("d"     "G_VARIANT_TYPE_DOUBLE")
;;    '("s"     "G_VARIANT_TYPE_STRING")
;;    '("o"     "G_VARIANT_TYPE_OBJECT_PATH")
;;    '("g"     "G_VARIANT_TYPE_SIGNATURE")
;;    '("v"     "G_VARIANT_TYPE_VARIANT")
;;    '("h"     "G_VARIANT_TYPE_HANDLE")
;;    '("()"    "G_VARIANT_TYPE_UNIT")
;;    '("*"     "G_VARIANT_TYPE_ANY")
;;    '("?"     "G_VARIANT_TYPE_BASIC")
;;    '("m*"    "G_VARIANT_TYPE_MAYBE")
;;    '("a*"    "G_VARIANT_TYPE_ARRAY")
;;    '("r"     "G_VARIANT_TYPE_TUPLE")
;;    '("{?*}"  "G_VARIANT_TYPE_DICT_ENTRY")
;;    '("a{?*}" "G_VARIANT_TYPE_DICTIONARY")
;;    '("as"    "G_VARIANT_TYPE_STRING_ARRAY")
;;    '("ao"    "G_VARIANT_TYPE_OBJECT_PATH_ARRAY")
;;    '("ay"    "G_VARIANT_TYPE_BYTESTRING")
;;    '("aay"   "G_VARIANT_TYPE_BYTESTRING_ARRAY")
;;    '("a{sv}" "G_VARIANT_TYPE_VARDICT")
;;    )
;;   )

;; in glib gmain.h

(define-boxed GMainContext
  (in-module "Gtk")
  (c-name "GMainContext")
  (gtype-id "G_TYPE_MAIN_CONTEXT")
  ;; (copy-func "g_error_copy")
  ;; (release-func "g_error_free")
)

(define-boxed GMainLoop
  (in-module "Gtk")
  (c-name "GMainLoop")
  (gtype-id "G_TYPE_MAIN_LOOP")
  ;; (copy-func "g_error_copy")
  ;; (release-func "g_error_free")
)

(define-boxed GSource
  (in-module "Gtk")
  (c-name "GSource")
  (gtype-id "G_TYPE_SOURCE")
  ;; (copy-func "g_error_copy")
  ;; (release-func "g_error_free")
)

;; typedef struct _GSourceCallbackFuncs    GSourceCallbackFuncs;
;; typedef struct _GSourceFuncs            GSourceFuncs;

(define-boxed GError
  (in-module "Gtk")
  (c-name "GError")
  (gtype-id "G_TYPE_ERROR")
  (copy-func "g_error_copy")
  (release-func "g_error_free")
)
