/* -*- Mode: C -*- */
%%
headers

#include <glib.h>
#include <nsp/nsp.h>
#include <nsp/objects.h>
#include <nsp/smatrix.h>
#include <nsp/bmatrix.h>
#include <nsp/hash.h>
#include <nsp/plist.h>
#include <nsp/list.h>
#include <nsp/cells.h>
#include <nsp/none.h>
#include <nsp/mpmatrix.h>
#include <nsp/matrix.h>
#include <nsp/file.h>
#include <nsp/type.h>
#include <nsp/hobj.h>
#include <nsp/interf.h>
#include <nsp/gtk/gboxed.h>
#include <nsp/gtk/gobject.h>
#include <nsp/gtk/gobject-util.h>
#include <nsp/gtk/gmaincontext.h>
#include <nsp/gtk/gmainloop.h>
#include <nsp/gtk/gsource.h>

%%
include-private GVariant

static int nsp_destroy_GVariant(GVariant *v,NspGVariant *H);
static int nsp_print_GVariant(int indent,GVariant *v,NspGVariant *M);
static int nsp_check_GVariant(GVariant *v,NspGVariant *H);
static int nsp_GVariant_full_copy(NspGVariant *H,GVariant *v,NspGVariant *self);

%%
include-private GVariantType

static int nsp_destroy_GVariantType(GVariantType *v,NspGVariantType *H);
static int nsp_print_GVariantType(int indent,GVariantType *v,NspGVariantType *M);
static int nsp_check_GVariantType(GVariantType *v,NspGVariantType *H);
static int nsp_GVariantType_full_copy(NspGVariantType *H,GVariantType *v,NspGVariantType *self);

%%
include-public GVariant
GVariant *nsp_copy_GVariant(GVariant *gv);

%%
include-public GVariantType
GVariantType *nsp_copy_GVariantType(const GVariantType *gv);

%%
init

%%
modulename glib

%%
ignore-glob
*_get_type
_*
*_ref
*_unref

%%
override-create ZZGVariant

/* override the code for gvalue creation
 * we change the function nsp_gvalue_create
 * since H->value = value does not work for Gvalue
 */

static NspGValue *nsp_gvalue_create_void(const char *name,NspTypeBase *type)
{
 NspGValue *H  = (type == NULL) ? new_gvalue() : type->new();
 if ( H ==  NULLGVALUE)
  {
   Sciprintf("No more memory\n");
   return NULLGVALUE;
  }
 if ( nsp_object_set_initial_name(NSP_OBJECT(H),name) == NULLSTRING) return NULLGVALUE;
 NSP_OBJECT(H)->ret_pos = -1 ;
 return H;
}

int nsp_gvalue_create_partial(NspGValue *H)
{
  return OK;
}

int nsp_gvalue_check_values(NspGValue *H)
{
  if ( nsp_check_GValue(&H->value,H) == FAIL ) return FAIL;
  return OK;
}

NspGValue *nsp_gvalue_create(const char *name,GValue value,NspTypeBase *type)
{
  NspGValue *H  = nsp_gvalue_create_void(name,type);
  if ( H ==  NULLGVALUE) return NULLGVALUE;
  memset(&H->value, 0, sizeof(H->value));
  g_value_init (&H->value, G_VALUE_TYPE(&value));
  g_value_copy (&value,&H->value);
  return H;
}

NspGValue *nsp_gvalue_create_default(const char *name)
{
 NspGValue *H  = nsp_gvalue_create_void(name,NULL);
 if ( H ==  NULLGVALUE) return NULLGVALUE;
 memset(&H->value, 0, sizeof(H->value));
 return H;
}

%%
override-intcreate GValue

/* override the default interface for gvalue_create */

int int_gvalue_create(Stack stack, int rhs, int opt, int lhs)
{
  NspObject *obj;
  NspGValue *H;
  CheckStdRhs(1,1);
  CheckLhs(0,1);
  if ((obj =nsp_get_object(stack,1)) == NULLOBJ) return RET_BUG;
  /* want to be sure that type gvalue is initialized */
  nsp_type_gvalue = new_type_gvalue(T_BASE);
  if ((H = nsp_gvalue_create_default(NVOID)) == NULLGVALUE) return RET_BUG;
  if ( nsp_fill_g_value_from_nspobject(&H->value,obj)== FAIL)
    {
      Scierror("Error: failed to create a gvalue\n");
      return RET_BUG;
    }
  MoveObj(stack,1,(NspObject  *) H);
  return 1;
}

%%
override GValue.get_value

#define NSP_MAT(val) \
  if ( nsp_move_double(stack,1,(double) val)==FAIL) return RET_BUG;break;

#define IMAT_ED(name,type,arg)  Loc->name[0] = val;break;
#define NSP_IMAT(val,type)						\
  NspIMatrix *Loc =nsp_imatrix_create(NVOID,1,1,CNAME(nsp_,type));	\
  if ( Loc == NULL) return RET_BUG;					\
  NSP_ITYPE_SWITCH(Loc->itype,IMAT_ED,"");				\
  MoveObj(stack,1,NSP_OBJECT(Loc));

static int _wrap_get_value(NspGValue *self,Stack stack,int rhs,int opt,int lhs)
{
  CheckRhs(0,0);
  switch (G_TYPE_FUNDAMENTAL(G_VALUE_TYPE(&self->value)))
    {
    case G_TYPE_BOOLEAN:
      {
	if ( nsp_move_boolean(stack,1,g_value_get_boolean(&self->value)) == FAIL)
	  return RET_BUG;
	break;
      }
    case G_TYPE_INT: {gint val = g_value_get_int(&self->value); NSP_IMAT(val,gint);break;}
    case G_TYPE_UINT:{guint val = g_value_get_uint(&self->value); NSP_IMAT(val,guint);break;}
    case G_TYPE_LONG: {glong val = g_value_get_long(&self->value); NSP_IMAT(val,glong);break;}
    case G_TYPE_ULONG: {gulong val = g_value_get_ulong(&self->value); NSP_IMAT(val,gulong);break;}
    case G_TYPE_INT64: {gint64 val = g_value_get_int64(&self->value); NSP_IMAT(val,gint64);break;}
    case G_TYPE_UINT64:{guint64 val = g_value_get_uint64(&self->value); NSP_IMAT(val,guint64);break;}

    case G_TYPE_ENUM: NSP_MAT(g_value_get_enum(&self->value));
    case G_TYPE_FLAGS: NSP_MAT(g_value_get_flags(&self->value));
    case G_TYPE_FLOAT: NSP_MAT(g_value_get_float(&self->value));
    case G_TYPE_DOUBLE: NSP_MAT(g_value_get_double(&self->value));
    case G_TYPE_STRING:
      {
	const gchar *str = g_value_get_string(&self->value);
	if ( nsp_move_string(stack,1, str,-1) ==FAIL) return RET_BUG;
	break;
      }
    default:
      Scierror("Error: this gvalue does not contains an int \n");
      return RET_BUG;
    }
  return 1;
}

%%
override g_variant_new

static int
_wrap_g_variant_new (Stack stack, int rhs, int opt, int lhs)
{
  GVariant *gvariant=NULL;
  int_types T[] = {obj, t_end};
  NspObject *Obj,*nsp_ret;
  CheckLhs(0,1);
  if ( GetArgs(stack,rhs,opt,T,&Obj) == FAIL) return RET_BUG;

#define NSP_ITYPE_SWITCH_UC(itype,X,arg)	\
  switch (itype ) {				\
  case nsp_gint: X(Gint,INT,int32,arg);		\
  case nsp_guint: X(Guint,UINT,uint32,arg);	\
  case nsp_gshort: X(Gshort,INT,int16,arg);	\
  case nsp_gushort: X(Gushort,UINT,uint16,arg);	\
  case nsp_glong : X(Glong,LONG,int32,arg );	\
  case nsp_gulong: X(Gulong,ULONG,uint32,arg);	\
  case nsp_gint8: X(Gint8,INT,byte,arg);	\
  case nsp_guint8: X(Guint8,UINT,byte,arg);	\
  case nsp_gint16: X(Gint16,INT,int16,arg);	\
  case nsp_guint16: X(Guint16,UINT,uint16,arg);	\
  case nsp_gint32: X(Gint32,INT,int32,arg);	\
  case nsp_guint32: X(Guint32,UINT,uint32,arg);	\
  case nsp_gint64 : X(Gint64,INT64,int64,arg );	\
  case nsp_guint64 : X(Guint64,UINT64,uint64,arg );}

  if (IsMat(Obj) && ((NspMatrix *) Obj)->mn == 1 )
    {
      gvariant = g_variant_new_double (((NspMatrix *) Obj)->R[0] );
    }
  else if ( IsBMat(Obj) && ((NspBMatrix *) Obj)->mn == 1)
    {
      gvariant =  g_variant_new_boolean (((NspBMatrix *) Obj)->B[0] );
    }
  else if ( IsSMat(Obj) && ((NspSMatrix *) Obj)->mn == 1 )
    {
      char *str = ((NspSMatrix *) Obj)->S[0];
      gvariant =  g_variant_new_string(str);
    }
  else if ( IsIMat(Obj) && ((NspIMatrix *) Obj)->mn == 1 )
    {
      NspIMatrix *A=(NspIMatrix *) Obj;
#define IMAT_SWITCH(name,type_uc,type_lc,arg)			\
      gvariant =  CNAME(g_variant_new_,type_lc)(A->name[0]);	\
      break;
      NSP_ITYPE_SWITCH_UC(A->itype,IMAT_SWITCH,"");
#undef IMAT_SWITCH
    }
  else
    {
      Scierror("Error: unrecognized type for g_variant_new\n");
      return RET_BUG;
    }
  nsp_type_gvariant = new_type_gvariant(T_BASE);
  nsp_ret =(NspObject*) nsp_gvariant_create(NVOID,gvariant,(NspTypeBase *) nsp_type_gvariant);
  if ( nsp_ret == NULL) return RET_BUG;
  MoveObj(stack,1,nsp_ret);
  return 1;
}
%%
override g_filename_from_uri

int _wrap_g_filename_from_uri(Stack stack, int rhs, int opt, int lhs) /* g_filename_from_uri */
{
  int_types T[] = {string, t_end};
  char *uri;
  gchar *ret;
  GError *error = NULL;
  if ( GetArgs(stack,rhs,opt,T,&uri) == FAIL) return RET_BUG;
  ret =g_filename_from_uri(uri,NULL,&error);
  if ( error != NULL ) 
    {
      Scierror("%s: gtk error, %s\n",NspFname(stack),error->message);
      g_error_free (error);
      return RET_BUG;
    }
  if ( nsp_move_string(stack,1,(ret) ? ret: "",-1)== FAIL) return RET_BUG;
  g_free(ret);
  return 1;
}

%%
override g_error_matches

static int _wrap_g_error_matches(GError *self,Stack stack,int rhs,int opt,int lhs)
{
  int_types T[] = {string,s_int, t_end};
  char *quark_string;
  int code, ret;
  if ( GetArgs(stack,rhs,opt,T,&quark_string, &code) == FAIL) return RET_BUG;
  ret =g_error_matches(NSP_GBOXED_GET(self, GError),g_quark_from_static_string (quark_string),code);
  if ( nsp_move_boolean(stack,1,ret)==FAIL) return RET_BUG;
  return 1;
}

%%
override g_source_set_callback

/* g_source_set_callback defined in gobject.c 
 * 
 */
extern int _wrap_g_source_set_callback(NspGSource *self,Stack stack,int rhs,int opt,int lhs);

%%
last

static int nsp_destroy_GVariant(GVariant *value,NspGVariant *H)
{
  g_variant_unref(value);
  return OK;
}

static int nsp_print_GVariant(int indent,GVariant *v,NspGVariant *M)
{
  gchar *str = g_variant_print(v,TRUE);
  Sciprintf1(indent+1,"gvariant: %s\n",str);
  g_free(str);
  return 0;
}

static int nsp_check_GVariant(GVariant *v,NspGVariant *H)
{
  if (g_variant_is_floating (v) )
    {
      /* Sciprintf("The variant is floating\n"); */
    }
  g_variant_ref_sink(v);
  return OK;
}

static int nsp_GVariant_full_copy(NspGVariant *H,GVariant *value,NspGVariant *self)
{
#if 0
  memset(value, 0, sizeof(*value));
  g_variant_init (value, G_VALUE_TYPE(&self->value));
  g_variant_copy (&self->value,value);
#endif
  return OK;
}


static int nsp_destroy_GVariantType(GVariantType *value,NspGVariantType *H)
{
  /* nsp_print_GVariantType(0,value,H);  Sciprintf("Destroy a GVariantType\n");*/
  g_variant_type_free(value);
  return OK;
}

static int nsp_print_GVariantType(int indent,GVariantType *v,NspGVariantType *M)
{
  gchar *str = g_variant_type_dup_string(v);
  Sciprintf1(indent+1,"gvariant_type: %s\n",str);
  g_free(str);
  return 0;
}

static int nsp_check_GVariantType(GVariantType *v,NspGVariantType *H)
{
  return OK;
}

static int nsp_GVariantType_full_copy(NspGVariantType *H,GVariantType *value,NspGVariantType *self)
{
#if 0
  /* XXXX */
  memset(value, 0, sizeof(*value));
  g_variant_init (value, G_VALUE_TYPE(&self->value));
  g_variant_copy (&self->value,value);
#endif
  return OK;
}

GVariant *nsp_copy_GVariant(GVariant *gv)
{
  return (gv == NULL) ? gv : g_variant_ref(gv); 
}

GVariantType *nsp_copy_GVariantType(const GVariantType *gv)
{
  return g_variant_type_copy(gv);
}
