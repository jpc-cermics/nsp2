;; -*- scheme -*-

(register "pango-types.defs")
(register "atk-types.defs")
(register "gtk-types.defs")
(register "cairo-types.defs")

(include "gdk-types.defs")
(include "gdkpixbuf-types.defs")

;; pixbuf

(include "gdkpixbuf.defs")

;; From /opt/gtk2/include/gtk-2.0/gdk/gdk.h

(define-function notify_startup_complete
  (c-name "gdk_notify_startup_complete")
  (return-type "none")
)

(define-function get_display_arg_name
  (c-name "gdk_get_display_arg_name")
  (return-type "const-gchar*")
)

(define-function get_program_class
  (c-name "gdk_get_program_class")
  (return-type "const-gchar*")
)

(define-function set_program_class
  (c-name "gdk_set_program_class")
  (parameters
    '("const-gchar*" "program_class")
  )
)

;; deprecated: use gdk_display_get_name
;; (define-function get_display
;;   (c-name "gdk_get_display")
;;   (return-type "const-gchar*")
;; )

;; deprecated use gdk_device_grab
;; (define-function pointer_grab
;;   (c-name "gdk_pointer_grab")
;;   (return-type "GdkGrabStatus")
;;   (parameters
;;     '("GdkWindow*" "window")
;;     '("gboolean" "owner_events" (null-ok) (default "FALSE"))
;;     '("GdkEventMask" "event_mask" (null-ok) (default "0"))
;;     '("GdkWindow*" "confine_to" (null-ok) (default "NULL"))
;;     '("GdkCursor*" "cursor" (null-ok) (default "NULL"))
;;     '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
;;   )
;; )

;; deprecated use gdk_device_ungrab
;; (define-function pointer_ungrab
;;   (c-name "gdk_pointer_ungrab")
;;   (return-type "none")
;;   (parameters
;;     '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
;;   )
;; )

;; deprecated use gdk_device_grab
;; (define-function keyboard_grab
;;   (c-name "gdk_keyboard_grab")
;;   (return-type "GdkGrabStatus")
;;   (parameters
;;     '("GdkWindow*" "window")
;;     '("gboolean" "owner_events" (null-ok) (default "FALSE"))
;;     '("guint32" "time" (null-ok) (default "GDK_CURRENT_TIME"))
;;   )
;; )

;; deprecated use gdk_display_device_is_grabbed
;; (define-function pointer_is_grabbed
;;   (c-name "gdk_pointer_is_grabbed")
;;   (return-type "gboolean")
;; )

(define-function screen_width
  (c-name "gdk_screen_width")
  (return-type "gint")
)

(define-function screen_height
  (c-name "gdk_screen_height")
  (return-type "gint")
)

(define-function screen_width_mm
  (c-name "gdk_screen_width_mm")
  (return-type "gint")
)

(define-function screen_height_mm
  (c-name "gdk_screen_height_mm")
  (return-type "gint")
)

(define-function flush
  (c-name "gdk_flush")
  (return-type "none")
)

(define-function beep
  (c-name "gdk_beep")
  (return-type "none")
)

(define-function set_double_click_time
  (c-name "gdk_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec")
  )
)

;;  From gdkthreads.h

(define-function gdk_threads_init
  (c-name "gdk_threads_init")
  (return-type "none")
)

;; (define-function gdk_threads_enter
;;   (c-name "gdk_threads_enter")
;;   (return-type "none")
;; )

;; (define-function gdk_threads_leave
;;   (c-name "gdk_threads_leave")
;;   (return-type "none")
;; )

(define-function gdk_threads_set_lock_functions
  (c-name "gdk_threads_set_lock_functions")
  (return-type "none")
  (parameters
    '("GCallback" "enter_fn")
    '("GCallback" "leave_fn")
  )
)

(define-function gdk_threads_add_idle_full
  (c-name "gdk_threads_add_idle_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GSourceFunc" "function")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function gdk_threads_add_idle
  (c-name "gdk_threads_add_idle")
  (return-type "guint")
  (parameters
    '("GSourceFunc" "function")
    '("gpointer" "data")
  )
)

(define-function gdk_threads_add_timeout_full
  (c-name "gdk_threads_add_timeout_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "function")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function gdk_threads_add_timeout
  (c-name "gdk_threads_add_timeout")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "function")
    '("gpointer" "data")
  )
)

(define-function gdk_threads_add_timeout_seconds_full
  (c-name "gdk_threads_add_timeout_seconds_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "function")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function gdk_threads_add_timeout_seconds
  (c-name "gdk_threads_add_timeout_seconds")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "function")
    '("gpointer" "data")
  )
)

;; divers

(define-function parse_args
  (c-name "gdk_parse_args")
  (return-type "none")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function init
  (c-name "gdk_init")
  (return-type "none")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function init_check
  (c-name "gdk_init_check")
  (return-type "gboolean")
  (parameters
    '("gint*" "argc")
    '("gchar***" "argv")
  )
)

(define-function add_option_entries_libgtk_only
  (c-name "gdk_add_option_entries_libgtk_only")
  (return-type "none")
  (parameters
    '("GOptionGroup*" "group")
  )
)

(define-function pre_parse_libgtk_only
  (c-name "gdk_pre_parse_libgtk_only")
  (return-type "none")
)

;; (define-function exit
;;   (c-name "gdk_exit")
;;   (return-type "none")
;;   (parameters
;;     '("gint" "error_code")
;;   )
;; )

;; (define-function set_locale
;;   (c-name "gdk_set_locale")
;;   (return-type "gchar*")
;; )

(define-function error_trap_push
  (c-name "gdk_error_trap_push")
  (return-type "none")
)

(define-function error_trap_pop
  (c-name "gdk_error_trap_pop")
  (return-type "gint")
)

;; (define-function set_use_xshm
;;   (c-name "gdk_set_use_xshm")
;;   (return-type "none")
;;   (parameters
;;     '("gboolean" "use_xshm")
;;   )
;; )

;; (define-function get_use_xshm
;;   (c-name "gdk_get_use_xshm")
;;   (return-type "gboolean")
;; )

(define-function input_add_full
  (c-name "gdk_input_add_full")
  (return-type "gint")
  (parameters
    '("gint" "source")
    '("GdkInputCondition" "condition")
    '("GdkInputFunction" "function")
    '("gpointer" "data")
    '("GdkDestroyNotify" "destroy")
  )
)

(define-function input_add
  (c-name "gdk_input_add")
  (return-type "gint")
  (parameters
    '("gint" "source")
    '("GdkInputCondition" "condition")
    '("GdkInputFunction" "function")
    '("gpointer" "data")
  )
)

;; (define-function input_remove
;;   (c-name "gdk_input_remove")
;;   (return-type "none")
;;   (parameters
;;     '("gint" "tag")
;;   )
;; )

(define-function pointer_grab_info_libgtk_only
  (c-name "gdk_pointer_grab_info_libgtk_only")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow**" "grab_window")
    '("gboolean*" "owner_events")
  )
)

(define-function keyboard_grab_info_libgtk_only
  (c-name "gdk_keyboard_grab_info_libgtk_only")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow**" "grab_window")
    '("gboolean*" "owner_events")
  )
)

(define-function rectangle_get_type
  (c-name "gdk_rectangle_get_type")
  (return-type "GType")
)

(define-function wcstombs
  (c-name "gdk_wcstombs")
  (return-type "gchar*")
  (parameters
    '("const-GdkWChar*" "src")
  )
)

(define-function mbstowcs
  (c-name "gdk_mbstowcs")
  (return-type "gint")
  (parameters
    '("GdkWChar*" "dest")
    '("const-gchar*" "src")
    '("gint" "dest_max")
  )
)

;; deprecated in 3.0
;;
;; (define-method send_client_message
;;   (of-object "GdkEvent")
;;   (c-name "gdk_event_send_client_message")
;;   (return-type "gboolean")
;;   (parameters
;;     '("GdkNativeWindow" "winid")
;;   )
;; )

;; (define-method send_clientmessage_toall
;;   (of-object "GdkEvent")
;;   (c-name "gdk_event_send_clientmessage_toall")
;;   (return-type "none")
;; )

;; (define-function send_client_message_for_display
;;   (c-name "gdk_event_send_client_message_for_display")
;;   (return-type "gboolean")
;;   (parameters
;;     '("GdkDisplay*" "display")
;;     '("GdkEvent*" "event")
;;     '("GdkNativeWindow" "winid")
;;   )
;; )

(define-function threads_set_lock_functions
  (c-name "gdk_threads_set_lock_functions")
  (return-type "none")
  (parameters
    '("GCallback" "enter_fn")
    '("GCallback" "leave_fn")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gdk/gdkcolor.h


(define-function gdk_color_new
  (c-name "gdk_color_new")
  (is-constructor-of "GdkColor")
  (return-type "GdkColor")
)

(define-function gdk_colormap_get_type
  (c-name "gdk_colormap_get_type")
  (return-type "GType")
)

(define-function gdk_colormap_new
  (c-name "gdk_colormap_new")
  (is-constructor-of GdkColormap)
  (return-type "GdkColormap*")
  (parameters
    '("GdkVisual*" "visual")
    '("gboolean" "allocate")
  )
)

(define-function colormap_get_system
  (c-name "gdk_colormap_get_system")
  (return-type "GdkColormap*")
)

;; (define-function colormap_get_system_size
;;   (c-name "gdk_colormap_get_system_size")
;;   (return-type "gint")
;; )

;(define-method change
;  (of-object "GdkColormap")
;  (c-name "gdk_colormap_change")
;  (return-type "none")
;  (parameters
;    '("gint" "ncolors")
;  )
;)

(define-method alloc_color
  (of-object "GdkColormap")
  (c-name "gdk_colormap_alloc_color")
  (return-type "gboolean")
  (parameters
    '("GdkColor*" "color")
    '("gboolean" "writeable")
    '("gboolean" "best_match")
  )
)

(define-method get_visual
  (of-object "GdkColormap")
  (c-name "gdk_colormap_get_visual")
  (return-type "GdkVisual*")
)

(define-function color_parse
  (c-name "gdk_color_parse")
  (return-type "gint")
  (parameters
    '("const-gchar*" "spec")
    '("GdkColor*" "color")
  )
)

(define-method white
  (of-object "GdkColormap")
  (c-name "gdk_color_white")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method black
  (of-object "GdkColormap")
  (c-name "gdk_color_black")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method alloc
  (of-object "GdkColormap")
  (c-name "gdk_color_alloc")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method change
  (of-object "GdkColormap")
  (c-name "gdk_color_change")
  (return-type "gint")
  (parameters
    '("GdkColor*" "color")
  )
)

;; From gdkcursor.h


(define-function gdk_cursor_get_type
  (c-name "gdk_cursor_get_type")
  (return-type "GType")
)

(define-function gdk_cursor_new_for_display
  (c-name "gdk_cursor_new_for_display")
  (is-constructor-of "GdkCursor")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkCursorType" "cursor_type")
  )
)

(define-function gdk_cursor_new
  (c-name "gdk_cursor_new")
  (is-constructor-of "GdkCursor")
  (return-type "GdkCursor*")
  (parameters
    '("GdkCursorType" "cursor_type")
  )
)

(define-function gdk_cursor_new_from_pixbuf
  (c-name "gdk_cursor_new_from_pixbuf")
  (is-constructor-of "GdkCursor")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkPixbuf*" "pixbuf")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-function gdk_cursor_new_from_surface
  (c-name "gdk_cursor_new_from_surface")
  (is-constructor-of "GdkCursor")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("cairo_surface_t*" "surface")
    '("gdouble" "x")
    '("gdouble" "y")
  )
)

(define-function gdk_cursor_new_from_name
  (c-name "gdk_cursor_new_from_name")
  (is-constructor-of "GdkCursor")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display")
    '("const-gchar*" "name")
  )
)

(define-method get_display
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_image
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_image")
  (return-type "GdkPixbuf*")
)

(define-method get_surface
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_surface")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "cairo_surface_t*")
  (parameters
    '("gdouble*" "x_hot")
    '("gdouble*" "y_hot")
  )
)

(define-method get_cursor_type
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_cursor_type")
  (return-type "GdkCursorType")
)
;; From gdkcursorprivate.h

;; From gdkdnd.h
(define-function gdk_drag_context_get_type
  (c-name "gdk_drag_context_get_type")
  (return-type "GType")
)

(define-method set_device
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_set_device")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
  )
)

(define-method get_device
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_device")
  (return-type "GdkDevice*")
)

(define-method list_targets
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_list_targets")
  (return-type "GList*")
)

(define-method get_actions
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_actions")
  (return-type "GdkDragAction")
)

(define-method get_suggested_action
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_suggested_action")
  (return-type "GdkDragAction")
)

(define-method get_selected_action
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_selected_action")
  (return-type "GdkDragAction")
)

(define-method get_source_window
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_source_window")
  (return-type "GdkWindow*")
)

(define-method get_dest_window
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_dest_window")
  (return-type "GdkWindow*")
)

(define-method get_protocol
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_get_protocol")
  (return-type "GdkDragProtocol")
)

(define-function gdk_drag_status
  (c-name "gdk_drag_status")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkDragAction" "action")
    '("guint32" "time_")
  )
)

(define-function gdk_drop_reply
  (c-name "gdk_drop_reply")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("gboolean" "accepted")
    '("guint32" "time_")
  )
)

(define-function gdk_drop_finish
  (c-name "gdk_drop_finish")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("gboolean" "success")
    '("guint32" "time_")
  )
)

(define-function gdk_drag_get_selection
  (c-name "gdk_drag_get_selection")
  (return-type "GdkAtom")
  (parameters
    '("GdkDragContext*" "context")
  )
)

(define-function gdk_drag_begin
  (c-name "gdk_drag_begin")
  (return-type "GdkDragContext*")
  (parameters
    '("GdkWindow*" "window")
    '("GList*" "targets")
  )
)

(define-function gdk_drag_begin_for_device
  (c-name "gdk_drag_begin_for_device")
  (return-type "GdkDragContext*")
  (parameters
    '("GdkWindow*" "window")
    '("GdkDevice*" "device")
    '("GList*" "targets")
  )
)

(define-function gdk_drag_find_window_for_screen
  (c-name "gdk_drag_find_window_for_screen")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkWindow*" "drag_window")
    '("GdkScreen*" "screen")
    '("gint" "x_root")
    '("gint" "y_root")
    '("GdkWindow**" "dest_window")
    '("GdkDragProtocol*" "protocol")
  )
)

(define-function gdk_drag_motion
  (c-name "gdk_drag_motion")
  (return-type "gboolean")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkWindow*" "dest_window")
    '("GdkDragProtocol" "protocol")
    '("gint" "x_root")
    '("gint" "y_root")
    '("GdkDragAction" "suggested_action")
    '("GdkDragAction" "possible_actions")
    '("guint32" "time_")
  )
)

(define-function gdk_drag_drop
  (c-name "gdk_drag_drop")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("guint32" "time_")
  )
)

(define-function gdk_drag_abort
  (c-name "gdk_drag_abort")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("guint32" "time_")
  )
)

(define-function gdk_drag_drop_succeeded
  (c-name "gdk_drag_drop_succeeded")
  (return-type "gboolean")
  (parameters
    '("GdkDragContext*" "context")
  )
)

;;  From gdkevents.h

(define-function gdk_event_get_type
  (c-name "gdk_event_get_type")
  (return-type "GType")
)

(define-function gdk_event_sequence_get_type
  (c-name "gdk_event_sequence_get_type")
  (return-type "GType")
)

(define-function gdk_events_pending
  (c-name "gdk_events_pending")
  (return-type "gboolean")
)

(define-function gdk_event_get
  (c-name "gdk_event_get")
  (return-type "GdkEvent*")
)

(define-function gdk_event_peek
  (c-name "gdk_event_peek")
  (return-type "GdkEvent*")
)

(define-method put
  (of-object "GdkEvent")
  (c-name "gdk_event_put")
  (return-type "none")
)

(define-function gdk_event_new
  (c-name "gdk_event_new")
  (is-constructor-of "GdkEvent")
  (return-type "GdkEvent*")
  (parameters
    '("GdkEventType" "type")
  )
)

(define-method copy
  (of-object "GdkEvent")
  (c-name "gdk_event_copy")
  (return-type "GdkEvent*")
)

(define-method free
  (of-object "GdkEvent")
  (c-name "gdk_event_free")
  (return-type "none")
)

(define-method get_window
  (of-object "GdkEvent")
  (c-name "gdk_event_get_window")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "GdkWindow*")
)

(define-method get_time
  (of-object "GdkEvent")
  (c-name "gdk_event_get_time")
  (return-type "guint32")
)

(define-method get_state
  (of-object "GdkEvent")
  (c-name "gdk_event_get_state")
  (return-type "gboolean")
  (parameters
    '("GdkModifierType*" "state")
  )
)

(define-method get_coords
  (of-object "GdkEvent")
  (c-name "gdk_event_get_coords")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "x_win")
    '("gdouble*" "y_win")
  )
)

(define-method get_root_coords
  (of-object "GdkEvent")
  (c-name "gdk_event_get_root_coords")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "x_root")
    '("gdouble*" "y_root")
  )
)

(define-method get_button
  (of-object "GdkEvent")
  (c-name "gdk_event_get_button")
  (available "GDK_AVAILABLE_IN_3_2")
  (return-type "gboolean")
  (parameters
    '("guint*" "button")
  )
)
(define-method get_click_count
  (of-object "GdkEvent")
  (c-name "gdk_event_get_click_count")
  (available "GDK_AVAILABLE_IN_3_2")
  (return-type "gboolean")
  (parameters
    '("guint*" "click_count")
  )
)
(define-method get_keyval
  (of-object "GdkEvent")
  (c-name "gdk_event_get_keyval")
  (available "GDK_AVAILABLE_IN_3_2")
  (return-type "gboolean")
  (parameters
    '("guint*" "keyval")
  )
)
(define-method get_keycode
  (of-object "GdkEvent")
  (c-name "gdk_event_get_keycode")
  (available "GDK_AVAILABLE_IN_3_2")
  (return-type "gboolean")
  (parameters
    '("guint16*" "keycode")
  )
)
(define-method get_scroll_direction
  (of-object "GdkEvent")
  (c-name "gdk_event_get_scroll_direction")
  (available "GDK_AVAILABLE_IN_3_2")
  (return-type "gboolean")
  (parameters
    '("GdkScrollDirection*" "direction")
  )
)
(define-method get_scroll_deltas
  (of-object "GdkEvent")
  (c-name "gdk_event_get_scroll_deltas")
  (available "GDK_AVAILABLE_IN_3_4")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "delta_x")
    '("gdouble*" "delta_y")
  )
)

(define-method get_axis
  (of-object "GdkEvent")
  (c-name "gdk_event_get_axis")
  (return-type "gboolean")
  (parameters
    '("GdkAxisUse" "axis_use")
    '("gdouble*" "value")
  )
)
(define-method set_device
  (of-object "GdkEvent")
  (c-name "gdk_event_set_device")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
  )
)

(define-method get_device
  (of-object "GdkEvent")
  (c-name "gdk_event_get_device")
  (return-type "GdkDevice*")
)

(define-method set_source_device
  (of-object "GdkEvent")
  (c-name "gdk_event_set_source_device")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
  )
)
(define-method get_source_device
  (of-object "GdkEvent")
  (c-name "gdk_event_get_source_device")
  (return-type "GdkDevice*")
)

(define-function gdk_event_request_motions
  (c-name "gdk_event_request_motions")
  (return-type "none")
  (parameters
    '("const-GdkEventMotion*" "event")
  )
)
(define-method triggers_context_menu
  (of-object "GdkEvent")
  (c-name "gdk_event_triggers_context_menu")
  (available "GDK_AVAILABLE_IN_3_4")
  (return-type "gboolean")
)

(define-method s_get_distance
  (of-object "GdkEvent")
  (c-name "gdk_events_get_distance")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event2")
    '("gdouble*" "distance")
  )
)
(define-method s_get_angle
  (of-object "GdkEvent")
  (c-name "gdk_events_get_angle")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event2")
    '("gdouble*" "angle")
  )
)

(define-method s_get_center
  (of-object "GdkEvent")
  (c-name "gdk_events_get_center")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event2")
    '("gdouble*" "x")
    '("gdouble*" "y")
  )
)

(define-function gdk_event_handler_set
  (c-name "gdk_event_handler_set")
  (return-type "none")
  (parameters
    '("GdkEventFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)
(define-method set_screen
  (of-object "GdkEvent")
  (c-name "gdk_event_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GdkEvent")
  (c-name "gdk_event_get_screen")
  (return-type "GdkScreen*")
)

;; XXX
;; (define-method get_event_sequence
;;   (of-object "GdkEvent")
;;   (c-name "gdk_event_get_event_sequence")
;;   (available "GDK_AVAILABLE_IN_3_4")
;;   (return-type "GdkEventSequence*")
;; )

(define-method get_event_type
  (of-object "GdkEvent")
  (c-name "gdk_event_get_event_type")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "GdkEventType")
)

(define-function gdk_set_show_events
  (c-name "gdk_set_show_events")
  (return-type "none")
  (parameters
    '("gboolean" "show_events")
  )
)

(define-function gdk_get_show_events
  (c-name "gdk_get_show_events")
  (return-type "gboolean")
)

(define-function gdk_setting_get
  (c-name "gdk_setting_get")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
    '("GValue*" "value")
  )
)

;; From gdkframeclock.h

(define-function gdk_frame_clock_get_type
  (c-name "gdk_frame_clock_get_type")
  (return-type "GType")
)

(define-method get_frame_time
  (of-object "GdkFrameClock")
  (c-name "gdk_frame_clock_get_frame_time")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "gint64")
  )

(define-method request_phase
  (of-object "GdkFrameClock")
  (c-name "gdk_frame_clock_request_phase")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "none")
  (parameters
    '("GdkFrameClockPhase" "phase")
  )
)

(define-method begin_updating
  (of-object "GdkFrameClock")
  (c-name "gdk_frame_clock_begin_updating")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "none")
)

(define-method end_updating
  (of-object "GdkFrameClock")
  (c-name "gdk_frame_clock_end_updating")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "none")
)

;; XXXX
;; (define-method get_frame_counter
;;   (of-object "GdkFrameClock")
;;   (c-name "gdk_frame_clock_get_frame_counter")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

;; (define-method get_history_start
;;   (of-object "GdkFrameClock")
;;   (c-name "gdk_frame_clock_get_history_start")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

;; (define-method get_timings
;;   (of-object "GdkFrameClock")
;;   (c-name "gdk_frame_clock_get_timings")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "GdkFrameTimings*")
;;   (parameters
;;     '("gint64" "frame_counter")
;;   )
;; )

(define-method get_current_timings
  (of-object "GdkFrameClock")
  (c-name "gdk_frame_clock_get_current_timings")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "GdkFrameTimings*")
)

;; XXX
;; (define-method get_refresh_info
;;   (of-object "GdkFrameClock")
;;   (c-name "gdk_frame_clock_get_refresh_info")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "none")
;;   (parameters
;;     '("gint64" "base_time")
;;     '("gint64*" "refresh_interval_return")
;;     '("gint64*" "presentation_time_return")
;;   )
;; )

;; From gdkframeclockidle.h

(define-function gdk_frame_clock_idle_get_type
  (c-name "gdk_frame_clock_idle_get_type")
  (return-type "GType")
)

;; From gdkframeclockprivate.h

;; From gdkframetimings.h

(define-function gdk_frame_timings_get_type
  (c-name "gdk_frame_timings_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GdkFrameTimings")
  (c-name "gdk_frame_timings_ref")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "GdkFrameTimings*")
)

(define-method unref
  (of-object "GdkFrameTimings")
  (c-name "gdk_frame_timings_unref")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "none")
)

;; (define-method get_frame_counter
;;   (of-object "GdkFrameTimings")
;;   (c-name "gdk_frame_timings_get_frame_counter")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

(define-method get_complete
  (of-object "GdkFrameTimings")
  (c-name "gdk_frame_timings_get_complete")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "gboolean")
)

;; (define-method get_frame_time
;;   (of-object "GdkFrameTimings")
;;   (c-name "gdk_frame_timings_get_frame_time")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

;; (define-method get_presentation_time
;;   (of-object "GdkFrameTimings")
;;   (c-name "gdk_frame_timings_get_presentation_time")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

;; (define-method get_refresh_interval
;;   (of-object "GdkFrameTimings")
;;   (c-name "gdk_frame_timings_get_refresh_interval")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

;; (define-method get_predicted_presentation_time
;;   (of-object "GdkFrameTimings")
;;   (c-name "gdk_frame_timings_get_predicted_presentation_time")
;;   (available "GDK_AVAILABLE_IN_3_8")
;;   (return-type "gint64")
;; )

;; From gdkglcontext.h

(define-function gdk_gl_error_quark
  (c-name "gdk_gl_error_quark")
  (return-type "GQuark")
)

(define-function gdk_gl_context_get_type
  (c-name "gdk_gl_context_get_type")
  (return-type "GType")
)

(define-method get_display
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_display")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "GdkDisplay*")
)

(define-method get_window
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_window")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "GdkWindow*")
)

(define-method get_shared_context
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_shared_context")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "GdkGLContext*")
)

(define-method get_version
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_version")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
  (parameters
    '("int*" "major")
    '("int*" "minor")
  )
)

(define-method set_required_version
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_set_required_version")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
  (parameters
    '("int" "major")
    '("int" "minor")
  )
)

(define-method get_required_version
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_required_version")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
  (parameters
    '("int*" "major")
    '("int*" "minor")
  )
)

(define-method set_debug_enabled
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_set_debug_enabled")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_debug_enabled
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_debug_enabled")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "gboolean")
)

(define-method set_forward_compatible
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_set_forward_compatible")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
  (parameters
    '("gboolean" "compatible")
  )
)

(define-method get_forward_compatible
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_forward_compatible")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "gboolean")
)

(define-method realize
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_realize")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method make_current
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_make_current")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
)

(define-function gdk_gl_context_get_current
  (c-name "gdk_gl_context_get_current")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "GdkGLContext*")
)

(define-function gdk_gl_context_clear_current
  (c-name "gdk_gl_context_clear_current")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
)



;; From gdkglcontextprivate.h

;; (define-method upload_texture
;;   (of-object "GdkGLContext")
;;   (c-name "gdk_gl_context_upload_texture")
;;   (available "GDK_AVAILABLE_IN_3_18")
;;   (return-type "none")
;;   (parameters
;;     '("cairo_surface_t*" "image_surface")
;;     '("int" "width")
;;     '("int" "height")
;;     '("guint" "texture_target")
;;   )
;; )

(define-method get_paint_data
  (of-object "GdkGLContext")
  (c-name "gdk_gl_context_get_paint_data")
  (available "")
  (return-type "GdkGLContextPaintData*")
)

;; (define-method use_texture_rectangle
;;   (of-object "GdkGLContext")
;;   (c-name "gdk_gl_context_use_texture_rectangle")
;;   (available "GDK_AVAILABLE_IN_3_18")
;;   (return-type "gboolean")
;; )

;; (define-method has_framebuffer_blit
;;   (of-object "GdkGLContext")
;;   (c-name "gdk_gl_context_has_framebuffer_blit")
;;   (available "GDK_AVAILABLE_IN_3_18")
;;   (return-type "gboolean")
;; )

;; (define-method has_frame_terminator
;;   (of-object "GdkGLContext")
;;   (c-name "gdk_gl_context_has_frame_terminator")
;;   (available "GDK_AVAILABLE_IN_3_18")
;;   (return-type "gboolean")
;; )

;; (define-method end_frame
;;   (of-object "GdkGLContext")
;;   (c-name "gdk_gl_context_end_frame")
;;   (available "")
;;   (return-type "none")
;;   (parameters
;;     '("cairo_region_t*" "painted")
;;     '("cairo_region_t*" "damage")
;;   )
;; )


;; From /opt/gtk2/include/gtk-2.0/gdk/gdkfont.h

(define-function font_load
  (is-constructor-of GdkFont)
  (c-name "gdk_font_load")
  (return-type "GdkFont*")
  (parameters
    '("const-gchar*" "font_name")
  )
)

;; (define-function fontset_load
;;   (c-name "gdk_fontset_load")
;;   (return-type "GdkFont*")
;;   (parameters
;;     '("const-gchar*" "fontset_name")
;;   )
;; )

(define-function font_from_description
  (c-name "gdk_font_from_description")
  (return-type "GdkFont*")
  (parameters
    '("PangoFontDescription*" "font_desc")
  )
)

(define-method id
  (of-object "GdkFont")
  (c-name "gdk_font_id")
  (return-type "gint")
)

(define-method string_width
  (of-object "GdkFont")
  (c-name "gdk_string_width")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method width
  (of-object "GdkFont")
  (c-name "gdk_text_width")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length" (default "-1"))
  )
)

(define-method text_width_wc
  (of-object "GdkFont")
  (c-name "gdk_text_width_wc")
  (return-type "gint")
  (parameters
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
  )
)

(define-method char_width
  (of-object "GdkFont")
  (c-name "gdk_char_width")
  (return-type "gint")
  (parameters
    '("gchar" "character")
  )
)

(define-method char_width_wc
  (of-object "GdkFont")
  (c-name "gdk_char_width_wc")
  (return-type "gint")
  (parameters
    '("GdkWChar" "character")
  )
)

(define-method string_measure
  (of-object "GdkFont")
  (c-name "gdk_string_measure")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method measure
  (of-object "GdkFont")
  (c-name "gdk_text_measure")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length" (default "-1"))
  )
)

(define-method char_measure
  (of-object "GdkFont")
  (c-name "gdk_char_measure")
  (return-type "gint")
  (parameters
    '("gchar" "character")
  )
)

(define-method string_height
  (of-object "GdkFont")
  (c-name "gdk_string_height")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method height
  (of-object "GdkFont")
  (c-name "gdk_text_height")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length" (default "-1"))
  )
)

(define-method char_height
  (of-object "GdkFont")
  (c-name "gdk_char_height")
  (return-type "gint")
  (parameters
    '("gchar" "character")
  )
)

(define-method extents
  (of-object "GdkFont")
  (c-name "gdk_text_extents")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gint" "text_length")
    '("gint*" "lbearing")
    '("gint*" "rbearing")
    '("gint*" "width")
    '("gint*" "ascent")
    '("gint*" "descent")
  )
)

(define-method text_extents_wc
  (of-object "GdkFont")
  (c-name "gdk_text_extents_wc")
  (return-type "none")
  (parameters
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
    '("gint*" "lbearing")
    '("gint*" "rbearing")
    '("gint*" "width")
    '("gint*" "ascent")
    '("gint*" "descent")
  )
)

(define-method string_extents
  (of-object "GdkFont")
  (c-name "gdk_string_extents")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
    '("gint*" "lbearing")
    '("gint*" "rbearing")
    '("gint*" "width")
    '("gint*" "ascent")
    '("gint*" "descent")
  )
)



;; From /opt/gtk2/include/gtk-2.0/gdk/gdkgc.h

(define-function gdk_gc_get_type
  (c-name "gdk_gc_get_type")
  (return-type "GType")
)

(define-function gc_new
  (c-name "gdk_gc_new")
  (is-constructor-of "GdkGC")
  (return-type "GdkGC*")
  (parameters
    '("GdkDrawable*" "drawable")
  )
)

; (define-method new_gc
;   (of-object "GdkDrawable")
;   (c-name "gdk_gc_new_with_values")
;   (return-type "GdkGC*")
;   (parameters
;     '("GdkGCValues*" "values")
;     '("GdkGCValuesMask" "values_mask")
;   )
; )

(define-method get_values
  (of-object "GdkGC")
  (c-name "gdk_gc_get_values")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
  )
)

(define-method set_values
  (of-object "GdkGC")
  (c-name "gdk_gc_set_values")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "values_mask")
  )
)

(define-method set_foreground
  (of-object "GdkGC")
  (c-name "gdk_gc_set_foreground")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_background
  (of-object "GdkGC")
  (c-name "gdk_gc_set_background")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_font
  (of-object "GdkGC")
  (c-name "gdk_gc_set_font")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
  )
)

(define-method set_function
  (of-object "GdkGC")
  (c-name "gdk_gc_set_function")
  (return-type "none")
  (parameters
    '("GdkFunction" "function")
  )
)

(define-method set_fill
  (of-object "GdkGC")
  (c-name "gdk_gc_set_fill")
  (return-type "none")
  (parameters
    '("GdkFill" "fill")
  )
)

;; (define-method set_tile
;;   (of-object "GdkGC")
;;   (c-name "gdk_gc_set_tile")
;;   (return-type "none")
;;   (parameters
;;     '("GdkPixmap*" "tile")
;;   )
;; )

;; (define-method set_stipple
;;   (of-object "GdkGC")
;;   (c-name "gdk_gc_set_stipple")
;;   (return-type "none")
;;   (parameters
;;     '("GdkPixmap*" "stipple")
;;   )
;; )

(define-method set_ts_origin
  (of-object "GdkGC")
  (c-name "gdk_gc_set_ts_origin")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_clip_origin
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_origin")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_clip_mask
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "mask")
  )
)

(define-method set_clip_rectangle
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_rectangle")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rectangle")
  )
)

(define-method set_clip_region
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region")
  )
)

(define-method set_subwindow
  (of-object "GdkGC")
  (c-name "gdk_gc_set_subwindow")
  (return-type "none")
  (parameters
    '("GdkSubwindowMode" "mode")
  )
)

(define-method set_exposures
  (of-object "GdkGC")
  (c-name "gdk_gc_set_exposures")
  (return-type "none")
  (parameters
    '("gboolean" "exposures")
  )
)

(define-method set_line_attributes
  (of-object "GdkGC")
  (c-name "gdk_gc_set_line_attributes")
  (return-type "none")
  (parameters
    '("gint" "line_width")
    '("GdkLineStyle" "line_style")
    '("GdkCapStyle" "cap_style")
    '("GdkJoinStyle" "join_style")
  )
)

(define-method set_dashes
  (of-object "GdkGC")
  (c-name "gdk_gc_set_dashes")
  (return-type "none")
  (parameters
    '("gint" "dash_offset")
    '("gint8[]" "dash_list")
    '("gint" "n")
  )
)

(define-method offset
  (of-object "GdkGC")
  (c-name "gdk_gc_offset")
  (return-type "none")
  (parameters
    '("gint" "x_offset")
    '("gint" "y_offset")
  )
)

(define-method copy
  (of-object "GdkGC")
  (c-name "gdk_gc_copy")
  (return-type "none")
  (parameters
    '("GdkGC*" "src_gc")
  )
)

(define-method set_colormap
  (of-object "GdkGC")
  (c-name "gdk_gc_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_colormap
  (of-object "GdkGC")
  (c-name "gdk_gc_get_colormap")
  (return-type "GdkColormap*")
)

(define-method set_rgb_fg_color
  (of-object "GdkGC")
  (c-name "gdk_gc_set_rgb_fg_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)

(define-method set_rgb_bg_color
  (of-object "GdkGC")
  (c-name "gdk_gc_set_rgb_bg_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color")
  )
)


;; From /opt/gtk2/include/gtk-2.0/gdk/gdkimage.h

(define-function gdk_image_get_type
  (c-name "gdk_image_get_type")
  (return-type "GType")
)

(define-function gdk_image_new
  (is-constructor-of GdkImage)
  (c-name "gdk_image_new")
  (return-type "GdkImage*")
  (parameters
    '("GdkImageType" "type")
    '("GdkVisual*" "visual")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method image_get
  (of-object "GdkDrawable")
  (deprecated "use GdkDrawable.get_image")
  (c-name "gdk_image_get")
  (return-type "GdkImage*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method put_pixel
  (of-object "GdkImage")
  (c-name "gdk_image_put_pixel")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("guint32" "pixel")
  )
)

(define-method get_pixel
  (of-object "GdkImage")
  (c-name "gdk_image_get_pixel")
  (return-type "guint32")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_colormap
  (of-object "GdkImage")
  (c-name "gdk_image_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
  )
)

(define-method get_colormap
  (of-object "GdkImage")
  (c-name "gdk_image_get_colormap")
  (return-type "GdkColormap*")
)

;; from /opt/gtk2/include/gtk-2.0/gdk/gdkkeys.h

(define-function gdk_keymap_get_type
  (c-name "gdk_keymap_get_type")
  (return-type "GType")
)

(define-function keymap_get_default
  (c-name "gdk_keymap_get_default")
  (return-type "GdkKeymap*")
)

(define-method lookup_key
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_lookup_key")
  (return-type "guint")
  (parameters
    '("const-GdkKeymapKey*" "key")
  )
)

(define-method translate_keyboard_state
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_translate_keyboard_state")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode")
    '("GdkModifierType" "state")
    '("gint" "group")
    '("guint*" "keyval")
    '("gint*" "effective_group")
    '("gint*" "level")
    '("GdkModifierType*" "consumed_modifiers")
  )
)

(define-method get_entries_for_keyval
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_entries_for_keyval")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
    '("GdkKeymapKey**" "keys")
    '("gint*" "n_keys")
  )
)

(define-method get_entries_for_keycode
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_entries_for_keycode")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode")
    '("GdkKeymapKey**" "keys")
    '("guint**" "keyvals")
    '("gint*" "n_entries")
  )
)

(define-method get_direction
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_direction")
  (return-type "PangoDirection")
)

(define-function keyval_name
  (c-name "gdk_keyval_name")
  (return-type "gchar*")
  (parameters
    '("guint" "keyval")
  )
  (caller-owns-return #f)
)

(define-function keyval_from_name
  (c-name "gdk_keyval_from_name")
  (return-type "guint")
  (parameters
    '("const-gchar*" "keyval_name")
  )
)

(define-function keyval_convert_case
  (c-name "gdk_keyval_convert_case")
  (return-type "none")
  (parameters
    '("guint" "symbol")
    '("guint*" "lower")
    '("guint*" "upper")
  )
)

(define-function keyval_to_upper
  (c-name "gdk_keyval_to_upper")
  (return-type "guint")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_to_lower
  (c-name "gdk_keyval_to_lower")
  (return-type "guint")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_is_upper
  (c-name "gdk_keyval_is_upper")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_is_lower
  (c-name "gdk_keyval_is_lower")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval")
  )
)

(define-function keyval_to_unicode
  (c-name "gdk_keyval_to_unicode")
  (return-type "guint32")
  (parameters
    '("guint" "keyval")
  )
)

(define-function unicode_to_keyval
  (c-name "gdk_unicode_to_keyval")
  (return-type "guint")
  (parameters
    '("guint32" "wc")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkproperty.h

(define-method name
  (of-object "GdkAtom")
  (c-name "gdk_atom_name")
  (return-type "gchar*")
)

(define-function atom_intern
  (c-name "gdk_atom_intern")
  (return-type "GdkAtom")
  (parameters
   '("gchar*" "atom_name")
    '("gboolean" "only_if_exists" (default "FALSE"))
  )
)

(define-method property_get
  (of-object "GdkWindow")
  (c-name "gdk_property_get")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "property")
    '("GdkAtom" "type")
    '("gulong" "offset")
    '("gulong" "length")
    '("gint" "pdelete")
    '("GdkAtom*" "actual_property_type")
    '("gint*" "actual_format")
    '("gint*" "actual_length")
    '("guchar**" "data")
  )
)

(define-method property_change
  (of-object "GdkWindow")
  (c-name "gdk_property_change")
  (return-type "none")
  (parameters
    '("GdkAtom" "property")
    '("GdkAtom" "type")
    '("gint" "format")
    '("GdkPropMode" "mode")
    '("const-guchar*" "data")
    '("gint" "nelements")
  )
)

(define-method property_delete
  (of-object "GdkWindow")
  (c-name "gdk_property_delete")
  (return-type "none")
  (parameters
    '("GdkAtom" "property")
  )
)

;; From /opt/gtk2/include/gtk-2.0/gdk/gdkrgb.h

;; (define-function rgb_xpixel_from_rgb
;;   (c-name "gdk_rgb_xpixel_from_rgb")
;;   (return-type "gulong")
;;   (parameters
;;     '("guint32" "rgb")
;;   )
;; )

(define-function rgb_gc_set_foreground
  (c-name "gdk_rgb_gc_set_foreground")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("guint32" "rgb")
  )
)

(define-function rgb_gc_set_background
  (c-name "gdk_rgb_gc_set_background")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("guint32" "rgb")
  )
)

(define-method draw_rgb_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "rgb_buf")
    '("gint" "rowstride")
  )
)

(define-method draw_rgb_image_dithalign
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_image_dithalign")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "rgb_buf")
    '("gint" "rowstride")
    '("gint" "xdith")
    '("gint" "ydith")
  )
)

(define-method draw_rgb_32_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_32_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
  )
)

(define-method draw_gray_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_gray_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
  )
)

(define-function rgb_cmap_new
  (c-name "gdk_rgb_cmap_new")
  (return-type "GdkRgbCmap*")
  (parameters
    '("guint32*" "colors")
    '("gint" "n_colors")
  )
)

(define-method draw_indexed_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_indexed_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dith")
    '("guchar*" "buf")
    '("gint" "rowstride")
    '("GdkRgbCmap*" "cmap")
  )
)

;; (define-function rgb_ditherable
;;   (c-name "gdk_rgb_ditherable")
;;   (return-type "gboolean")
;; )

;; (define-function rgb_set_verbose
;;   (c-name "gdk_rgb_set_verbose")
;;   (return-type "none")
;;   (parameters
;;     '("gboolean" "verbose")
;;   )
;; )

;; (define-function rgb_set_install
;;   (c-name "gdk_rgb_set_install")
;;   (return-type "none")
;;   (parameters
;;     '("gboolean" "install")
;;   )
;; )

;; (define-function rgb_set_min_colors
;;   (c-name "gdk_rgb_set_min_colors")
;;   (return-type "none")
;;   (parameters
;;     '("gint" "min_colors")
;;   )
;; )

(define-function rgb_get_cmap
  (c-name "gdk_rgb_get_cmap")
  (return-type "GdkColormap*")
)

;; (define-function rgb_get_visual
;;   (c-name "gdk_rgb_get_visual")
;;   (return-type "GdkVisual*")
;; )



;; From gdkselection.h

(define-function gdk_selection_owner_set
  (c-name "gdk_selection_owner_set")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "owner")
    '("GdkAtom" "selection")
    '("guint32" "time_")
    '("gboolean" "send_event")
  )
)

(define-function gdk_selection_owner_get
  (c-name "gdk_selection_owner_get")
  (return-type "GdkWindow*")
  (parameters
    '("GdkAtom" "selection")
  )
)

(define-function gdk_selection_owner_set_for_display
  (c-name "gdk_selection_owner_set_for_display")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow*" "owner")
    '("GdkAtom" "selection")
    '("guint32" "time_")
    '("gboolean" "send_event")
  )
)

(define-function gdk_selection_owner_get_for_display
  (c-name "gdk_selection_owner_get_for_display")
  (return-type "GdkWindow*")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkAtom" "selection")
  )
)

(define-function gdk_selection_convert
  (c-name "gdk_selection_convert")
  (return-type "none")
  (parameters
    '("GdkWindow*" "requestor")
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("guint32" "time_")
  )
)

(define-function gdk_selection_property_get
  (c-name "gdk_selection_property_get")
  (return-type "gint")
  (parameters
    '("GdkWindow*" "requestor")
    '("guchar**" "data")
    '("GdkAtom*" "prop_type")
    '("gint*" "prop_format")
  )
)

(define-function gdk_selection_send_notify
  (c-name "gdk_selection_send_notify")
  (return-type "none")
  (parameters
    '("GdkWindow*" "requestor")
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("GdkAtom" "property")
    '("guint32" "time_")
  )
)

(define-function gdk_selection_send_notify_for_display
  (c-name "gdk_selection_send_notify_for_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkWindow*" "requestor")
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("GdkAtom" "property")
    '("guint32" "time_")
  )
)

;; From gdkvisual.h

(define-function gdk_visual_get_type
  (c-name "gdk_visual_get_type")
  (return-type "GType")
)

(define-function gdk_visual_get_best_depth
  (c-name "gdk_visual_get_best_depth")
  (return-type "gint")
)

(define-function gdk_visual_get_best_type
  (c-name "gdk_visual_get_best_type")
  (return-type "GdkVisualType")
)

(define-function gdk_visual_get_system
  (c-name "gdk_visual_get_system")
  (return-type "GdkVisual*")
)

(define-function gdk_visual_get_best
  (c-name "gdk_visual_get_best")
  (return-type "GdkVisual*")
)

(define-function gdk_visual_get_best_with_depth
  (c-name "gdk_visual_get_best_with_depth")
  (return-type "GdkVisual*")
  (parameters
    '("gint" "depth")
  )
)

(define-function gdk_visual_get_best_with_type
  (c-name "gdk_visual_get_best_with_type")
  (return-type "GdkVisual*")
  (parameters
    '("GdkVisualType" "visual_type")
  )
)

(define-function gdk_visual_get_best_with_both
  (c-name "gdk_visual_get_best_with_both")
  (return-type "GdkVisual*")
  (parameters
    '("gint" "depth")
    '("GdkVisualType" "visual_type")
  )
)

(define-function gdk_query_depths
  (c-name "gdk_query_depths")
  (return-type "none")
  (parameters
    '("gint**" "depths")
    '("gint*" "count")
  )
)

(define-function gdk_query_visual_types
  (c-name "gdk_query_visual_types")
  (return-type "none")
  (parameters
    '("GdkVisualType**" "visual_types")
    '("gint*" "count")
  )
)

(define-function gdk_list_visuals
  (c-name "gdk_list_visuals")
  (return-type "GList*")
)

(define-method get_screen
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_screen")
  (return-type "GdkScreen*")
)

(define-method get_visual_type
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_visual_type")
  (return-type "GdkVisualType")
)

(define-method get_depth
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_depth")
  (return-type "gint")
)

(define-method get_byte_order
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_byte_order")
  (return-type "GdkByteOrder")
)

(define-method get_colormap_size
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_colormap_size")
  (return-type "gint")
)

(define-method get_bits_per_rgb
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_bits_per_rgb")
  (return-type "gint")
)

(define-method get_red_pixel_details
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_red_pixel_details")
  (return-type "none")
  (parameters
    '("guint32*" "mask")
    '("gint*" "shift")
    '("gint*" "precision")
  )
)

(define-method get_green_pixel_details
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_green_pixel_details")
  (return-type "none")
  (parameters
    '("guint32*" "mask")
    '("gint*" "shift")
    '("gint*" "precision")
  )
)

(define-method get_blue_pixel_details
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_blue_pixel_details")
  (return-type "none")
  (parameters
    '("guint32*" "mask")
    '("gint*" "shift")
    '("gint*" "precision")
  )
)

;; ????

(define-function visual_new
  (c-name "gdk_visual_new")
  (is-constructor-of "GdkVisual")
  (return-type "GdkVisual")
)

;; From gdkwindow.h

(define-function gdk_window_get_type
  (c-name "gdk_window_get_type")
  (return-type "GType")
)

(define-function gdk_window_new
  (c-name "gdk_window_new")
  (is-constructor-of "GdkWindow")
  (return-type "GdkWindow*")
  (parameters
    '("GdkWindow*" "parent")
    '("GdkWindowAttr*" "attributes")
    '("gint" "attributes_mask")
  )
)

(define-method destroy
  (of-object "GdkWindow")
  (c-name "gdk_window_destroy")
  (return-type "none")
)

(define-method get_window_type
  (of-object "GdkWindow")
  (c-name "gdk_window_get_window_type")
  (return-type "GdkWindowType")
)

(define-method is_destroyed
  (of-object "GdkWindow")
  (c-name "gdk_window_is_destroyed")
  (return-type "gboolean")
)

(define-method get_visual
  (of-object "GdkWindow")
  (c-name "gdk_window_get_visual")
  (return-type "GdkVisual*")
)

(define-method get_screen
  (of-object "GdkWindow")
  (c-name "gdk_window_get_screen")
  (return-type "GdkScreen*")
)

(define-method get_display
  (of-object "GdkWindow")
  (c-name "gdk_window_get_display")
  (return-type "GdkDisplay*")
)

(define-method show
  (of-object "GdkWindow")
  (c-name "gdk_window_show")
  (return-type "none")
)

(define-method hide
  (of-object "GdkWindow")
  (c-name "gdk_window_hide")
  (return-type "none")
)

(define-method withdraw
  (of-object "GdkWindow")
  (c-name "gdk_window_withdraw")
  (return-type "none")
)

(define-method show_unraised
  (of-object "GdkWindow")
  (c-name "gdk_window_show_unraised")
  (return-type "none")
)

(define-method move
  (of-object "GdkWindow")
  (c-name "gdk_window_move")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method resize
  (of-object "GdkWindow")
  (c-name "gdk_window_resize")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method move_resize
  (of-object "GdkWindow")
  (c-name "gdk_window_move_resize")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method reparent
  (of-object "GdkWindow")
  (c-name "gdk_window_reparent")
  (return-type "none")
  (parameters
    '("GdkWindow*" "new_parent")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method raise
  (of-object "GdkWindow")
  (c-name "gdk_window_raise")
  (return-type "none")
)

(define-method lower
  (of-object "GdkWindow")
  (c-name "gdk_window_lower")
  (return-type "none")
)

(define-method restack
  (of-object "GdkWindow")
  (c-name "gdk_window_restack")
  (return-type "none")
  (parameters
    '("GdkWindow*" "sibling")
    '("gboolean" "above")
  )
)

(define-method focus
  (of-object "GdkWindow")
  (c-name "gdk_window_focus")
  (return-type "none")
  (parameters
    '("guint32" "timestamp" (null-ok) (default "GDK_CURRENT_TIME"))
  )
)

(define-method set_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_set_user_data")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method set_override_redirect
  (of-object "GdkWindow")
  (c-name "gdk_window_set_override_redirect")
  (return-type "none")
  (parameters
    '("gboolean" "override_redirect")
  )
)

(define-method get_accept_focus
  (of-object "GdkWindow")
  (c-name "gdk_window_get_accept_focus")
  (return-type "gboolean")
)

(define-method set_accept_focus
  (of-object "GdkWindow")
  (c-name "gdk_window_set_accept_focus")
  (return-type "none")
  (parameters
    '("gboolean" "accept_focus")
  )
)

(define-method get_focus_on_map
  (of-object "GdkWindow")
  (c-name "gdk_window_get_focus_on_map")
  (return-type "gboolean")
)

(define-method set_focus_on_map
  (of-object "GdkWindow")
  (c-name "gdk_window_set_focus_on_map")
  (return-type "none")
  (parameters
    '("gboolean" "focus_on_map")
  )
)

(define-method add_filter
  (of-object "GdkWindow")
  (c-name "gdk_window_add_filter")
  (return-type "none")
  (parameters
    '("GdkFilterFunc" "function")
    '("gpointer" "data")
  )
)

(define-method remove_filter
  (of-object "GdkWindow")
  (c-name "gdk_window_remove_filter")
  (return-type "none")
  (parameters
    '("GdkFilterFunc" "function")
    '("gpointer" "data")
  )
)

(define-method scroll
  (of-object "GdkWindow")
  (c-name "gdk_window_scroll")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method move_region
  (of-object "GdkWindow")
  (c-name "gdk_window_move_region")
  (return-type "none")
  (parameters
    '("const-cairo_region_t*" "region")
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method ensure_native
  (of-object "GdkWindow")
  (c-name "gdk_window_ensure_native")
  (return-type "gboolean")
)

(define-method shape_combine_region
  (of-object "GdkWindow")
  (c-name "gdk_window_shape_combine_region")
  (return-type "none")
  (parameters
    '("const-cairo_region_t*" "shape_region")
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)

(define-method set_child_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_set_child_shapes")
  (return-type "none")
)

(define-method get_composited
  (of-object "GdkWindow")
  (c-name "gdk_window_get_composited")
  (available "GDK_DEPRECATED_IN_3_16")
  (return-type "gboolean")
)

(define-method set_composited
  (of-object "GdkWindow")
  (c-name "gdk_window_set_composited")
  (available "GDK_DEPRECATED_IN_3_16")
  (return-type "none")
  (parameters
    '("gboolean" "composited")
  )
)

(define-method merge_child_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_merge_child_shapes")
  (return-type "none")
)

(define-method input_shape_combine_region
  (of-object "GdkWindow")
  (c-name "gdk_window_input_shape_combine_region")
  (return-type "none")
  (parameters
    '("const-cairo_region_t*" "shape_region")
    '("gint" "offset_x")
    '("gint" "offset_y")
  )
)

(define-method set_child_input_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_set_child_input_shapes")
  (return-type "none")
)

(define-method merge_child_input_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_merge_child_input_shapes")
  (return-type "none")
)

(define-method is_visible
  (of-object "GdkWindow")
  (c-name "gdk_window_is_visible")
  (return-type "gboolean")
)

(define-method is_viewable
  (of-object "GdkWindow")
  (c-name "gdk_window_is_viewable")
  (return-type "gboolean")
)

(define-method is_input_only
  (of-object "GdkWindow")
  (c-name "gdk_window_is_input_only")
  (return-type "gboolean")
)

(define-method is_shaped
  (of-object "GdkWindow")
  (c-name "gdk_window_is_shaped")
  (return-type "gboolean")
)

(define-method get_state
  (of-object "GdkWindow")
  (c-name "gdk_window_get_state")
  (return-type "GdkWindowState")
)

(define-method set_static_gravities
  (of-object "GdkWindow")
  (c-name "gdk_window_set_static_gravities")
  (available "GDK_DEPRECATED_IN_3_16")
  (return-type "gboolean")
  (parameters
    '("gboolean" "use_static")
  )
)

(define-method set_invalidate_handler
  (of-object "GdkWindow")
  (c-name "gdk_window_set_invalidate_handler")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "none")
  (parameters
    '("GdkWindowInvalidateHandlerFunc" "handler")
  )
)

(define-method has_native
  (of-object "GdkWindow")
  (c-name "gdk_window_has_native")
  (return-type "gboolean")
)

(define-method set_type_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_type_hint")
  (return-type "none")
  (parameters
    '("GdkWindowTypeHint" "hint")
  )
)

(define-method get_type_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_get_type_hint")
  (return-type "GdkWindowTypeHint")
)

(define-method get_modal_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_get_modal_hint")
  (return-type "gboolean")
)

(define-method set_modal_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_modal_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal")
  )
)

(define-method set_skip_taskbar_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_skip_taskbar_hint")
  (return-type "none")
  (parameters
    '("gboolean" "skips_taskbar")
  )
)

(define-method set_skip_pager_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_skip_pager_hint")
  (return-type "none")
  (parameters
    '("gboolean" "skips_pager")
  )
)

(define-method set_urgency_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_urgency_hint")
  (return-type "none")
  (parameters
    '("gboolean" "urgent")
  )
)

(define-method set_geometry_hints
  (of-object "GdkWindow")
  (c-name "gdk_window_set_geometry_hints")
  (return-type "none")
  (parameters
    '("const-GdkGeometry*" "geometry")
    '("GdkWindowHints" "geom_mask")
  )
)

(define-method get_clip_region
  (of-object "GdkWindow")
  (c-name "gdk_window_get_clip_region")
  (return-type "cairo_region_t*")
)

(define-method get_visible_region
  (of-object "GdkWindow")
  (c-name "gdk_window_get_visible_region")
  (return-type "cairo_region_t*")
)

(define-method begin_paint_rect
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_paint_rect")
  (return-type "none")
  (parameters
    '("const-GdkRectangle*" "rectangle")
  )
)

(define-method mark_paint_from_clip
  (of-object "GdkWindow")
  (c-name "gdk_window_mark_paint_from_clip")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
  )
)

(define-method begin_paint_region
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_paint_region")
  (return-type "none")
  (parameters
    '("const-cairo_region_t*" "region")
  )
)

(define-method end_paint
  (of-object "GdkWindow")
  (c-name "gdk_window_end_paint")
  (return-type "none")
)

(define-method flush
  (of-object "GdkWindow")
  (c-name "gdk_window_flush")
  (available "GDK_DEPRECATED_IN_3_14")
  (return-type "none")
)

(define-method set_title
  (of-object "GdkWindow")
  (c-name "gdk_window_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method set_role
  (of-object "GdkWindow")
  (c-name "gdk_window_set_role")
  (return-type "none")
  (parameters
    '("const-gchar*" "role")
  )
)

(define-method set_startup_id
  (of-object "GdkWindow")
  (c-name "gdk_window_set_startup_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "startup_id")
  )
)

(define-method set_transient_for
  (of-object "GdkWindow")
  (c-name "gdk_window_set_transient_for")
  (return-type "none")
  (parameters
    '("GdkWindow*" "parent")
  )
)

(define-method set_background_rgba
  (of-object "GdkWindow")
  (c-name "gdk_window_set_background_rgba")
  (return-type "none")
  (parameters
   '("const-GdkRGBA*" "rgba")
  )
)

(define-method set_background_pattern
  (of-object "GdkWindow")
  (c-name "gdk_window_set_background_pattern")
  (return-type "none")
  (parameters
    '("cairo_pattern_t*" "pattern")
  )
)

(define-method get_background_pattern
  (of-object "GdkWindow")
  (c-name "gdk_window_get_background_pattern")
  (return-type "cairo_pattern_t*")
)


(define-method set_cursor
  (of-object "GdkWindow")
  (c-name "gdk_window_set_cursor")
  (return-type "none")
  (parameters
    '("GdkCursor*" "cursor" (null-ok) (default "NULL"))
  )
)

(define-method get_cursor
  (of-object "GdkWindow")
  (c-name "gdk_window_get_cursor")
  (return-type "GdkCursor*")
)

(define-method set_device_cursor
  (of-object "GdkWindow")
  (c-name "gdk_window_set_device_cursor")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
    '("GdkCursor*" "cursor")
  )
)

(define-method get_device_cursor
  (of-object "GdkWindow")
  (c-name "gdk_window_get_device_cursor")
  (return-type "GdkCursor*")
  (parameters
    '("GdkDevice*" "device")
  )
)

(define-method get_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_get_user_data")
  (return-type "none")
  (parameters
    '("gpointer*" "data")
  )
)

(define-method get_geometry
  (of-object "GdkWindow")
  (c-name "gdk_window_get_geometry")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method get_width
  (of-object "GdkWindow")
  (c-name "gdk_window_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "GdkWindow")
  (c-name "gdk_window_get_height")
  (return-type "int")
)

(define-method get_position
  (of-object "GdkWindow")
  (c-name "gdk_window_get_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_origin")
  (return-type "gint")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_root_coords
  (of-object "GdkWindow")
  (c-name "gdk_window_get_root_coords")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint*" "root_x")
    '("gint*" "root_y")
  )
)

(define-method get_pointer
  (of-object "GdkWindow")
  (c-name "gdk_window_get_pointer")
  (return-type "none")
  (deprecated "use gdk_window_get_device_position")
  (parameters
   '("gint" "x")
   '("gint" "y")
   '("GdkModifierType*" "mask")
  )
)

(define-method coords_to_parent
  (of-object "GdkWindow")
  (c-name "gdk_window_coords_to_parent")
  (return-type "none")
  (parameters
    '("gdouble" "x")
    '("gdouble" "y")
    '("gdouble*" "parent_x")
    '("gdouble*" "parent_y")
  )
)

(define-method coords_from_parent
  (of-object "GdkWindow")
  (c-name "gdk_window_coords_from_parent")
  (return-type "none")
  (parameters
    '("gdouble" "parent_x")
    '("gdouble" "parent_y")
    '("gdouble*" "x")
    '("gdouble*" "y")
  )
)

(define-method get_root_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_root_origin")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_frame_extents
  (of-object "GdkWindow")
  (c-name "gdk_window_get_frame_extents")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-method get_scale_factor
  (of-object "GdkWindow")
  (c-name "gdk_window_get_scale_factor")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "gint")
)

(define-method get_device_position
  (of-object "GdkWindow")
  (c-name "gdk_window_get_device_position")
  (return-type "GdkWindow*")
  (parameters
    '("GdkDevice*" "device")
    '("gint*" "x")
    '("gint*" "y")
    '("GdkModifierType*" "mask")
  )
)

(define-method get_device_position_double
  (of-object "GdkWindow")
  (c-name "gdk_window_get_device_position_double")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "GdkWindow*")
  (parameters
    '("GdkDevice*" "device")
    '("gdouble*" "x")
    '("gdouble*" "y")
    '("GdkModifierType*" "mask")
  )
)

(define-method get_parent
  (of-object "GdkWindow")
  (c-name "gdk_window_get_parent")
  (return-type "GdkWindow*")
)

(define-method get_toplevel
  (of-object "GdkWindow")
  (c-name "gdk_window_get_toplevel")
  (return-type "GdkWindow*")
)

(define-method get_effective_parent
  (of-object "GdkWindow")
  (c-name "gdk_window_get_effective_parent")
  (return-type "GdkWindow*")
)

(define-method get_effective_toplevel
  (of-object "GdkWindow")
  (c-name "gdk_window_get_effective_toplevel")
  (return-type "GdkWindow*")
)

(define-method get_children
  (of-object "GdkWindow")
  (c-name "gdk_window_get_children")
  (return-type "GList*")
)

(define-method peek_children
  (of-object "GdkWindow")
  (c-name "gdk_window_peek_children")
  (return-type "GList*")
)

(define-method get_children_with_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_get_children_with_user_data")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "GList*")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method get_events
  (of-object "GdkWindow")
  (c-name "gdk_window_get_events")
  (return-type "GdkEventMask")
)

(define-method set_events
  (of-object "GdkWindow")
  (c-name "gdk_window_set_events")
  (return-type "none")
  (parameters
    '("GdkEventMask" "event_mask")
  )
)

(define-method set_device_events
  (of-object "GdkWindow")
  (c-name "gdk_window_set_device_events")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
    '("GdkEventMask" "event_mask")
  )
)

(define-method get_device_events
  (of-object "GdkWindow")
  (c-name "gdk_window_get_device_events")
  (return-type "GdkEventMask")
  (parameters
    '("GdkDevice*" "device")
  )
)

(define-method set_source_events
  (of-object "GdkWindow")
  (c-name "gdk_window_set_source_events")
  (return-type "none")
  (parameters
    '("GdkInputSource" "source")
    '("GdkEventMask" "event_mask")
  )
)

(define-method get_source_events
  (of-object "GdkWindow")
  (c-name "gdk_window_get_source_events")
  (return-type "GdkEventMask")
  (parameters
    '("GdkInputSource" "source")
  )
)

(define-method set_icon_list
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon_list")
  (return-type "none")
  (parameters
    '("GList*" "pixbufs")
  )
)

(define-method set_icon_name
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_group
  (of-object "GdkWindow")
  (c-name "gdk_window_set_group")
  (return-type "none")
  (parameters
    '("GdkWindow*" "leader")
  )
)

(define-method get_group
  (of-object "GdkWindow")
  (c-name "gdk_window_get_group")
  (return-type "GdkWindow*")
)

(define-method set_decorations
  (of-object "GdkWindow")
  (c-name "gdk_window_set_decorations")
  (return-type "none")
  (parameters
    '("GdkWMDecoration" "decorations")
  )
)

(define-method get_decorations
  (of-object "GdkWindow")
  (c-name "gdk_window_get_decorations")
  (return-type "gboolean")
  (parameters
    '("GdkWMDecoration*" "decorations")
  )
)

(define-method set_functions
  (of-object "GdkWindow")
  (c-name "gdk_window_set_functions")
  (return-type "none")
  (parameters
    '("GdkWMFunction" "functions")
  )
)

(define-method create_similar_surface
  (of-object "GdkWindow")
  (c-name "gdk_window_create_similar_surface")
  (return-type "cairo_surface_t*")
  (parameters
    '("cairo_content_t" "content")
    '("int" "width")
    '("int" "height")
  )
)

(define-method create_similar_image_surface
  (of-object "GdkWindow")
  (c-name "gdk_window_create_similar_image_surface")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "cairo_surface_t*")
  (parameters
    '("cairo_format_t" "format")
    '("int" "width")
    '("int" "height")
    '("int" "scale")
  )
)

(define-method beep
  (of-object "GdkWindow")
  (c-name "gdk_window_beep")
  (return-type "none")
)

(define-method iconify
  (of-object "GdkWindow")
  (c-name "gdk_window_iconify")
  (return-type "none")
)

(define-method deiconify
  (of-object "GdkWindow")
  (c-name "gdk_window_deiconify")
  (return-type "none")
)

(define-method stick
  (of-object "GdkWindow")
  (c-name "gdk_window_stick")
  (return-type "none")
)

(define-method unstick
  (of-object "GdkWindow")
  (c-name "gdk_window_unstick")
  (return-type "none")
)

(define-method maximize
  (of-object "GdkWindow")
  (c-name "gdk_window_maximize")
  (return-type "none")
)

(define-method unmaximize
  (of-object "GdkWindow")
  (c-name "gdk_window_unmaximize")
  (return-type "none")
)

(define-method fullscreen
  (of-object "GdkWindow")
  (c-name "gdk_window_fullscreen")
  (return-type "none")
)

(define-method set_fullscreen_mode
  (of-object "GdkWindow")
  (c-name "gdk_window_set_fullscreen_mode")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "none")
  (parameters
    '("GdkFullscreenMode" "mode")
  )
)

(define-method get_fullscreen_mode
  (of-object "GdkWindow")
  (c-name "gdk_window_get_fullscreen_mode")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "GdkFullscreenMode")
)

(define-method unfullscreen
  (of-object "GdkWindow")
  (c-name "gdk_window_unfullscreen")
  (return-type "none")
)

(define-method set_keep_above
  (of-object "GdkWindow")
  (c-name "gdk_window_set_keep_above")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_keep_below
  (of-object "GdkWindow")
  (c-name "gdk_window_set_keep_below")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method set_opacity
  (of-object "GdkWindow")
  (c-name "gdk_window_set_opacity")
  (return-type "none")
  (parameters
    '("gdouble" "opacity")
  )
)

(define-method register_dnd
  (of-object "GdkWindow")
  (c-name "gdk_window_register_dnd")
  (return-type "none")
)

(define-method get_drag_protocol
  (of-object "GdkWindow")
  (c-name "gdk_window_get_drag_protocol")
  (return-type "GdkDragProtocol")
  (parameters
    '("GdkWindow**" "target")
  )
)

(define-method begin_resize_drag
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_resize_drag")
  (return-type "none")
  (parameters
    '("GdkWindowEdge" "edge")
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method begin_resize_drag_for_device
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_resize_drag_for_device")
  (available "GDK_AVAILABLE_IN_3_4")
  (return-type "none")
  (parameters
    '("GdkWindowEdge" "edge")
    '("GdkDevice*" "device")
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method begin_move_drag
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_move_drag")
  (return-type "none")
  (parameters
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)

(define-method begin_move_drag_for_device
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_move_drag_for_device")
  (available "GDK_AVAILABLE_IN_3_4")
  (return-type "none")
  (parameters
    '("GdkDevice*" "device")
    '("gint" "button")
    '("gint" "root_x")
    '("gint" "root_y")
    '("guint32" "timestamp")
  )
)


(define-method invalidate_rect
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_rect")
  (return-type "none")
  (parameters
   '("GdkRectangle*" "rect" (null-ok) (default "NULL"))
   '("gboolean" "invalidate_children")
   )
)


(define-method invalidate_region
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_region")
  (return-type "none")
  (parameters
    '("const-cairo_region_t*" "region")
    '("gboolean" "invalidate_children")
  )
)

(define-method invalidate_maybe_recurse
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_maybe_recurse")
  (return-type "none")
  (parameters
    '("const-cairo_region_t*" "region")
    '("GdkWindowChildFunc" "child_func")
    '("gpointer" "user_data")
  )
)

(define-method get_update_area
  (of-object "GdkWindow")
  (c-name "gdk_window_get_update_area")
  (return-type "cairo_region_t*")
)

(define-method freeze_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_freeze_updates")
  (return-type "none")
)

(define-method thaw_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_thaw_updates")
  (return-type "none")
)

(define-method freeze_toplevel_updates_libgtk_only
  (of-object "GdkWindow")
  (c-name "gdk_window_freeze_toplevel_updates_libgtk_only")
  (available "GDK_DEPRECATED_IN_3_16")
  (return-type "none")
)

(define-method thaw_toplevel_updates_libgtk_only
  (of-object "GdkWindow")
  (c-name "gdk_window_thaw_toplevel_updates_libgtk_only")
  (available "GDK_DEPRECATED_IN_3_16")
  (return-type "none")
)

(define-function gdk_window_process_all_updates
  (c-name "gdk_window_process_all_updates")
  (return-type "none")
)

(define-method process_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_process_updates")
  (return-type "none")
  (parameters
    '("gboolean" "update_children")
  )
)

(define-function gdk_window_set_debug_updates
  (c-name "gdk_window_set_debug_updates")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-function gdk_window_constrain_size
  (c-name "gdk_window_constrain_size")
  (return-type "none")
  (parameters
    '("GdkGeometry*" "geometry")
    '("GdkWindowHints" "flags")
    '("gint" "width")
    '("gint" "height")
    '("gint*" "new_width")
    '("gint*" "new_height")
  )
)

(define-method enable_synchronized_configure
  (of-object "GdkWindow")
  (c-name "gdk_window_enable_synchronized_configure")
  (available "GDK_DEPRECATED_IN_3_8")
  (return-type "none")
)

(define-method configure_finished
  (of-object "GdkWindow")
  (c-name "gdk_window_configure_finished")
  (available "GDK_DEPRECATED_IN_3_8")
  (return-type "none")
)

(define-function gdk_get_default_root_window
  (c-name "gdk_get_default_root_window")
  (return-type "GdkWindow*")
)

(define-function gdk_offscreen_window_get_surface
  (c-name "gdk_offscreen_window_get_surface")
  (return-type "cairo_surface_t*")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-function gdk_offscreen_window_set_embedder
  (c-name "gdk_offscreen_window_set_embedder")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GdkWindow*" "embedder")
  )
)

(define-function gdk_offscreen_window_get_embedder
  (c-name "gdk_offscreen_window_get_embedder")
  (return-type "GdkWindow*")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method geometry_changed
  (of-object "GdkWindow")
  (c-name "gdk_window_geometry_changed")
  (return-type "none")
)

(define-method set_support_multidevice
  (of-object "GdkWindow")
  (c-name "gdk_window_set_support_multidevice")
  (return-type "none")
  (parameters
    '("gboolean" "support_multidevice")
  )
)

(define-method get_support_multidevice
  (of-object "GdkWindow")
  (c-name "gdk_window_get_support_multidevice")
  (return-type "gboolean")
)

(define-method get_frame_clock
  (of-object "GdkWindow")
  (c-name "gdk_window_get_frame_clock")
  (available "GDK_AVAILABLE_IN_3_8")
  (return-type "GdkFrameClock*")
)

(define-method set_opaque_region
  (of-object "GdkWindow")
  (c-name "gdk_window_set_opaque_region")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "none")
  (parameters
    '("cairo_region_t*" "region")
  )
)

(define-method set_event_compression
  (of-object "GdkWindow")
  (c-name "gdk_window_set_event_compression")
  (available "GDK_AVAILABLE_IN_3_12")
  (return-type "none")
  (parameters
    '("gboolean" "event_compression")
  )
)

(define-method get_event_compression
  (of-object "GdkWindow")
  (c-name "gdk_window_get_event_compression")
  (available "GDK_AVAILABLE_IN_3_12")
  (return-type "gboolean")
)

(define-method set_shadow_width
  (of-object "GdkWindow")
  (c-name "gdk_window_set_shadow_width")
  (available "GDK_AVAILABLE_IN_3_12")
  (return-type "none")
  (parameters
    '("gint" "left")
    '("gint" "right")
    '("gint" "top")
    '("gint" "bottom")
  )
)

(define-method show_window_menu
  (of-object "GdkWindow")
  (c-name "gdk_window_show_window_menu")
  (available "GDK_AVAILABLE_IN_3_14")
  (return-type "gboolean")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method create_gl_context
  (of-object "GdkWindow")
  (c-name "gdk_window_create_gl_context")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "GdkGLContext*")
  (parameters
    '("GError**" "error")
  )
)


;; From gdkwindowimpl.h

(define-function gdk_window_impl_get_type
  (c-name "gdk_window_impl_get_type")
  (return-type "GType")
)



;;; XXXX functions from GTK that extend GDK types.

(define-method finish
  (of-object "GdkDragContext")
  (c-name "gtk_drag_finish")
  (return-type "none")
  (parameters
    '("gboolean" "success")
    '("gboolean" "del")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))
  )
)

;; XXX to be restored when gtk is active
;; (define-method get_source_widget
;;   (of-object "GdkDragContext")
;;   (c-name "gtk_drag_get_source_widget")
;;   (return-type "GtkWidget*")
;; )

;; XXX to be restored when gtk is active
;; (define-method set_icon_widget
;;   (of-object "GdkDragContext")
;;   (c-name "gtk_drag_set_icon_widget")
;;   (return-type "none")
;;   (parameters
;;     '("GtkWidget*" "widget")
;;     '("gint" "hot_x")
;;     '("gint" "hot_y")
;;   )
;; )

;; (define-method set_icon_pixmap
;;   (of-object "GdkDragContext")
;;   (c-name "gtk_drag_set_icon_pixmap")
;;   (return-type "none")
;;   (parameters
;;     '("GdkColormap*" "colormap")
;;     '("GdkPixmap*" "pixmap")
;;     '("GdkBitmap*" "mask")
;;     '("gint" "hot_x")
;;     '("gint" "hot_y")
;;   )
;; )

(define-method set_icon_pixbuf
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-method set_icon_stock
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_stock")
  (return-type "none")
  (parameters
    '("consg-gchar*" "stock_id")
    '("gint" "hot_x")
    '("gint" "hot_y")
  )
)

(define-method set_icon_default
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_default")
  (return-type "none")
)

;; jpc added

(define-function gdk_rectangle_new
  (c-name "gdk_rectangle_new")
  (is-constructor-of "GdkRectangle")
  (return-type "GdkRectangle")
)

(define-method intersect
  (of-object "GdkRectangle")
  (c-name "gdk_rectangle_intersect")
  (return-type "gboolean")
  (parameters
    '("GdkRectangle*" "src1")
    '("GdkRectangle*" "src2")
    '("GdkRectangle*" "dest")
  )
)

(define-method union
  (of-object "GdkRectangle")
  (c-name "gdk_rectangle_union")
  (return-type "void")
  (parameters
    '("GdkRectangle*" "src1")
    '("GdkRectangle*" "src2")
    '("GdkRectangle*" "dest")
  )
)

;; From gdkscreen.h

(define-function gdk_screen_get_type
  (c-name "gdk_screen_get_type")
  (return-type "GType")
)

(define-method get_system_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_system_visual")
  (return-type "GdkVisual*")
)

(define-method get_rgba_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgba_visual")
  (return-type "GdkVisual*")
)

(define-method is_composited
  (of-object "GdkScreen")
  (c-name "gdk_screen_is_composited")
  (return-type "gboolean")
)

(define-method get_root_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_root_window")
  (return-type "GdkWindow*")
)

(define-method get_display
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_number
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_number")
  (return-type "gint")
)

(define-method get_width
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_width")
  (return-type "gint")
)

(define-method get_height
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_height")
  (return-type "gint")
)

(define-method get_width_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_width_mm")
  (return-type "gint")
)

(define-method get_height_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_height_mm")
  (return-type "gint")
)

(define-method list_visuals
  (of-object "GdkScreen")
  (c-name "gdk_screen_list_visuals")
  (return-type "GList*")
)

(define-method get_toplevel_windows
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_toplevel_windows")
  (return-type "GList*")
)

(define-method make_display_name
  (of-object "GdkScreen")
  (c-name "gdk_screen_make_display_name")
  (return-type "gchar*")
)

(define-method get_n_monitors
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_n_monitors")
  (return-type "gint")
)

(define-method get_primary_monitor
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_primary_monitor")
  (return-type "gint")
)

(define-method get_monitor_geometry
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_geometry")
  (return-type "none")
  (parameters
    '("gint" "monitor_num")
    '("GdkRectangle*" "dest")
  )
)

(define-method get_monitor_workarea
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_workarea")
  (available "GDK_AVAILABLE_IN_3_4")
  (return-type "none")
  (parameters
    '("gint" "monitor_num")
    '("GdkRectangle*" "dest")
  )
)

(define-method get_monitor_at_point
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_at_point")
  (return-type "gint")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_monitor_at_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_at_window")
  (return-type "gint")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-method get_monitor_width_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_width_mm")
  (return-type "gint")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-method get_monitor_height_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_height_mm")
  (return-type "gint")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-method get_monitor_plug_name
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_plug_name")
  (return-type "gchar*")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-method get_monitor_scale_factor
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_scale_factor")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "gint")
  (parameters
    '("gint" "monitor_num")
  )
)

(define-function gdk_screen_get_default
  (c-name "gdk_screen_get_default")
  (return-type "GdkScreen*")
)

(define-method get_setting
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_setting")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
    '("GValue*" "value")
  )
)

(define-method set_font_options
  (of-object "GdkScreen")
  (c-name "gdk_screen_set_font_options")
  (return-type "none")
  (parameters
    '("const-cairo_font_options_t*" "options")
  )
)

(define-method get_font_options
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_font_options")
  (return-type "const-cairo_font_options_t*")
)

(define-method set_resolution
  (of-object "GdkScreen")
  (c-name "gdk_screen_set_resolution")
  (return-type "none")
  (parameters
    '("gdouble" "dpi")
  )
)

(define-method get_resolution
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_resolution")
  (return-type "gdouble")
)

(define-method get_active_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_active_window")
  (return-type "GdkWindow*")
)

(define-method get_window_stack
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_window_stack")
  (return-type "GList*")
)

;; From gdkdisplay.h

(define-function gdk_display_get_type
  (c-name "gdk_display_get_type")
  (return-type "GType")
)

(define-function gdk_display_open
  (c-name "gdk_display_open")
  (return-type "GdkDisplay*")
  (parameters
    '("const-gchar*" "display_name")
  )
)

(define-method get_name
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_name")
  (return-type "const-gchar*")
)

(define-method get_n_screens
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_n_screens")
  (available "GDK_DEPRECATED_IN_3_10")
  (return-type "gint")
)

(define-method get_screen
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_screen")
  (return-type "GdkScreen*")
  (parameters
    '("gint" "screen_num")
  )
)

(define-method get_default_screen
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_screen")
  (return-type "GdkScreen*")
)

(define-method device_is_grabbed
  (of-object "GdkDisplay")
  (c-name "gdk_display_device_is_grabbed")
  (return-type "gboolean")
  (parameters
    '("GdkDevice*" "device")
  )
)
(define-method beep
  (of-object "GdkDisplay")
  (c-name "gdk_display_beep")
  (return-type "none")
)

(define-method sync
  (of-object "GdkDisplay")
  (c-name "gdk_display_sync")
  (return-type "none")
)

(define-method flush
  (of-object "GdkDisplay")
  (c-name "gdk_display_flush")
  (return-type "none")
)

(define-method close
  (of-object "GdkDisplay")
  (c-name "gdk_display_close")
  (return-type "none")
)

(define-method is_closed
  (of-object "GdkDisplay")
  (c-name "gdk_display_is_closed")
  (return-type "boolean")
)

(define-method get_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_event")
  (return-type "GdkEvent*")
)

(define-method peek_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_peek_event")
  (return-type "GdkEvent*")
)

(define-method put_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_put_event")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event")
  )
)

(define-method has_pending
  (of-object "GdkDisplay")
  (c-name "gdk_display_has_pending")
  (return-type "gboolean")
)

(define-method set_double_click_time
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec")
  )
)

(define-method set_double_click_distance
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_double_click_distance")
  (return-type "none")
  (parameters
    '("guint" "distance")
  )
)

(define-function gdk_display_get_default
  (c-name "gdk_display_get_default")
  (return-type "GdkDisplay*")
)

(define-function gdk_display_open_default_libgtk_only
  (c-name "gdk_display_open_default_libgtk_only")
  (return-type "GdkDisplay*")
)

(define-method supports_cursor_alpha
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_cursor_alpha")
  (return-type "gboolean")
)

(define-method supports_cursor_color
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_cursor_color")
  (return-type "gboolean")
)

(define-method get_default_cursor_size
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_cursor_size")
  (return-type "guint")
)

(define-method get_maximal_cursor_size
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_maximal_cursor_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method get_default_group
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_group")
  (return-type "GdkWindow*")
)

(define-method supports_selection_notification
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_selection_notification")
  (return-type "gboolean")
)

(define-method request_selection_notification
  (of-object "GdkDisplay")
  (c-name "gdk_display_request_selection_notification")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection")
  )
)

(define-method supports_clipboard_persistence
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_clipboard_persistence")
  (return-type "gboolean")
)

(define-method store_clipboard
  (of-object "GdkDisplay")
  (c-name "gdk_display_store_clipboard")
  (return-type "none")
  (parameters
    '("GdkWindow*" "clipboard_window")
    '("guint32" "time_")
    '("const-GdkAtom*" "targets")
    '("gint" "n_targets")
  )
)

(define-method supports_shapes
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_shapes")
  (return-type "gboolean")
)

(define-method supports_input_shapes
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_input_shapes")
  (return-type "gboolean")
)

(define-method supports_composite
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_composite")
  (available "GDK_DEPRECATED_IN_3_16")
  (return-type "gboolean")
)

(define-method notify_startup_complete
  (of-object "GdkDisplay")
  (c-name "gdk_display_notify_startup_complete")
  (return-type "none")
  (parameters
    '("const-gchar*" "startup_id")
  )
)

(define-method get_device_manager
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_device_manager")
  (return-type "GdkDeviceManager*")
)

(define-method get_app_launch_context
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_app_launch_context")
  (return-type "GdkAppLaunchContext*")
)

;; From gdkdisplaymanager.h

(define-function gdk_display_manager_get_type
  (c-name "gdk_display_manager_get_type")
  (return-type "GType")
)

(define-function gdk_display_manager_get
  (c-name "gdk_display_manager_get")
  (return-type "GdkDisplayManager*")
)

(define-method get_default_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_get_default_display")
  (return-type "GdkDisplay*")
)

(define-method set_default_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_set_default_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)

(define-method list_displays
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_list_displays")
  (return-type "GSList*")
)

(define-method open_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_open_display")
  (return-type "GdkDisplay*")
  (parameters
    '("const-gchar*" "name")
  )
)

;; From gdkdisplaymanagerprivate.h

;; From gdkdisplayprivate.h

;; (define-method make_gl_context_current
;;   (of-object "GdkDisplay")
;;   (c-name "gdk_display_make_gl_context_current")
;;   (available "")
;;   (return-type "gboolean")
;;   (available "GDK_AVAILABLE_IN_3_16")
;;   (parameters
;;     '("GdkGLContext*" "context")
;;   )
;; )

;; From gdkdevice.h

(define-function gdk_device_get_type
  (c-name "gdk_device_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GdkDevice")
  (c-name "gdk_device_get_name")
  (return-type "const-gchar*")
)

(define-method get_has_cursor
  (of-object "GdkDevice")
  (c-name "gdk_device_get_has_cursor")
  (return-type "gboolean")
)

(define-method get_source
  (of-object "GdkDevice")
  (c-name "gdk_device_get_source")
  (return-type "GdkInputSource")
)

(define-method get_mode
  (of-object "GdkDevice")
  (c-name "gdk_device_get_mode")
  (return-type "GdkInputMode")
)

(define-method set_mode
  (of-object "GdkDevice")
  (c-name "gdk_device_set_mode")
  (return-type "gboolean")
  (parameters
    '("GdkInputMode" "mode")
  )
)

(define-method get_n_keys
  (of-object "GdkDevice")
  (c-name "gdk_device_get_n_keys")
  (return-type "gint")
)

(define-method get_key
  (of-object "GdkDevice")
  (c-name "gdk_device_get_key")
  (return-type "gboolean")
  (parameters
    '("guint" "index_")
    '("guint*" "keyval")
    '("GdkModifierType*" "modifiers")
  )
)

(define-method set_key
  (of-object "GdkDevice")
  (c-name "gdk_device_set_key")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
  )
)

(define-method get_axis_use
  (of-object "GdkDevice")
  (c-name "gdk_device_get_axis_use")
  (return-type "GdkAxisUse")
  (parameters
    '("guint" "index_")
  )
)

(define-method set_axis_use
  (of-object "GdkDevice")
  (c-name "gdk_device_set_axis_use")
  (return-type "none")
  (parameters
    '("guint" "index_")
    '("GdkAxisUse" "use")
  )
)

(define-method get_state
  (of-object "GdkDevice")
  (c-name "gdk_device_get_state")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("gdouble*" "axes")
    '("GdkModifierType*" "mask")
  )
)

(define-method get_position
  (of-object "GdkDevice")
  (c-name "gdk_device_get_position")
  (return-type "none")
  (parameters
    '("GdkScreen**" "screen")
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_window_at_position
  (of-object "GdkDevice")
  (c-name "gdk_device_get_window_at_position")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "win_x")
    '("gint*" "win_y")
  )
)

(define-method get_position_double
  (of-object "GdkDevice")
  (c-name "gdk_device_get_position_double")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "none")
  (parameters
    '("GdkScreen**" "screen")
    '("gdouble*" "x")
    '("gdouble*" "y")
  )
)

(define-method get_window_at_position_double
  (of-object "GdkDevice")
  (c-name "gdk_device_get_window_at_position_double")
  (available "GDK_AVAILABLE_IN_3_10")
  (return-type "GdkWindow*")
  (parameters
    '("gdouble*" "win_x")
    '("gdouble*" "win_y")
  )
)

(define-method get_history
  (of-object "GdkDevice")
  (c-name "gdk_device_get_history")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "window")
    '("guint32" "start")
    '("guint32" "stop")
    '("GdkTimeCoord***" "events")
    '("gint*" "n_events")
  )
)

(define-function gdk_device_free_history
  (c-name "gdk_device_free_history")
  (return-type "none")
  (parameters
    '("GdkTimeCoord**" "events")
    '("gint" "n_events")
  )
)

(define-method get_n_axes
  (of-object "GdkDevice")
  (c-name "gdk_device_get_n_axes")
  (return-type "gint")
)

(define-method list_axes
  (of-object "GdkDevice")
  (c-name "gdk_device_list_axes")
  (return-type "GList*")
)

(define-method get_axis_value
  (of-object "GdkDevice")
  (c-name "gdk_device_get_axis_value")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "axes")
    '("GdkAtom" "axis_label")
    '("gdouble*" "value")
  )
)

(define-method get_axis
  (of-object "GdkDevice")
  (c-name "gdk_device_get_axis")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "axes")
    '("GdkAxisUse" "use")
    '("gdouble*" "value")
  )
)

(define-method get_display
  (of-object "GdkDevice")
  (c-name "gdk_device_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_associated_device
  (of-object "GdkDevice")
  (c-name "gdk_device_get_associated_device")
  (return-type "GdkDevice*")
)

(define-method list_slave_devices
  (of-object "GdkDevice")
  (c-name "gdk_device_list_slave_devices")
  (return-type "GList*")
)

(define-method get_device_type
  (of-object "GdkDevice")
  (c-name "gdk_device_get_device_type")
  (return-type "GdkDeviceType")
)

(define-method grab
  (of-object "GdkDevice")
  (c-name "gdk_device_grab")
  (return-type "GdkGrabStatus")
  (parameters
    '("GdkWindow*" "window")
    '("GdkGrabOwnership" "grab_ownership")
    '("gboolean" "owner_events")
    '("GdkEventMask" "event_mask")
    '("GdkCursor*" "cursor")
    '("guint32" "time_")
  )
)

(define-method ungrab
  (of-object "GdkDevice")
  (c-name "gdk_device_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time_")
  )
)

(define-method warp
  (of-object "GdkDevice")
  (c-name "gdk_device_warp")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-function gdk_device_grab_info_libgtk_only
  (c-name "gdk_device_grab_info_libgtk_only")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GdkDevice*" "device")
    '("GdkWindow**" "grab_window")
    '("gboolean*" "owner_events")
  )
)

(define-method get_last_event_window
  (of-object "GdkDevice")
  (c-name "gdk_device_get_last_event_window")
  (available "GDK_AVAILABLE_IN_3_12")
  (return-type "GdkWindow*")
)

(define-method get_vendor_id
  (of-object "GdkDevice")
  (c-name "gdk_device_get_vendor_id")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "const-gchar*")
)

(define-method get_product_id
  (of-object "GdkDevice")
  (c-name "gdk_device_get_product_id")
  (available "GDK_AVAILABLE_IN_3_16")
  (return-type "const-gchar*")
)



;; From gdkdevicemanager.h

(define-function gdk_device_manager_get_type
  (c-name "gdk_device_manager_get_type")
  (return-type "GType")
)

(define-method get_display
  (of-object "GdkDeviceManager")
  (c-name "gdk_device_manager_get_display")
  (return-type "GdkDisplay*")
)

(define-method list_devices
  (of-object "GdkDeviceManager")
  (c-name "gdk_device_manager_list_devices")
  (return-type "GList*")
  (parameters
    '("GdkDeviceType" "type")
  )
)

(define-method get_client_pointer
  (of-object "GdkDeviceManager")
  (c-name "gdk_device_manager_get_client_pointer")
  (return-type "GdkDevice*")
)

;; From gdkdevicemanagerprivate.h

;; From gdkdeviceprivate.h

;; rgba
;; returns a new GdkRGBA with contents from spec

(define-function "gdk_rgba_new"
  (c-name "gdk_rgba_new")
  (return-type "GdkRGBA*")
  (parameters
   '("const-gchar*" "spec")
   )
)

(define-method to_string
  (of-object "GdkRGBA")
  (c-name "gdk_rgba_to_string")
  (return-type "gchar*")
)

;; From gdkcairo.h

;; From gdkcairo.h

(define-function gdk_cairo_create
  (c-name "gdk_cairo_create")
  (return-type "cairo_t*")
  (parameters
    '("GdkWindow*" "window")
  )
)

(define-function gdk_cairo_get_clip_rectangle
  (c-name "gdk_cairo_get_clip_rectangle")
  (return-type "gboolean")
  (parameters
    '("cairo_t*" "cr")
    '("GdkRectangle*" "rect")
  )
)

(define-function gdk_cairo_set_source_rgba
  (c-name "gdk_cairo_set_source_rgba")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("const-GdkRGBA*" "rgba")
  )
)

(define-function gdk_cairo_set_source_pixbuf
  (c-name "gdk_cairo_set_source_pixbuf")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("const-GdkPixbuf*" "pixbuf")
    '("gdouble" "pixbuf_x")
    '("gdouble" "pixbuf_y")
  )
)

(define-function gdk_cairo_set_source_window
  (c-name "gdk_cairo_set_source_window")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkWindow*" "window")
    '("gdouble" "x")
    '("gdouble" "y")
  )
)

(define-function gdk_cairo_rectangle
  (c-name "gdk_cairo_rectangle")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("const-GdkRectangle*" "rectangle")
  )
)

(define-function gdk_cairo_region
  (c-name "gdk_cairo_region")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("const-cairo_region_t*" "region")
  )
)

(define-function gdk_cairo_region_create_from_surface
  (c-name "gdk_cairo_region_create_from_surface")
  (return-type "cairo_region_t*")
  (parameters
    '("cairo_surface_t*" "surface")
  )
)

(define-function gdk_cairo_surface_create_from_pixbuf
  (c-name "gdk_cairo_surface_create_from_pixbuf")
  (return-type "cairo_surface_t*")
  (parameters
    '("const-GdkPixbuf*" "pixbuf")
    '("int" "scale")
    '("GdkWindow*" "for_window")
  )
)

(define-function gdk_cairo_draw_from_gl
  (c-name "gdk_cairo_draw_from_gl")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkWindow*" "window")
    '("int" "source")
    '("int" "source_type")
    '("int" "buffer_scale")
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
    )
  (available "GDK_AVAILABLE_IN_3_16")
  )



