function libn=ilib_for_link(names,files,libs,flag,makename='Makelib',...
			    loadername='loader.sce',libname="",ldflags="",cflags="",fflags="",cc="")
// Copyright Enpc 
// Generate a shared library which can be used by link 
// command. 
// names = names of entry points or the name of the library to 
// be built (when flag == 'g') 
// files = object files to be built 
// flag = 'c' or 'f' or '
// 
  verbose=1
  // generate a loader file
  if verbose==1 then printf('   generate a loader file %s\n',loadername);end
  ilib_link_gen_loader(names,flag,loadername=loadername,libs=libs,libname=libname);
  // generate a Makefile
  if verbose==1 then printf('   generate a Makefile: %s\n',makename);end
  ilib_link_gen_Make(names,files,libs,makename,libname,...
		     ldflags,cflags,fflags,cc,flag);
  // we call make
  if verbose==1 then printf('   running the makefile\n');end
  if libname=="" then libname = names(1);end
  libn=ilib_compile('lib'+libname,makename,files);
endfunction

function ilib_link_gen_loader(names,flag,loadername=loader.sce,libs=[],libname="")
//------------------------------------
// suffix to be used for dll
  lib_suf = %shext;
  if libname=="" then libname = names(1);end 
  fd=fopen(loadername,mode="w");
  path=file('dirname',loadername);
  if path== '.' then path=getcwd();end
  fprintf(fd,"// generated by builder.sce: Please do not edit this file\n");
  fprintf(fd,"// ------------------------------------------------------\n");
  nl=size(libs,'*') 
  for i=1:nl 
    if part(libs(i),1)=='/' then
      fprintf(fd,"link(''%s'');\n",libs(i)+lib_suf);
    else
      fprintf(fd,"link(''%s'');\n",file('join',[path,libs(i)+lib_suf]));
    end
  end 
  names=names(:)';
  n = size(names,'*');
  if n == 0 then 
    fprintf(fd,"link(''%s'');\n",file('join',[path,'lib'+libname+lib_suf]));
  else 
    fprintf(fd,"link(''%s'',[",file('join',[path,'lib'+libname+lib_suf]));
    for i=1:n
      fprintf(fd,"''%s''",names(i))
      if i <>n ; fprintf(fd,","); else fprintf(fd,"],");end
    end
    fprintf(fd,"''%s'');\n",flag);
  end
  fd.close[];
endfunction

function ilib_link_gen_Make(names,files,libs,makename,libname,ldflags,cflags,fflags,cc,flag)
//------------------------------------
// generate a Makefile for gateway
  if nargin <= 2 then libs = [];end
  if nargin <= 3 then makename = 'Makelib';end
  if nargin <= 4 then libname = "";end
  if nargin <= 5 then ldflags = ""; end 
  if nargin <= 6 then cflags  = ""; end 
  if nargin <= 7 then fflags  = ""; end 
  if nargin <= 8 then cc  = ""; end 
  if nargin <= 9 then flag  = "c"; end 
  if getenv('WIN32','NO')=='OK' then
    comp_target = COMPILER;
    if with_lcc()==%T then
      Makename = makename+'.lcc';
      ilib_link_gen_Make_lcc(names,files,libs,Makename,libname,...
			     ldflags,cflags,fflags,cc,flag)
    else
      select comp_target
       case 'VC++'   then Makename = makename+'.mak'
	ilib_link_gen_Make_win32(names,files,libs,Makename,libname,...
				 ldflags,cflags,fflags,cc)
       case 'ABSOFT' then Makename = makename+'.amk'
	ilib_link_gen_Make_win32(names,files,libs,Makename,libname,...
				 ldflags,cflags,fflags,cc)
       case 'gcc' then 
	// cygwin assumed 
	Makename = makename;
	ilib_link_gen_Make_unix(names,files,libs,Makename,libname,...
				ldflags,cflags,fflags,cc)
      else 
	Makename = makename;
	ilib_link_gen_Make_win32(names,files,libs,Makename,libname,...
				 ldflags,cflags,fflags,cc)
      end
    end
  else
    Makename = makename;
    ilib_link_gen_Make_unix(names,files,libs,Makename,libname,...
			    ldflags,cflags,fflags,cc)
  end
endfunction

function ilib_link_gen_Make_unix(names,files,libs,Makename,libname, ...
				 ldflags,cflags,fflags,cc)
  
  if libname=="" then libname = names(1);end 
    
  fd=fopen(Makename,mode="w");
  fprintf(fd,"# generated by builder.sce: Please do not edit this file\n");
  fprintf(fd,"# ------------------------------------------------------\n");
  fprintf(fd,"SCIDIR = %s\n",getenv('SCI'));
  fprintf(fd,"OBJS = ")
  for x=files(:)' ; fprintf(fd," %s",x);end
  fprintf(fd,"\n") ;
  fprintf(fd,"OTHERLIBS = ")
  for x=libs(:)' ; fprintf(fd," %s",x);end
  fprintf(fd,"\n") ;
  fprintf(fd,"LIBRARY = lib%s\n",libname);
  fprintf(fd,"include $(SCIDIR)/Makefile.incl\n");
  if cc<>"" then 
    fprintf(fd,"CC="+cc+ "\n");
  end
  if getenv('WIN32','NO')=='OK' then
    // cygwin 
    fprintf(fd,"OTHERLIBS = ");
    for x=libs(:)' ; fprintf(fd," %s.a",x);end
    fprintf(fd,"\n");
    fprintf(fd,"CFLAGS = $(CC_OPTIONS) -DFORDLL -I\""$(SCIDIR)/routines\"""+...
	     " -Dmexfunction_=mex$*_  -DmexFunction=mex_$* "+ cflags +" \n"); 
    fprintf(fd,"FFLAGS = $(FC_OPTIONS) -DFORDLL -I\""$(SCIDIR)/routines\"""+...
	     " -Dmexfunction=mex$* "+ fflags +"\n"); 
  else
     fprintf(fd,"CFLAGS = $(CC_OPTIONS) "+cflags+ "\n");
     fprintf(fd,"FFLAGS = $(FC_OPTIONS) "+fflags+ "\n");
  end
  fprintf(fd,"EXTRA_LDFLAGS = "+ ldflags+ "\n");
  if getenv('WIN32','NO')=='OK' then
    // cygwin assumed : we use a specific makedll 
    // and not libtool up to now XXX 
    fprintf(fd,"include $(SCIDIR)/config/Makecygdll.incl\n");
  else
     fprintf(fd,"include $(SCIDIR)/config/Makeso.incl\n");
  end
  fd.close[];
endfunction

function ilib_link_gen_Make_win32(names,files,libs,Makename,libname,ldflags, ...
				  cflags,fflags,cc)
				  
  if libname=="" then libname = names(1);end 
  fd=mopen(Makename,"w");
  fprintf(fd,"# generated by builder.sce : Please do not edit this file\n");
  fprintf(fd,"# ------------------------------------------------------\n");
  fprintf(fd,"SCIDIR =%s\n",getenv('SCI'));
  fprintf(fd,"SCIDIR1 =%s\n",pathconvert(getenv('SCI'),%f,%f,'w'));
  fprintf(fd,"# name of the dll to be built\n"); 
  fprintf(fd,"LIBRARY = lib%s\n",libname);
  fprintf(fd,"# list of objects file\n");
  fprintf(fd,"OBJS =");
  for x=files(:)' ; fprintf(fd," %s",strsubst(x,".o",".obj"));end
  fprintf(fd,"\n# added libraries \n");
  fprintf(fd,"OTHERLIBS = ");
  for x=libs(:)' ; fprintf(fd," %s.ilib",x);end
  fprintf(fd,"\n");
  fprintf(fd,"!include $(SCIDIR1)\\Makefile.incl.mak\n");
  if cc<>"" then 
    fprintf(fd,"CC="+cc+ "\n");
  end
  fprintf(fd,"CFLAGS = $(CC_OPTIONS) -DFORDLL -I\""$(SCIDIR)/routines\"""+...
	   " -Dmexfunction_=mex$*_  -DmexFunction=mex_$* "+ cflags +" \n"); 
  fprintf(fd,"FFLAGS = $(FC_OPTIONS) -DFORDLL -I\""$(SCIDIR)/routines\"""+...
	   " -Dmexfunction=mex$* "+ fflags +"\n"); 
  fprintf(fd,"EXTRA_LDFLAGS = "+ ldflags+"\n");
  fprintf(fd,"!include $(SCIDIR1)\\config\\Makedll.incl \n");
  fd.close[];
endfunction

//----------------------------------------------------------------------------------------------
function ilib_link_gen_Make_lcc(names,files,libs,Makename,libname,ldflags,cflags,fflags,cc,flag)
// Allan CORNET
// INRIA 2004
  
  if libname == "" then libname = names(1);end 
  fd=mopen(Makename,"w");
  fprintf(fd,"# ------------------------------------------------------------\n");
  fprintf(fd,"# generated by builder.sce (lcc): Please do not edit this file\n");
  fprintf(fd,"# ------------------------------------------------------------\n\n");
  fprintf(fd,"SCIDIR =%s\n",getenv('SCI'));
  fprintf(fd,"SCIDIR1 =%s\n",pathconvert(getenv('SCI'),%f,%f,'w'));
  fprintf(fd,"DUMPEXTS=""$(SCIDIR1)\\bin\\dumpexts""\n");
  if ( with_atlas()==%T ) then
  	fprintf(fd,"SCIIMPLIB=$(SCIDIR1)\\bin\\LibScilabLCC.lib $(SCIDIR1)\\bin\\atlaslcc.lib\n\n");
  else
  	fprintf(fd,"SCIIMPLIB=$(SCIDIR1)\\bin\\LibScilabLCC.lib\n\n");
  end
  fprintf(fd,"CC=lcc\n");
  fprintf(fd,"LINKER=lcclnk\n");
  //fprintf(fd,"CFLAGS=-I""$(SCIDIR)/routines"" -Dmexfunction_=mex$*_  -DmexFunction=mex_$* "+ cflags +" \n"); 
  fprintf(fd,"CFLAGS=-I""$(SCIDIR)/routines"" -I""$(SCIDIR)/routines/f2c"" -Dmexfunction_=mex$*_ -DmexFunction=mex_$* -DWIN32 -DSTRICT -DFORDLL -D__STDC__ "+ cflags +" \n"); 
  fprintf(fd,"LINKER_FLAGS=-dll -nounderscores\n");
  fprintf(fd,"EXTRA_LDFLAGS = "+ ldflags+"\n");
  fprintf(fd,"O=.obj\n");
 
  fprintf(fd,"# name of the dll to be built\n"); 
  fprintf(fd,"LIBRARY = lib%s\n",libname);
  fprintf(fd,"\n# list of objects file\n");
  
  if (flag =='c') then
  	fprintf(fd,"OBJSC =");
  	for x=files(:)' ;
  		x=strsubst(x,".obj","");
   		x=strsubst(x,".o","");
   		fprintf(fd," %s$(O)",x);
   	end
  
  	fprintf(fd,"\nOBJSF=\n");
  else
  	fprintf(fd,"OBJSC =\n");
  	fprintf(fd,"\nOBJSF=");
  	for x=files(:)' ;
  		x=strsubst(x,".obj","");
   		x=strsubst(x,".o","");
   		fprintf(fd," %s$(O)",x);
   	end
  end
  
  fprintf(fd,"\nOBJS = $(OBJSC) $(OBJSF)\n");
  
  fprintf(fd,"\n# added libraries \n");
  fprintf(fd,"OTHERLIBS =");
  for x=libs(:)' ;
  	fprintf(fd," %s.ilib",x);
  end
  fprintf(fd,"\n");
  
  fprintf(fd,"\nall :: $(LIBRARY).dll\n");
  fprintf(fd,"\n$(LIBRARY).dll: $(OBJS)\n");
  fprintf(fd,"	$(DUMPEXTS) -o ""$(LIBRARY).def"" ""$*"" $(OBJS)\n");
  fprintf(fd,"	$(LINKER) $(LINKER_FLAGS) $(OBJS) $(OTHERLIBS) $(SCIIMPLIB) $(XLIBSBIN) $(TERMCAPLIB) $(EXTRA_LDFLAGS) $*.def -o $(LIBRARY).dll\n\n");
 

  for x=files(:)' ;
  	x=strsubst(x,".obj","");
   	x=strsubst(x,".o","");
  	fprintf(fd,"%s$(O):\n",x);
  	if (flag =='c') then
  		fprintf(fd,"	$(CC) $(CFLAGS) $*.c\n\n");
  	else
  		fprintf(fd,"	@$(SCIDIR1)\\bin\\f2c.exe $*.f \n");
		fprintf(fd,"	@$(CC) $(CFLAGS) $*.c \n");
		fprintf(fd,"	del $*.c \n");
	end
  end
	
  fprintf(fd,"clean:\n");
  fprintf(fd,"	del *.obj\n");
  fprintf(fd,"	del *.dll\n");
  fprintf(fd,"	del *.lib\n");
  fprintf(fd,"	del *.def\n");
  fd.close[];
endfunction

