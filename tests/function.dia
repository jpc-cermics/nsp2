-nsp->// -*- Mode: scilab -*-
-nsp->// Copyright (C) 2008-2011 J.P Chancelier Cermics/Enpc
-nsp->//
-nsp->// This program is free software; you can redistribute it and/or modify
-nsp->// it under the terms of the GNU General Public License as published by
-nsp->// the Free Software Foundation; either version 2 of the License, or
-nsp->// (at your option) any later version.
-nsp->//
-nsp->// This program is distributed in the hope that it will be useful,
-nsp->// but WITHOUT ANY WARRANTY; without even the implied warranty of
-nsp->// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-nsp->// GNU General Public License for more details.
-nsp->//
-nsp->// You should have received a copy of the GNU General Public License
-nsp->// along with this program; if not, write to the Free Software
-nsp->// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-nsp->//
-nsp->// test of varargin,varargopt 
-nsp->//--------------------------
-nsp->H=hash_create(A=1,B=2,C=3);
-nsp->function y=f(x,varargopt);y=varargopt;endfunction;
-nsp->function y=g(x,varargopt);y=f(x,varargopt(:));endfunction;
-nsp->y=g(5,H(:));
-nsp->if y<>H then pause;end
-nsp->function [y,z]=f(x,varargin,varargopt);y=varargopt;z=varargin;endfunction;
-nsp->[y,z]=f(6,1,2,3,H(:));
-nsp->if y<>H then pause;end 
-nsp->if z<>list(1,2,3) then pause;end 
-nsp->function [z,t]=f(x,y,varargin);  z=x; t = varargin; endfunction;
-nsp->// y ignored 
-nsp->[z,t]=f(4);
-nsp->if z<>4 | length(t)<>0 then pause;end 
-nsp->// y unused 
-nsp->[z,t]=f(4,5);
-nsp->if z<>4 | length(t)<>0 then pause;end 
-nsp->[z,t]=f(4,5,7,8);
-nsp->if z<>4 | length(t)<>2 | ~t.equal[list(7,8)] then pause;end 
-nsp->function [z,t,w]=f(x,y,varargin,varargopt);  z=x; t = varargin;w=varargopt;endfunction;
-nsp->[z,t,w]=f(4);
-nsp->if z<>4 | length(t)<>0 | length(w)<> 0 then pause;end 
-nsp->// y unused 
-nsp->[z,t,w]=f(4,5);
-nsp->if z<>4 | length(t)<>0 | length(w)<> 0 then pause;end 
-nsp->[z,t,w]=f(4,5,7,8);
-nsp->if z<>4 | length(t)<>2 | ~t.equal[list(7,8)] |  length(w)<> 0 then pause;end 
-nsp->[z,t,w]=f(4,5,7,8,H(:));
-nsp->if z<>4 | length(t)<>2 | ~t.equal[list(7,8)] | ~w.equal[H] then pause;end 
-nsp->function [z,w]=f(x,y,a=1,b=2,c=3);z=x; w=hash_create(3,A=a,B=b,C=c);endfunction;
-nsp->[z,w]=f(4);
-nsp->if z<>4 | ~w.equal[hash_create(A=1,B=2,C=3)] then pause;end 
-nsp->[z,w]=f(4,5);
-nsp->if z<>4 | ~w.equal[hash_create(A=1,B=2,C=3)] then pause;end 
-nsp->[z,w]=f(4,5,a=100);
-nsp->if z<>4 | ~w.equal[hash_create(A=100,B=2,C=3)] then pause;end 
-nsp->[z,w]=f(4,5,c=100);
-nsp->if z<>4 | ~w.equal[hash_create(A=1,B=2,C=100)] then pause;end 
-nsp->// test of varargout 
-nsp->// -------------------
-nsp->function varargout=f() 
==>    varargout=list();
==>    for i=1:nargout 
==>      varargout(i)=i
==>    end
==>endfunction;
-nsp->[a,b]=f();
-nsp->[a,b,c]=f();
-nsp->if a <> 1 then pause;end 
-nsp->if b <> 2 then pause;end 
-nsp->if c <> 3 then pause;end 
-nsp->// test of function redefinition 
-nsp->// -----------------------------
-nsp->// perms is a library function which can be redefined 
-nsp->// when called through f. 
-nsp->// Unfortunately this ugly feature is used by scicos !
-nsp->function y=f(x)
==>  function y=perms(x)
==>    y="redefined"
==>  endfunction
==>  y=g(x);
==>endfunction
f	=		pl (file='function.tst')

  [34mfunction[0m y=f(x)
    [34mfunction[0m y=perms(x)
      y="redefined"
    [34mendfunction[0m
    y=g(x);
  [34mendfunction[0m
-nsp->function y=g(x)
==>  y=perms(x)
==>endfunction
g	=		pl (file='function.tst')

  [34mfunction[0m y=g(x)
    y=perms(x)
  [34mendfunction[0m
-nsp->// g used the perms defines in lib 
-nsp->y=g(1:2);
-nsp->if ~y.equal[[1,2;2,1]] then pause;end 
-nsp->// perms redefined locally inside f 
-nsp->y=f(1:2);
-nsp->if y~="redefined" then pause;end 
