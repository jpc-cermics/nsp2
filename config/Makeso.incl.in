#/* -*- Mode: Makefile -*- */
#-----------------------------------------------------------------
# This file can be used to produce a shared libary instead 
# a standard .a library 
# for examples: replace the line ``include ../Make.lib'' by 
# ``include ../../config/Makeso.incl in file 
# src/calelm/Makefile to produce a calelm.so shared libary 
# Copyright Enpc (Jean-Philippe Chancelier)
#-----------------------------------------------------------------

top_builddir = $(SCIDIR)

SHELL = @SHELL@
DLLTOOL = @DLLTOOL@
LIBM = @LIBM@
LIBTOOL = @LIBTOOL@
OBJDUMP = @OBJDUMP@
STATIC = @STATIC@
LN_S = @LN_S@
NM = @NM@
LDFLAGS = @LDFLAGS@ $(EXTRA_LDFLAGS) 
LIBS = @LIBS@
FLIBS = @FLIBS_SH@
#******************************************************************* 
INCLUDES=  $(XFLAGS) $(TK_INC_PATH) $(TCL_INC_PATH) -I$(SCIDIR)/src/include -I$(SCIDIR)/src/include/mex

# we do not set CFLAGS and FFLAGS here 
#CFLAGS = $(CC_OPTIONS) 
#FFLAGS = $(FC_OPTIONS) 

QUIET=--quiet
 
COMPILE = $(CC) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
FCOMPILE = $(FC) $(INCLUDES) $(FFLAGS)
CXXCOMPILE = $(CXX) $(INCLUDES) $(CXXFLAGS)

LTCOMPILE = $(LIBTOOL) --mode=compile $(QUIET) $(CC) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
FLTCOMPILE = $(LIBTOOL) --mode=compile $(QUIET) $(FC) $(INCLUDES) $(FFLAGS)
CXXLTCOMPILE = $(LIBTOOL) --mode=compile $(QUIET) $(CXX) $(INCLUDES) $(CXXFLAGS)

LINK = $(LIBTOOL) --mode=link $(QUIET) $(CC) $(CFLAGS) $(LDFLAGS)  $(FLIBS) $(OTHERLIBS) -o $@

OBJECTS = $(OBJS:.o=.lo)
LIBRARY_NAME = $(LIBRARY:.a=)
#******************************************************************* 

all:: $(LIBRARY_NAME).la 

.SUFFIXES:
.SUFFIXES: .c .lo .o .F .f .F90 .f90 .cc .cpp

$(LIBRARY_NAME).la : $(OBJECTS) 
	@echo linking 
	@$(LINK) -rpath `pwd` -avoid-version -export-dynamic $(OBJECTS) 
	@$(LIBTOOL) --mode=install $(QUIET) cp $(LIBRARY_NAME).la `pwd`/$(LIBRARY_NAME).la > /dev/null

clean	::
	@$(RM) *.o *.lo
	@$(RM) $(LIBRARY_NAME).la
	@$(RM) $(LIBRARY_NAME).so
	@$(RM) $(LIBRARY_NAME).a
	@$(RM) -r .libs
	@$(RM) $(LIBRARY_NAME)_gateway.c 

distclean:: clean 
	@$(RM) $(LIBRARY_NAME).dia

tests	: $(LIBRARY_NAME).dia

$(LIBRARY_NAME).dia	: $(LIBRARY_NAME).la $(LIBRARY_NAME).tst
	@$(SCIDIR)/bin/nsp -nw -e "nsptest('$(LIBRARY_NAME).tst');quit;"

# defined in Makefile.incl 
# .c.o:
# 	@echo "compiling $<"
# 	@$(COMPILE)  -c $<

.c.lo :
	@echo "Compiling $<"
	@$(LTCOMPILE) -c $<

.cc.o:
	@echo "compiling $<"
	@$(CXXCOMPILE)  -c $<

.cc.lo :
	@echo "Compiling $<"
	@$(CXXLTCOMPILE) -c $<

# defined in Makefile.incl 
# .cpp.o:
# 	@echo "compiling $<"
# 	@$(CXXCOMPILE)  -c $<

.cpp.lo :
	@echo "Compiling $<"
	@$(CXXLTCOMPILE) -c $<

.F.o:
	@echo "compiling $<"
	@$(FCOMPILE)  -c $<

.F.lo :
	@echo "Compiling $<"
	@$(FLTCOMPILE)  -c $<

# .f.o:
# 	@echo "compiling $<"
# 	@$(FCOMPILE)  -c $<

.f.lo :
	@echo "Compiling $<"
	@$(FLTCOMPILE)  -c $<

.F90.o:
	@echo "compiling $<"
	@$(FCOMPILE)  -c $<

.F90.lo :
	@echo "Compiling $<"
	@$(FLTCOMPILE)  -c $<

.f90.o:
	@echo "compiling $<"
	@$(FCOMPILE)  -c $<

.f90.lo :
	@echo "Compiling $<"
	@$(FLTCOMPILE)  -c $<

# used when cross compiling
# if we are cross compiling
# produce also a lib file

CROSS=@CROSS@
LIBEXE=@LIBEXE@
LIB_TARGET=@LIB_TARGET@

ifeq ($(CROSS),yes)

ifeq ($(LIB_TARGET),yes)
all :: $(LIBRARY_NAME).lib
endif

$(LIBRARY_NAME).lib: $(LIBRARY_NAME).la $(LIBRARY_NAME).def
	@$(LIBEXE) /machine:$(TARGET_MACHINE) /def:$(LIBRARY_NAME).def /out:$(LIBRARY_NAME).lib

distclean::
	@$(RM) $(LIBRARY_NAME).dll $(LIBRARY_NAME).dll.a $(LIBRARY_NAME).exp
	@$(RM) $(LIBRARY_NAME).la $(LIBRARY_NAME).def $(LIBRARY_NAME).lib

$(LIBRARY_NAME).def: $(OBJS)
	@echo "Creation of $(LIBRARY_NAME).def"
	@$(CC) -shared -o $(LIBRARY_NAME)1.dll $(OBJS) \
		-Wl,--output-def,$(LIBRARY_NAME).def \
		-Wl,--export-all-symbols -Wl,--allow-multiple-definition \
		-Wl,--enable-auto-import $(LIBS) -Xlinker --out-implib -Xlinker $(LIBRARY_NAME)1.dll.a \
		-lgfortran  $(CFLAGS) $(LDFLAGS) -L$(SCIDIR)/bin -lnsp $(OTHERLIBS) 
	@$(RM) -f  $(LIBRARY_NAME)1.* 

endif


























